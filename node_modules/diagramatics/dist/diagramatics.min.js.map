{"version":3,"file":"diagramatics.min.js","sources":["../src/vector.ts","../src/BBcode.ts","../src/tag_names.ts","../src/diagram.ts","../src/utils.ts","../src/color_palette.ts","../src/unicode_utils.ts","../src/draw_svg.ts","../src/shapes.ts","../src/shapes/shapes_geometry.ts","../src/alignment.ts","../src/html_interactivity.ts","../src/modifier.ts","../node_modules/@velipso/polybool/dist/polybool.js","../src/boolean.ts","../src/filter.ts","../src/shapes/shapes_graph.ts","../src/shapes/shapes_annotation.ts","../src/shapes/shapes_mechanics.ts","../src/shapes/shapes_bar.ts","../src/shapes/shapes_table.ts","../src/shapes/shapes_numberline.ts","../src/shapes/shapes_boxplot.ts","../src/geo_construct/geo_construct.ts","../src/shapes/utils_tree.ts","../src/shapes/shapes_tree.ts","../src/shapes/shapes_curves.ts","../src/encoding.ts"],"sourcesContent":["/**\n *  Class for 2D Vectors \n*/\nexport class Vector2 {\n    constructor(public x: number, public y: number) { }\n    add(v: Vector2) : Vector2 {\n        return new Vector2(this.x + v.x, this.y + v.y);\n    }\n    sub(v: Vector2) : Vector2 {\n        return new Vector2(this.x - v.x, this.y - v.y);\n    }\n    scale(s: number) : Vector2 {\n        return new Vector2(this.x * s, this.y * s);\n    }\n    mul(v: Vector2) : Vector2 {\n        return new Vector2(this.x * v.x, this.y * v.y);\n    }\n    rotate(angle: number) : Vector2 {\n        let x = this.x * Math.cos(angle) - this.y * Math.sin(angle);\n        let y = this.x * Math.sin(angle) + this.y * Math.cos(angle);\n        return new Vector2(x, y);\n    }\n    dot(v: Vector2) : number {\n        return this.x * v.x + this.y * v.y;\n    }\n    cross(v: Vector2) : number {\n        return this.x * v.y - this.y * v.x;\n    }\n    equals(v: Vector2) : boolean {\n        return this.x == v.x && this.y == v.y;\n    }\n    length() : number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n    length_sq() : number {\n        return this.x * this.x + this.y * this.y;\n    }\n    angle() : number {\n        return Math.atan2(this.y, this.x);\n    }\n    normalize() : Vector2 {\n        let len = this.length();\n        return new Vector2(this.x / len, this.y / len);\n    }\n    copy() : Vector2 {\n        return new Vector2(this.x, this.y);\n    }\n    apply(f : (v : Vector2) => Vector2) : Vector2 {\n        return f(this.copy());\n    }\n}\n\n/**\n * Helper function to create a Vector2\n */\nexport function V2(x : number, y : number) : Vector2 {\n    return new Vector2(x, y);\n}\n\n/**\n * Helper function to create a Vector2 from an angle\n * @param angle angle in radians\n * @returns Vector2 with length 1\n */\nexport function Vdir(angle : number) : Vector2 {\n    return new Vector2(Math.cos(angle), Math.sin(angle));\n}\n\n\n// transformation functions\ntype TransformFunc = (p : Vector2) => Vector2;\nexport class Transform {\n    static translate(v : Vector2) : TransformFunc {\n        return (p : Vector2) => p.add(v);\n    }\n    static rotate(angle : number, pivot : Vector2) : TransformFunc {\n        return (p : Vector2) => p.sub(pivot).rotate(angle).add(pivot);\n    }\n    static scale(scale : Vector2, origin : Vector2) : TransformFunc {\n        return (p : Vector2) => p.sub(origin).mul(scale).add(origin);\n    }\n    static reflect_over_point(q : Vector2) : TransformFunc {\n        return (p : Vector2) => p.sub(q).rotate(Math.PI).add(q);\n    }\n    static reflect_over_line(p1 : Vector2, p2 : Vector2) : TransformFunc {\n        let v = p2.sub(p1);\n        let n = v.rotate(Math.PI / 2).normalize();\n        return (p : Vector2) => {\n            let d = n.dot(p.sub(p1));\n            return p.sub(n.scale(2*d));\n        }   \n    }\n    static skewX(angle : number, ybase : number) : TransformFunc {\n        return (p : Vector2) => {\n            let x = p.x + (ybase - p.y) * Math.tan(angle);\n            return new Vector2(x, p.y);\n        }\n    }\n    static skewY(angle : number, xbase : number) : TransformFunc {\n        return (p : Vector2) => {\n            let y = p.y + (xbase - p.x) * Math.tan(angle);\n            return new Vector2(p.x, y);\n        }\n    }\n};\n","import type { TextSpanData } from \"./diagram\";\n// BBCode parser for multiline text object\n//\n\nenum BB_TokenType {\n    TEXT      = \"TEXT\",\n    OPEN_TAG  = \"OPEN_TAG\",\n    CLOSE_TAG = \"CLOSE_TAG\",\n    EOF       = \"EOF\",\n}\ntype BB_Token = {\n    type       : BB_TokenType,\n    attributes : { [key: string]: string }\n}\n\nexport class BB_Lexer {\n    static parse_tag_content(str : string) : BB_Token {\n        if (str[0] === \"/\") {\n        // close tag\n            let name = str.substring(1);\n            return {\n                type: BB_TokenType.CLOSE_TAG,\n                attributes: {_tag_name : name}\n            }\n        }\n\n        // open tag\n        let space_id = str.indexOf(\" \");\n        let equal_id = str.indexOf(\"=\");\n        if (space_id === -1 && equal_id === -1) {\n        // [name]\n            return {\n                type: BB_TokenType.OPEN_TAG,\n                attributes: {_tag_name : str}\n            }\n        }\n        if (space_id === -1 && equal_id > 0) {\n        // [name=value]\n            let name = str.substring(0, equal_id);\n            let value = str.substring(equal_id + 1);\n            let attributes : any = {_tag_name : name}\n            attributes[name] = value;\n            return {\n                type: BB_TokenType.OPEN_TAG,\n                attributes\n            }\n        }\n        // [name attr1=value1 attr2=value2]\n        throw new Error(\"Unimplemented\");\n    }\n\n    static parse(text : string) : BB_Token[] | null {\n        let tokens : BB_Token[] = [];\n\n        let pos = 0;\n        let len = text.length;\n        while (pos < len) {\n            // Find the next tag\n            // Find [\n            let TagLeft = text.indexOf(\"[\", pos);\n            if (TagLeft === -1) {\n            // no more tags, add the rest of the text\n                tokens.push({ \n                    type: BB_TokenType.TEXT, \n                    attributes: {_text : text.substring(pos)} \n                });\n                break;\n            }\n            if (TagLeft > pos) {\n            // add the text before the [\n                tokens.push({ \n                    type: BB_TokenType.TEXT, \n                    attributes: {_text : text.substring(pos, TagLeft)} \n                });\n            }\n\n            // find ]\n            let TagRight = text.indexOf(\"]\", TagLeft);\n            let nextTagLeft  = text.indexOf(\"[\", TagLeft + 1);\n            // make sure there is no [ between the [ and ]\n            if (nextTagLeft > 0 && nextTagLeft < TagRight) return null;\n            // make sure there is a ] after the [\n            if (TagRight === -1) return null;\n\n            let tag_content = text.substring(TagLeft + 1, TagRight);\n            tokens.push(BB_Lexer.parse_tag_content(tag_content));\n\n            pos = TagRight + 1;\n        }\n        return tokens;\n    }\n}\n\nexport class BB_multiline {\n    static from_BBCode(text : string, linespace : string = \"1em\") : TextSpanData[] {\n        let tspans : {text : string, style : {}}[]  = []\n        let tag_stack : { [key: string]: string }[] = [];\n        let tokens = BB_Lexer.parse(text);\n        if (tokens === null) {\n            console.error(\"Invalid BBCode\");\n            return [];\n        }\n        for (let token of tokens) {\n            switch (token.type) {\n                case BB_TokenType.OPEN_TAG: {\n                    // if the token is [br] then add a new line\n                    if (token.attributes['_tag_name'] === \"br\") {\n                        const style = BB_multiline.build_style(tag_stack);\n                        const dy = style['_line-height'] ?? linespace;\n                        tspans.push({text: \"\\n\", style: {dy}});\n                        break;\n                    }\n                    tag_stack.push(token.attributes);\n                } break;\n                case BB_TokenType.CLOSE_TAG: {\n                    if (tag_stack.length === 0) {\n                        console.error(\"Invalid BBCode\");\n                        return [];\n                    }\n                    let tag_top = tag_stack[tag_stack.length - 1];\n                    if (tag_top['_tag_name'] !== token.attributes['_tag_name']) {\n                        console.error(\"Invalid BBCode\");\n                        return [];\n                    }\n                    tag_stack.pop();\n                } break;\n                case BB_TokenType.TEXT: {\n                    let style = BB_multiline.build_style(tag_stack);\n                    tspans.push({text: token.attributes['_text'], style});\n                } break;\n            }\n        }\n\n        return tspans;\n    }\n    \n    static split_tspans_by_words(text_span_data: TextSpanData[]) : TextSpanData[] {\n      let new_text_span_data : TextSpanData[] = [];\n      for (let span of text_span_data){\n        const text = span.text;\n        let words = text.split(\" \");\n        for (let i = 0; i < words.length-1; i++) words[i] += \" \";\n        for (let word of words){\n          new_text_span_data.push({text: word, style: JSON.parse(JSON.stringify(span.style))});\n        }\n      }\n      return new_text_span_data;\n    }\n\n    static build_style(tag_stack : { [key: string]: string }[]) {\n        let style : {[key: string]: any} = {};\n        for (let tag of tag_stack) {\n            switch (tag['_tag_name']) {\n                case \"b\"          : style[\"font-weight\"] = \"bold\"; break;\n                case \"i\"          : style[\"font-style\"] = \"italic\"; break;\n                case \"color\"      : style[\"fill\"] = tag[\"color\"]; break;\n                case \"size\"       : style[\"font-size\"] = tag[\"size\"]; break;\n                case \"dx\"         : style[\"dx\"] = tag[\"dx\"]; break;\n                case \"dy\"         : style[\"dy\"] = tag[\"dy\"]; break;\n                case \"font\"       : style[\"font-family\"] = tag[\"font\"]; break;\n                case \"var\"        : style[\"textvar\"] = true; break;\n                case \"tag\"        : style[\"tag\"] = tag[\"tag\"]; break;\n                case \"lineheight\" : style[\"_line-height\"] = tag[\"lineheight\"]; break;\n                case \"sup\": {\n                    style[\"baseline-shift\"] = \"super\";\n                    style[\"font-size-scale-factor\"] = 0.7;\n                    style[\"is-prev-word\"] = true;\n                } break;\n                case \"sub\": {\n                    style[\"baseline-shift\"] = \"-20%\";\n                    style[\"font-size-scale-factor\"] = 0.7;\n                    style[\"is-prev-word\"] = true;\n                } break;\n            }\n        }\n        return style;\n    }\n}\n","/*\n* For objects that contain children, having a tag is useful so that the children can be easily accessed.\n*/\n\nexport enum TAG {\n    EMPTY = \"empty\",\n    LINE = \"line\",\n    CIRCLE = \"circle\",\n    TEXTVAR = \"textvar\",\n    \n    // prefix\n    ROW_ = \"row_\",\n    COL_ = \"col_\",\n    \n    // arrow\n    ARROW_LINE = \"arrow_line\",\n    ARROW_HEAD = \"arrow_head\",\n    \n    // table\n    TABLE = \"table\",\n    CONTAIN_TABLE = \"contain_table\",\n    TABLE_CELL = \"table_cell\",\n    TABLE_CONTENT = \"table_content\",\n    EMPTY_CELL = \"empty_cell\",\n    \n    //graph\n    GRAPH_AXIS = \"graph_axis_line\",\n    GRAPH_TICK = \"graph_tick\",\n    GRAPH_TICK_LABEL = \"graph_tick_label\",\n    GRAPH_GRID = \"graph_grid\",\n}\n","import { Vector2, V2, Transform } from './vector.js';\nimport { BB_multiline } from './BBcode.js'\nimport { TAG } from './tag_names.js'\n\nfunction assert(condition : boolean, message : string) : void {\n    if (!condition) {\n        throw new Error(message || \"Assertion failed\");\n    }\n}\n\nexport enum DiagramType {\n    Polygon = 'polygon',\n    Curve   = 'curve',\n    Text    = 'text',\n    Image   = 'image',\n    Diagram = 'diagram',\n    MultilineText = 'multilinetext',\n}\n\nexport const DEFAULT_FONTSIZE = \"16\"; // 16px (12pt) is the web default\n\nexport type Anchor = \n    'top-left'    | 'top-center'    | 'top-right'    | \n    'center-left' | 'center-center' | 'center-right' | \n    'bottom-left' | 'bottom-center' | 'bottom-right' ;\n\n/**\n * Make sure that every function return a new Diagram\n * Diagram is immutable to the user\n */\n\nexport type DiagramStyle = {\n    \"stroke\"           : string,\n    \"fill\"             : string,\n    \"opacity\"          : string,\n    \"stroke-width\"     : string, // number\n    \"stroke-linecap\"   : string,\n    \"stroke-dasharray\" : string, // number[]\n    \"stroke-linejoin\"  : string,\n    \"vector-effect\"    : string,\n    \"filter\"?          : string\n    // TODO : add more style\n}\n\nexport type TextData = {\n    \"text\"             : string,\n    \"font-family\"      : string,\n    \"font-size\"        : string,\n    \"font-weight\"      : string,\n    \"font-style\"       : string,\n    \"text-anchor\"      : string,\n    \"dy\"               : string, // used to be \"dominant-baseline\": string,\n    \"angle\"            : string,\n    \"font-scale\"       : string, // this is a custom attribute that is not present in SVG\n    // \"letter-spacing\"   : string,\n    // \"word-spacing\"     : string,\n    // \"text-decoration\"  : string,\n    // \"writing-mode\"     : string,\n}\n\nexport type ImageData = {\n    \"src\"    : string,\n}\n\ntype ExtraTspanStyle = {\n    \"dy\" : string,\n    \"dx\" : string,\n    \"textvar\" : boolean,\n    \"tag\" : string,\n    \"baseline-shift\" : string,\n    \"font-size-scale-factor\": number,\n    \"is-prev-word\" : boolean, // tag to indicate that this is part of the previous word\n}\nexport type TextSpanData = {\n    \"text\"  : string,\n    \"style\" : Partial<TextData> & Partial<DiagramStyle> & Partial<ExtraTspanStyle>,\n}\nexport type MultilineTextData = {\n    \"content\" : TextSpanData[],\n    \"scale-factor\" : number,\n}\n\nfunction anchor_to_textdata(anchor : Anchor) : Partial<TextData> {\n    // TODO : might want to look at\n    // hanging vs text-before-edge\n    // ideographic vs text-after-edge\n    switch (anchor) {\n        case \"top-left\"      : return {\"text-anchor\" : \"start\" , \"dy\" : \"0.75em\"};\n        case \"top-center\"    : return {\"text-anchor\" : \"middle\", \"dy\" : \"0.75em\"};\n        case \"top-right\"     : return {\"text-anchor\" : \"end\"   , \"dy\" : \"0.75em\"};\n        case \"center-left\"   : return {\"text-anchor\" : \"start\" , \"dy\" : \"0.25em\"};\n        case \"center-center\" : return {\"text-anchor\" : \"middle\", \"dy\" : \"0.25em\"};\n        case \"center-right\"  : return {\"text-anchor\" : \"end\"   , \"dy\" : \"0.25em\"};\n        case \"bottom-left\"   : return {\"text-anchor\" : \"start\" , \"dy\" : \"-0.25em\"};\n        case \"bottom-center\" : return {\"text-anchor\" : \"middle\", \"dy\" : \"-0.25em\"};\n        case \"bottom-right\"  : return {\"text-anchor\" : \"end\"   , \"dy\" : \"-0.25em\"};\n        default: throw new Error(\"Unknown anchor \" + anchor);\n    }\n}\n\n\n/**\n* Diagram Class \n*\n* Diagram is a tree structure\n* Diagram can be a polygon, curve, text, image, or diagram\n* Polygon is a closed path\n* Curve is an open path\n* Diagram is a tree of Diagrams\n*/\nexport class Diagram {\n    type : DiagramType;\n    children : Diagram[] = [];\n    path : Path | undefined = undefined; // Polygon and Curve have a path\n    origin : Vector2 = new Vector2(0, 0); // position of the origin of the diagram\n    style         : Partial<DiagramStyle>      = {};\n    textdata      : Partial<TextData>          = {};\n    multilinedata : Partial<MultilineTextData> = {};\n    imgdata       : Partial<ImageData>         = {};\n    mutable       : boolean   = false;\n    tags : string[] = [];\n    \n    private _bbox_cache : [Vector2, Vector2] | undefined = undefined;\n\n    constructor(type_ : DiagramType, \n        args : { \n            path?     : Path, \n            children? : Diagram[], \n            textdata? : Partial<TextData>, \n            imgdata?  : Partial<ImageData>,\n            multilinedata? : Partial<MultilineTextData>,\n            tags?     : string[],\n        } = {}\n    ) {\n        this.type = type_;\n        this.path = args.path;\n        if (args.children) { this.children = args.children; }\n        if (args.textdata) { this.textdata = args.textdata; }\n        if (args.imgdata)  { this.imgdata  = args.imgdata; }\n        if (args.tags)     { this.tags     = args.tags; }\n        if (args.multilinedata) { this.multilinedata = args.multilinedata; }\n    }\n\n    /**\n     * Turn the diagram into a mutable diagram\n     */\n    public mut() : Diagram {\n        this.mutable = true;\n        // make path mutable\n        if (this.path != undefined) this.path.mutable = true;\n        // make all of the children mutable\n        for (let i = 0; i < this.children.length; i++) this.children[i].mut();\n        return this;\n    }\n\n    public mut_parent_only() : Diagram {\n        this.mutable = true;\n        // make path mutable\n        if (this.path != undefined) this.path.mutable = true;\n        return this;\n    }\n\n    /**\n     * Create a copy of the diagram that is immutable\n     */\n    public immut() : Diagram {\n        let newd : Diagram = this.copy();\n        newd.mutable = false;\n        // make path immutable\n        if (this.path != undefined) this.path.mutable = false;\n        // make all of the children immutable\n        for (let i = 0; i < newd.children.length; i++) newd.children[i].immut();\n        return newd;\n    }\n\n    private static deep_setPrototypeOf(obj : any) : void {\n        Object.setPrototypeOf(obj, Diagram.prototype);\n        let objd : Diagram = obj;\n        // convert position and origin_offset to Vector2\n        objd.origin = Object.setPrototypeOf(objd.origin, Vector2.prototype);\n        // make sure all of the children are Diagram\n        for (let c = 0; c < objd.children.length; c++)\n            Diagram.deep_setPrototypeOf(objd.children[c]);\n\n        // set path to Path\n        if (objd.path != undefined) {\n            Object.setPrototypeOf(objd.path, Path.prototype);\n            objd.path = objd.path.copy();\n        }\n        \n        // bbox cache \n        if (objd._bbox_cache != undefined && objd._bbox_cache.length == 2) {\n            Object.setPrototypeOf(objd._bbox_cache[0], Vector2.prototype);\n            Object.setPrototypeOf(objd._bbox_cache[1], Vector2.prototype);\n        }\n    }\n\n    /**\n     * Copy the diagram\n     * @return { Diagram }\n     */\n    public copy() : Diagram {\n        // do deepcopy with JSON\n        let newd : Diagram = JSON.parse(JSON.stringify(this));\n        // turn newd into Diagram\n        Diagram.deep_setPrototypeOf(newd);\n        return newd;\n    }\n\n    public copy_if_not_mutable() : Diagram {\n        return this.mutable ? this : this.copy();\n    }\n\n    /**\n     * Append tags to the diagram\n     */\n    public append_tags(tags : string | string[]) : Diagram {\n        let newd = this.copy_if_not_mutable();\n        if (!Array.isArray(tags)) tags = [tags];\n        for (let tag of tags){\n            if(!newd.tags.includes(tag)) newd.tags.push(tag);\n        }\n        return newd;\n    }\n    /**\n     * Remove tags from the diagram\n     */\n    public remove_tags(tags : string | string[]) : Diagram {\n        let newd = this.copy_if_not_mutable();\n        newd.tags = newd.tags.filter(t => !tags.includes(t));\n        return newd;\n    }\n    /**\n     * Reset all tags of the diagram\n     */\n    public reset_tags() : Diagram {\n        let newd = this.copy_if_not_mutable();\n        newd.tags = [];\n        return newd;\n    }\n    /**\n    * Check if the diagram contains a tag\n    */\n    public contain_tag(tag : string) : boolean {\n        return this.tags.includes(tag);\n    }\n    public contain_all_tags(tags : string[]) : boolean {\n        for (let tag of tags){\n            if (!this.tags.includes(tag)) return false;\n        }\n        return true;\n    }\n\n    /**\n     * Collect all children and subchildren of the diagram\n     * helper function for flatten()\n     */\n    private collect_children() : Diagram[] {\n        let children : Diagram[] = [];\n        if (this.type == DiagramType.Diagram) {\n            for (let c of this.children) {\n                children = children.concat(c.collect_children());\n            }\n        } else {\n            children.push(this);\n        }\n        return children;\n    }\n\n    /**\n     * Flatten the children structure of the diagram\n     * so that the diagram only has one level of children\n     * \\* implemented for performance reason\n     */\n    public flatten() : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        newd.children = newd.collect_children();\n        return newd;\n    }\n\n    /**\n     * Apply a function to the diagram\n     * @param func function to apply\n     * func takes in a diagram and returns a diagram\n     */\n    public apply(func : (d : Diagram) => Diagram) : Diagram {\n        return func(this.copy_if_not_mutable());\n    }\n\n    /**\n     * Apply a function to the diagram and all of its children recursively\n     * @param func function to apply\n     * func takes in a diagram and returns a diagram\n     */\n    public apply_recursive(func : (d : Diagram) => Diagram) : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        // apply to self\n        newd = func(newd);\n        // apply to children\n        for (let i = 0; i < newd.children.length; i++) {\n            newd.children[i] = newd.children[i].apply_recursive(func);\n        }\n        return newd;\n    }\n    \n    /**\n    * Apply a function to the diagram and all of its children recursively\n    * The function is only applied to the diagrams that contain a specific tag\n    * @param tags the tag to filter the diagrams\n    * @param func function to apply\n    * func takes in a diagram and returns a diagram\n    */ \n    public apply_to_tagged_recursive(tags : string | string[], func : (d : Diagram) => Diagram) : Diagram {\n        if (!Array.isArray(tags)) tags = [tags];\n        \n        let newd : Diagram = this.copy_if_not_mutable();\n        // if the diagram has the tag, apply the function to self\n        if (newd.contain_all_tags(tags)) newd = func(newd);\n        // apply to children\n        for (let i = 0; i < newd.children.length; i++) {\n            newd.children[i] = newd.children[i].apply_to_tagged_recursive(tags, func);\n        }\n        return newd;\n    }\n    \n    /**\n    * Get all the diagrams that contain a specific tag\n    * @param tags the tag to filter the diagrams\n    * @return a list of diagrams\n    */\n    public get_tagged_elements(tags : string | string[] ) : Diagram[] {\n        if (!Array.isArray(tags)) tags = [tags];\n        let result = [];\n        \n        if (this.contain_all_tags(tags)) result.push(this.copy_if_not_mutable());\n        for (let i = 0; i < this.children.length; i++) {\n            result = result.concat(this.children[i].get_tagged_elements(tags));\n        }\n        return result;\n    }\n\n    /**\n     * Combine another diagram with this diagram\n     * @param diagrams a diagram or a list of diagrams\n     */\n    public combine(...diagrams : Diagram[]) : Diagram {\n        return diagram_combine(this, ...diagrams);\n    }\n\n    /**\n     * Convert the diagram to a curve\n     * If the diagram is a polygon, convert it to a curve\n     * If the diagram is a Diagram, convert all of the children to curves\n     */\n    public to_curve() : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (newd.type == DiagramType.Polygon) {\n            newd.type = DiagramType.Curve;\n        } else if (newd.type == DiagramType.Diagram) {\n            // newd.children = newd.children.map(c => c.to_curve());\n            for (let i = 0; i < newd.children.length; i++) \n                newd.children[i] = newd.children[i].to_curve();\n        }\n        return newd;\n    }\n\n    /**\n     * Convert the diagram to a polygon\n     * If the diagram is a curve, convert it to a polygon\n     * If the diagram is a Diagram, convert all of the children to polygons\n     */\n    public to_polygon() : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (newd.type == DiagramType.Curve) {\n            newd.type = DiagramType.Polygon;\n        } else if (newd.type == DiagramType.Diagram) {\n            // newd.children = newd.children.map(c => c.to_polygon());\n            for (let i = 0; i < newd.children.length; i++)\n                newd.children[i] = newd.children[i].to_polygon();\n        }\n        return newd;\n    }\n\n    /**\n     * Add points to the diagram\n     * if the diagram is a polygon or curve, add points to the path\n     * if the diagram is a diagram, add points to the last polygon or curve child\n     * @param points points to add\n     */\n    public add_points(points : Vector2[]) : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (newd.type == DiagramType.Polygon || newd.type == DiagramType.Curve) {\n            if (newd.path == undefined) { throw new Error(this.type + \" must have a path\"); }\n            newd.path = newd.path.add_points(points);\n        } else if (newd.type == DiagramType.Diagram) {\n            // add point to the last polygon or curve child\n            let last_child = newd.children[newd.children.length - 1];\n            newd.children[newd.children.length - 1] = last_child.add_points(points);\n        }\n        return newd;\n    }\n\n    private update_style(stylename : keyof Diagram['style'], stylevalue : string, excludedType? : DiagramType[]) : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (excludedType?.includes(newd.type)) { \n            return newd; \n        } else if (newd.type == DiagramType.Polygon || newd.type == DiagramType.Curve \n            || newd.type == DiagramType.Text || newd.type == DiagramType.Image \n            || newd.type == DiagramType.MultilineText\n        ) {\n            newd.style[stylename] = stylevalue;\n        } else if (newd.type == DiagramType.Diagram) {\n            // newd.children = newd.children.map(c => c.update_style(stylename, stylevalue, excludedType));\n            for (let i = 0; i < newd.children.length; i++)\n                newd.children[i] = newd.children[i].update_style(stylename, stylevalue, excludedType);\n        } else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + newd.type);\n        }\n        return newd;\n    }\n    \n    /* * Clone style from another diagram */\n    public clone_style_from(diagram : Diagram) : Diagram {\n        return this.apply_recursive(d => {\n            d.style = {...diagram.style};\n            return d;\n        });\n    }\n\n    public fill(color : string) : Diagram { \n        return this.update_style('fill', color, [DiagramType.Text]);\n    }\n    public stroke(color : string) : Diagram { \n        return this.update_style('stroke', color, [DiagramType.Text]);\n    }\n    public opacity(opacity : number) : Diagram {\n        return this.update_style('opacity', opacity.toString());\n    }\n    public strokewidth(width : number) : Diagram { \n        return this.update_style('stroke-width', width.toString(), [DiagramType.Text]);\n    }\n    public strokelinecap(linecap : 'butt' | 'round' | 'square') : Diagram {\n        return this.update_style('stroke-linecap', linecap);\n    }\n    public strokelinejoin(linejoin : 'arcs' | 'bevel' | 'miter' | 'miter-clip' | 'round') : Diagram {\n        return this.update_style('stroke-linejoin', linejoin);\n    }\n    public strokedasharray(dasharray : number[]) : Diagram {\n        return this.update_style('stroke-dasharray', dasharray.join(','));\n    }\n    public vectoreffect(vectoreffect : 'none' | 'non-scaling-stroke' | 'non-scaling-size' | 'non-rotation' | 'fixed-position'\n) : Diagram {\n        return this.update_style('vector-effect', vectoreffect);\n    }\n    public filter(filter : string) : Diagram {\n        return this.update_style('filter', `url(#${filter})`);\n    }\n\n    public textfill(color : string) : Diagram {\n        return this.update_style('fill', color, [DiagramType.Polygon, DiagramType.Curve]);\n    }\n    public textstroke(color : string) : Diagram {\n        return this.update_style('stroke', color, [DiagramType.Polygon, DiagramType.Curve]);\n    }\n    public textstrokewidth(width : number) : Diagram {\n        return this.update_style('stroke-width', width.toString(), [DiagramType.Polygon, DiagramType.Curve]);\n    }\n\n\n    private update_textdata(textdataname : keyof Diagram['textdata'], textdatavalue : string) : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (newd.type == DiagramType.Text || newd.type == DiagramType.MultilineText) {\n            newd.textdata[textdataname] = textdatavalue;\n        } else if (newd.type == DiagramType.Diagram) {\n            // newd.children = newd.children.map(c => c.update_textdata(textdataname, textdatavalue));\n            for (let i = 0; i < newd.children.length; i++)\n                newd.children[i] = newd.children[i].update_textdata(textdataname, textdatavalue);\n        } else if (newd.type == DiagramType.Polygon || newd.type == DiagramType.Curve) {\n            // do nothing\n        } else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + newd.type);\n        }\n        return newd;\n    }\n    public fontfamily(fontfamily : string) : Diagram {\n        return this.update_textdata('font-family', fontfamily);\n    }\n    public fontstyle(fontstyle : string) : Diagram {\n        return this.update_textdata('font-style', fontstyle);\n    }\n    public fontsize(fontsize : number) : Diagram {\n        return this.update_textdata('font-size', fontsize.toString());\n    }\n    public fontweight(fontweight : 'normal' | 'bold' | 'bolder' | 'lighter' | number ) : Diagram {\n        return this.update_textdata('font-weight', fontweight.toString());\n    }\n    public fontscale(fontscale : number | 'auto') : Diagram {\n        return this.update_textdata('font-scale', fontscale.toString());\n    }\n    public textanchor(textanchor : 'start' | 'middle' | 'end' ) : Diagram {\n        return this.update_textdata('text-anchor', textanchor);\n    }\n    public textdy(dy : string) : Diagram {\n        return this.update_textdata('dy', dy);\n    }\n    public textangle(angle : number){\n        return this.update_textdata('angle', angle.toString());\n    }\n    public text_tovar() : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (newd.type == DiagramType.Text) {\n            newd = newd.append_tags(TAG.TEXTVAR);\n        } else if (newd.type == DiagramType.Diagram) {\n            // newd.children = newd.children.map(c => c.text_tovar());\n            for (let i = 0; i < newd.children.length; i++)\n                newd.children[i] = newd.children[i].text_tovar();\n        }\n        return newd;\n    }\n    public text_totext() : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (newd.type == DiagramType.Text) {\n            newd = newd.remove_tags('textvar');\n        } else if (newd.type == DiagramType.Diagram) {\n            // newd.children = newd.children.map(c => c.text_totext());\n            for (let i = 0; i < newd.children.length; i++)\n                newd.children[i] = newd.children[i].text_totext();\n        }\n        return newd;\n    }\n            \n\n\n    /**\n     * Get the bounding box of the diagram\n     * @returns [min, max] where min is the top left corner and max is the bottom right corner\n     */\n    public bounding_box() : [Vector2, Vector2] {\n        if (this._bbox_cache != undefined) return this._bbox_cache;\n        let minx = Infinity, miny = Infinity;\n        let maxx = -Infinity, maxy = -Infinity;\n        if (this.type == DiagramType.Diagram){\n                for (let c = 0; c < this.children.length; c++){\n                    let child = this.children[c];\n                    let [min, max] = child.bounding_box();\n                    minx = Math.min(minx, min.x);\n                    miny = Math.min(miny, min.y);\n                    maxx = Math.max(maxx, max.x);\n                    maxy = Math.max(maxy, max.y);\n                }\n                const bbox = [new Vector2(minx, miny), new Vector2(maxx, maxy)] as [Vector2, Vector2];\n                this._bbox_cache = bbox;\n                return bbox;\n        }\n        else if (this.type == DiagramType.Curve || this.type == DiagramType.Polygon \n            || this.type == DiagramType.Image){\n                if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\n                for (let p = 0; p < this.path.points.length; p++) {\n                    let point = this.path.points[p];\n                    minx = Math.min(minx, point.x);\n                    miny = Math.min(miny, point.y);\n                    maxx = Math.max(maxx, point.x);\n                    maxy = Math.max(maxy, point.y);\n                }\n                const bbox = [new Vector2(minx, miny), new Vector2(maxx, maxy)] as [Vector2, Vector2];\n                this._bbox_cache = bbox;\n                return bbox;\n        } \n        else if (this.type == DiagramType.Text || this.type == DiagramType.MultilineText){\n            const bbox = [this.origin.copy(), this.origin.copy()] as [Vector2, Vector2];\n            this._bbox_cache = bbox;\n            return bbox;\n        }\n        else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + this.type);\n        }\n    }\n\n    /**\n     * Transform the diagram by a function\n     * @param transform_function function to transform the diagram\n     */\n    public transform(transform_function : (p : Vector2) => Vector2) : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        newd._bbox_cache = undefined;\n        // transform all children\n        // newd.children = newd.children.map(c => c.transform(transform_function));\n        for (let i = 0; i < newd.children.length; i++)\n            newd.children[i] = newd.children[i].transform(transform_function);\n        // transform path\n        if (newd.path != undefined) newd.path = newd.path.transform(transform_function);\n        // transform origin\n        newd.origin = transform_function(newd.origin);\n        return newd;\n    }\n\n    /**\n     * Translate the diagram by a vector\n     * @param v vector to translate\n     */\n    public translate(v : Vector2) : Diagram {\n        // return this.transform(Transform.translate(v));\n        const prev_cached_bbox = this._bbox_cache;\n        const newd = this.transform(Transform.translate(v));\n        if (prev_cached_bbox != undefined) {\n            newd._bbox_cache = prev_cached_bbox.map(p => Transform.translate(v)(p)) as [Vector2, Vector2];\n        }\n        return newd;\n    }\n\n    /**\n     * move the diagram to a position\n     * @param v position to move to (if left undefined, move to the origin)\n     */\n    public position(v : Vector2 = new Vector2(0,0)) : Diagram {\n        let dv = v.sub(this.origin)\n        return this.translate(dv);\n    }\n\n    /**\n     * Rotate the diagram by an angle around a pivot\n     * @param angle angle to rotate\n     * @param pivot pivot point, if left undefined, rotate around the origin\n     */\n    public rotate(angle : number, pivot : Vector2 | undefined = undefined) : Diagram {\n        if (pivot == undefined) { pivot = this.origin; }\n        return this.transform(Transform.rotate(angle, pivot));\n    }\n\n    /**\n     * Scale the diagram by a scale around a origin\n     * @param scale scale to scale (x, y)\n     * @param origin origin point, if left undefined, scale around the origin\n     */\n    public scale(scale : Vector2 | number, origin? : Vector2) : Diagram {\n        if (origin == undefined) { origin = this.origin; }\n        if (typeof scale == 'number') { scale = new Vector2(scale, scale); }\n        return this.transform(Transform.scale(scale, origin));\n    }\n\n    /**\n     * Scale texts contained in the diagram by a scale\n     * @param scale scaling factor\n     */\n    public scaletext(scale : number) : Diagram {\n        return this.apply_recursive(d => {\n            switch (d.type) {\n                case DiagramType.Text: {\n                    let fontsize = parseFloat(d.textdata['font-size'] || DEFAULT_FONTSIZE);\n                    let newd = d.copy_if_not_mutable();\n                    newd.textdata['font-size'] = (fontsize * scale).toString();\n                    return newd;\n                }\n                case DiagramType.MultilineText: {\n                    let newd = d.copy_if_not_mutable();\n                    newd.multilinedata['scale-factor'] = (newd.multilinedata['scale-factor'] || 1) * scale;\n                    return newd;\n                }\n                default: return d;\n            }\n        });\n    }\n\n    /**\n     * Skew the diagram in the x direction by an angle around a base\n     * @param angle angle to skew\n     * @param base base point, if left undefined, skew around the origin\n     */\n    public skewX(angle : number, base? : Vector2) : Diagram {\n        if (base == undefined) { base = this.origin; }\n        return this.transform(Transform.skewX(angle, base.y));\n    }\n\n    /**\n     * Skew the diagram in the y direction by an angle around a base\n     * @param angle angle to skew\n     * @param base base point, if left undefined, skew around the origin\n     */\n    public skewY(angle : number, base? : Vector2) : Diagram {\n        if (base == undefined) { base = this.origin; }\n        return this.transform(Transform.skewY(angle, base.x));\n    }\n\n    /**\n     * Reflect the diagram over a point\n     * @param p point to reflect over\n     */\n    public reflect_over_point(p : Vector2) {\n        return this.transform(Transform.reflect_over_point(p));\n    }\n\n    /**\n     * Reflect the diagram over a line defined by two points\n     * @param p1 point on the line\n     * @param p2 point on the line\n     */\n    public reflect_over_line(p1 : Vector2, p2 : Vector2) {\n        return this.transform(Transform.reflect_over_line(p1, p2));\n    }\n\n    /**\n     * Reflect the diagram\n     * if given 0 arguments, reflect over the origin\n     * if given 1 argument, reflect over a point p1\n     * if given 2 arguments, reflect over a line defined by two points p1 and p2\n     * @param p1 point\n     * @param p2 point\n     */\n    public reflect(p1? : Vector2, p2? : Vector2){\n        if (p1 == undefined && p2 == undefined) {\n            return this.reflect_over_point(this.origin);\n        } else if (p1 != undefined && p2 == undefined) {\n            return this.reflect_over_point(p1);\n        } else if (p1 != undefined && p2 != undefined) {\n            return this.reflect_over_line(p1, p2);\n        } else {\n            throw new Error(\"Unreachable\");\n        }\n    }\n\n    /**\n     * Vertical flip\n     * Reflect the diagram over a horizontal line y = a\n     * @param a y value of the line\n     * if left undefined, flip over the origin\n     */\n    public vflip(a? : number) {\n        if (a == undefined) { a = this.origin.y; }\n        return this.reflect(new Vector2(0, a), new Vector2(1, a));\n    }\n\n    /**\n     * Horizontal flip\n     * Reflect the diagram over a vertical line x = a\n     * @param a x value of the line\n     * if left undefined, flip over the origin\n     */\n    public hflip(a? : number){\n        if (a == undefined) { a = this.origin.x; }\n        return this.reflect(new Vector2(a, 0), new Vector2(a, 1));\n    }\n\n\n    /**\n     * Get the position of the anchor of the diagram\n     * @param anchor anchor to get, anchors can be\n     *   'top-left', 'top-center', 'top-right'\n     *   'center-left', 'center-center', 'center-right'\n     *   'bottom-left', 'bottom-center', 'bottom-right'\n     * @returns the position of the anchor\n     */\n    public get_anchor(anchor : Anchor) : Vector2 {\n        let [min, max] = this.bounding_box();\n        let minx = min.x, miny = min.y;\n        let maxx = max.x, maxy = max.y;\n        let midx = (minx + maxx) / 2;\n        let midy = (miny + maxy) / 2;\n        switch (anchor) {\n            case \"top-left\"      : return new Vector2(minx, maxy);\n            case \"top-center\"    : return new Vector2(midx, maxy);\n            case \"top-right\"     : return new Vector2(maxx, maxy);\n            case \"center-left\"   : return new Vector2(minx, midy);\n            case \"center-center\" : return new Vector2(midx, midy);\n            case \"center-right\"  : return new Vector2(maxx, midy);\n            case \"bottom-left\"   : return new Vector2(minx, miny);\n            case \"bottom-center\" : return new Vector2(midx, miny);\n            case \"bottom-right\"  : return new Vector2(maxx, miny);\n            default: throw new Error(\"Unknown anchor \" + anchor);\n        }\n    }\n\n    /**\n     * Move the origin of the diagram to a position or anchor\n     * @param pos position to move the origin to (Vector2), or anchor to move the origin to.\n     * anchors can be\n     *  'top-left', 'top-center', 'top-right'\n     *  'center-left', 'center-center', 'center-right'\n     *  'bottom-left', 'bottom-center', 'bottom-right'\n     * * for texts, use `move_origin_text()`\n     */\n    public move_origin(pos : Vector2 | Anchor) : Diagram {\n        let newd : Diagram = this.copy_if_not_mutable();\n        if (pos instanceof Vector2) {\n            newd.origin = pos;\n        } else {\n            newd.origin = newd.get_anchor(pos);\n        }\n        return newd;\n    }\n\n    /**\n     * Move the origin of text diagram to an anchor\n     * @param anchor anchor to move the origin to.\n     * anchors can be\n     * 'top-left', 'top-center', 'top-right'\n     * 'center-left', 'center-center', 'center-right'\n     * 'bottom-left', 'bottom-center', 'bottom-right'\n     */\n    private __move_origin_text(anchor : Anchor) : Diagram {\n        // for text, use text-anchor and dominant-baseline\n        let newd = this.copy_if_not_mutable();\n        let textdata = anchor_to_textdata(anchor);\n        newd.textdata['text-anchor'] = textdata['text-anchor'];\n        newd.textdata['dy'] = textdata['dy'];\n        return newd;\n    }\n\n    /**\n     * Move the origin of text diagram to a position\n     * @param anchor anchor to move the origin to.\n     * anchors can be\n     * 'top-left', 'top-center', 'top-right'\n     * 'center-left', 'center-center', 'center-right'\n     * 'bottom-left', 'bottom-center', 'bottom-right'\n     *\n     */\n    public move_origin_text(anchor : Anchor) : Diagram {\n        let newd = this.copy_if_not_mutable();\n        if (this.type == DiagramType.Text || this.type == DiagramType.MultilineText) {\n            newd = newd.__move_origin_text(anchor);\n        } else if (this.type == DiagramType.Diagram) {\n            //newd.children = newd.children.map(c => c.move_origin_text(anchor));\n            for (let i = 0; i < newd.children.length; i++)\n                newd.children[i] = newd.children[i].move_origin_text(anchor);\n        } else {\n            // do nothing\n        }\n        return newd;\n    }\n\n    public path_length() : number {\n        if (this.type == DiagramType.Diagram) {\n            let length = 0;\n            for (let c = 0; c < this.children.length; c++) {\n                length += this.children[c].path_length();\n            }\n            return length;\n        } else if (this.type == DiagramType.Curve || this.type == DiagramType.Polygon) {\n            if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\n            return this.path.length();\n        } else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + this.type);\n        }\n    }\n    \n    /**\n    * Reverse the order of the points in the path\n    */\n    public reverse_path() {\n        let newd = this.copy_if_not_mutable();\n        if (newd.path) {\n            newd.path = newd.path?.reverse();\n        }\n        return newd;\n    }\n\n    /**\n     * Get the point on the path at t\n     * Path can be described parametrically in the form of (x(t), y(t))\n     * Path starts at t=0 and ends at t=1\n     * @param t parameter\n     * @param segment_index (only works for polygon and curves)\n     * If segment_index (n) is defined, get the point at the nth segment\n     * If segment_index (n) is defined, t can be outside of [0, 1] and will return the extrapolated point\n     * @returns the position of the point\n     */\n    public parametric_point(t : number, segment_index? : number) : Vector2 {\n        if (this.type == DiagramType.Diagram) {\n            // use entire length, use the childrens\n            let cumuative_length = [];\n            let length   = 0.0;\n            for (let c = 0; c < this.children.length; c++) {\n                length += this.children[c].path_length();\n                cumuative_length.push(length);\n            }\n            let total_length = length;\n            let cumulative_t = cumuative_length.map(l => l / total_length);\n\n            // figure out which children t is in\n            for (let i = 0; i < cumulative_t.length; i++) {\n                if (t <= cumulative_t[i]) {\n                    let child_id = i;\n\n                    let prev_t = (i == 0) ? 0 : cumulative_t[i-1];\n                    let segment_t = (t - prev_t) / (cumulative_t[i] - prev_t);\n                    return this.children[child_id].parametric_point(segment_t);\n                }\n            }\n            throw Error(\"Unreachable\");\n        } else if (this.type == DiagramType.Curve) {\n            // get the point on the path\n            if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\n            return this.path.parametric_point(t, false, segment_index);\n        } else if (this.type == DiagramType.Polygon) {\n            // get the point on the path\n            if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\n            return this.path.parametric_point(t, true, segment_index);\n        } else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + this.type);\n        }\n    }\n\n    public debug_bbox() : Diagram {\n        // TODO : let user supply the styling function\n        let style_bbox = (d : Diagram) => {\n            return d.fill('none').stroke('gray').strokedasharray([5,5])\n        };\n\n        let [min, max] = this.bounding_box();\n        let rect_bbox = polygon([\n            new Vector2(min.x, min.y), new Vector2(max.x, min.y), \n            new Vector2(max.x, max.y), new Vector2(min.x, max.y)\n        ]).apply(style_bbox);\n\n        let origin_x = text('+').position(this.origin)\n\n        return rect_bbox.combine(origin_x);\n    }\n\n    public debug(show_index : boolean = true) : Diagram {\n        // TODO : let user supply the styling function\n        let style_path = (d : Diagram) => {\n            return d.fill('none').stroke('red').strokedasharray([5,5])\n        };\n        let style_index = (d : Diagram) => {\n            let bg = d.textfill('white').textstroke('white').textstrokewidth(5);\n            let dd = d.fill('black');\n            return bg.combine(dd);\n        };\n\n        // handle each type separately\n        if (this.type == DiagramType.Diagram) {\n            return this.debug_bbox();\n        } \n        else if (this.type == DiagramType.Text){\n            // return empty at diagram origin\n            return empty(this.origin);\n        }\n        else if (this.type == DiagramType.Polygon || this.type == DiagramType.Curve \n            || this.type == DiagramType.Image){\n            let f_obj = this.type == DiagramType.Polygon || DiagramType.Image ? polygon : curve;\n\n            let deb_bbox = this.debug_bbox();\n\n            if (this.path == undefined) { throw new Error(this.type + \" must have a path\"); }\n            let deb_object = f_obj(this.path.points).apply(style_path);\n\n            // if show_index is false, return only the bbox and polygon\n            if (show_index == false) { return deb_bbox.combine(deb_object); }\n\n            // iterate for all path points\n            let points = this.path.points;\n            // let point_texts = points.map((p, i) => text(i.toString()).position(p).apply(style_index));\n            let point_texts : Diagram[] = [];\n            let prev_point : Vector2 | undefined = undefined;\n\n            let [min, max] = this.bounding_box();\n            let minimum_dist_tolerance = Math.min(max.x - min.x, max.y - min.y) / 10;\n            for (let i = 0; i < points.length; i++) {\n                // push to point_texts only if far enough from prev_point\n                let dist_to_prev = prev_point == undefined ? Infinity : points[i].sub(prev_point).length();\n                if (dist_to_prev < minimum_dist_tolerance) continue;\n\n                point_texts.push(text(i.toString()).position(points[i]).apply(style_index));\n                prev_point = points[i];\n            }\n\n            return deb_bbox.combine(deb_object,...point_texts);\n        }\n        else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + this.type);\n        }\n    }\n    \n    public is_empty() : boolean {\n        return this.contain_tag(TAG.EMPTY);\n    }\n}\n\nexport class Path {\n    mutable : boolean = false;\n    constructor(public points : Vector2[]) { }\n\n    copy() : Path {\n        let newpoints = this.points.map(p => new Vector2(p.x,p.y));\n        return new Path(newpoints);\n    }\n    copy_if_not_mutable() : Path {\n        return this.mutable ? this : this.copy();\n    }\n    \n    /**\n    * Reverse the order of the points in the path\n    */\n    public reverse() : Path {\n        let newp : Path = this.copy_if_not_mutable();\n        newp.points = newp.points.reverse();\n        return newp;\n    }\n\n    /**\n     * Get the length of the path\n     */\n    public length() : number {\n        let length = 0;\n        for (let i = 1; i < this.points.length; i++) {\n            length += this.points[i].sub(this.points[i-1]).length();\n        }\n        return length;\n    }\n\n    /**\n     * add points to the path\n     * @param points points to add\n     */\n    public add_points(points : Vector2[]) : Path {\n        let newp : Path = this.copy_if_not_mutable();\n        newp.points = newp.points.concat(points);\n        return newp;\n    }\n\n    /**\n     * Get the point on the path at t \n     * Path can be described parametrically in the form of (x(t), y(t))\n     * Path starts at t=0 and ends at t=1\n     * @param t parameter\n     * @param closed if true, the path is closed\n     * @param segment_index \n     * If `segment_index` (n) is defined, get the point at the nth segment.\n     * If `segment_index` (n) is defined, t can be outside of [0, 1] and will return the extrapolated point.\n     * @returns the position of the point\n    */\n    public parametric_point(t : number, closed : boolean = false, segment_index? : number) : Vector2 {\n        let extended_points = this.points;\n        if (closed) extended_points = this.points.concat(this.points[0]);\n        // for a closed path, there's an extra segment connecting the last point to the first point\n\n        if (segment_index == undefined) { \n            if (t < 0 || t > 1) { throw Error(\"t must be between 0 and 1\"); }\n            // use entire length\n            let cumulative_length = [];\n            let length   = 0.0;\n            for (let i = 1; i < extended_points.length; i++) {\n                length += extended_points[i].sub(extended_points[i-1]).length();\n                cumulative_length.push(length);\n            }\n            let total_length = length;\n            let cumulative_t = cumulative_length.map(l => l / total_length);\n            // figure out which segment t is in\n            for (let i = 0; i < cumulative_t.length; i++) {\n                if (t <= cumulative_t[i]) {\n                    let segment_id = i;\n\n                    let prev_t = (i == 0) ? 0 : cumulative_t[i-1];\n                    let segment_t = (t - prev_t) / (cumulative_t[i] - prev_t);\n                    return this.parametric_point(segment_t, closed, segment_id);\n                }\n            }\n            // segment must have been retrieved at this point\n            throw Error(\"Unreachable\");\n        } else {\n            // take nth segment\n            if (segment_index < 0 || segment_index > extended_points.length - 1) { \n                throw Error(\"segment_index must be between 0 and n-1\"); \n            }\n            let start = extended_points[segment_index];\n            let end   = extended_points[segment_index + 1];\n            let dir : Vector2 = end.sub(start);\n            return start.add(dir.scale(t));\n        }\n    }\n\n    /**\n     * Tranfrom the path by a function\n     * @param transform_function function to transform the path\n     */\n    public transform(transform_function : (p : Vector2) => Vector2) : Path {\n        let newp : Path = this.copy_if_not_mutable();\n        // transform all the points\n        // newp.points = newp.points.map(p => transform_function(p));\n        for (let i = 0; i < newp.points.length; i++) newp.points[i] = transform_function(newp.points[i]);\n        return newp;\n    }\n}\n\n/**\n * Combine multiple diagrams into one diagram\n * @param diagrams list of diagrams to combine\n * @returns a diagram\n */\nexport function diagram_combine(...diagrams : Diagram[]) : Diagram {\n    if (diagrams.length == 0) { return empty(); }\n    let newdiagrams = diagrams.map(d => d.copy_if_not_mutable());\n\n    // check if all children is mutable\n    // if they are, then set the new diagram to be mutable\n    let all_children_mutable = true;\n    for (let i = 0; i < newdiagrams.length; i++) {\n        if (!newdiagrams[i].mutable) { \n            all_children_mutable = false; \n            break; \n        }\n    }\n\n    let newd = new Diagram(DiagramType.Diagram, {children : newdiagrams});\n    newd.mutable = all_children_mutable;\n    return newd.move_origin(diagrams[0].origin);\n    // return newd.move_origin(Anchor.CenterCenter);\n    // i think it's better to keep the origin at the origin of the first diagram\n}\n\n// ====== function helpers to create primitives =========\n\n\n/**\n * Create a curve from a list of points\n * @param points list of points\n * @returns a curve diagram\n */\nexport function curve(points : Vector2[]) : Diagram {\n    let path : Path = new Path(points);\n    let curve = new Diagram(DiagramType.Curve, {path : path});\n    return curve;\n}\n\n/**\n * Create a line from start to end \n * @param start start point\n * @param end end point\n * @returns a line diagram\n */\nexport function line(start : Vector2, end : Vector2) : Diagram {\n    return curve([start, end]).append_tags(TAG.LINE);\n}\n\n\n/**\n * Create a polygon from a list of points\n * @param points list of points\n * @returns a polygon diagram\n */\nexport function polygon(points: Vector2[]) : Diagram {\n    assert(points.length >= 3, \"Polygon must have at least 3 points\");\n    let path : Path = new Path(points);\n\n    // create diagram\n    let polygon = new Diagram(DiagramType.Polygon, {path : path});\n    return polygon;\n}\n\n/**\n * Create an empty diagram, contain just a single point\n * @param v position of the point\n * @returns an empty diagram\n */\nexport function empty(v : Vector2 = V2(0,0)) : Diagram {\n    let emp = curve([v]).append_tags(TAG.EMPTY);\n    return emp;\n}\n\n/**\n * Create a text diagram\n * @param str text to display\n * @returns a text diagram\n */\nexport function text(str : string) : Diagram {\n    let dtext = new Diagram(DiagramType.Text, {\n        textdata : { text : str, \"font-size\" : DEFAULT_FONTSIZE },\n        path : new Path([new Vector2(0, 0)]),\n    });\n    return dtext;\n}\n\n/**\n * Create an image diagram\n * @param src image source\n * @param width width of the image\n * @param height height of the image\n * @returns an image diagram\n */\nexport function image(src : string, width : number, height: number){\n    let imgdata : ImageData = { src }\n    // path: bottom-left, bottom-right, top-right, top-left\n    let path    : Path      = new Path([\n        V2(-width/2, -height/2), V2(width/2, -height/2),\n        V2(width/2, height/2), V2(-width/2, height/2),\n    ]);\n    let img = new Diagram(DiagramType.Image, {imgdata : imgdata, path : path});\n    return img;\n}\n\n/**\n * Create a multiline text diagram\n * @param strs list of text to display\n */\nexport function multiline(spans : ([string] | [string,Partial<TextData>])[]) : Diagram {\n    let tspans : TextSpanData[] = [];\n    for (let i = 0; i < spans.length; i++) {\n        let text = spans[i][0];\n        let style = spans[i][1] ?? {};\n        tspans.push({text, style});\n    }\n    let dmulti = new Diagram(DiagramType.MultilineText, {\n        multilinedata : { content : tspans, \"scale-factor\" : 1 },\n        path : new Path([new Vector2(0, 0)]),\n    });\n    return dmulti;\n}\n\nexport function multiline_bb(bbstr : string, linespace? : string, split_by_word : boolean = false) : Diagram {\n    let tspans : TextSpanData[] = BB_multiline.from_BBCode(bbstr,linespace) as TextSpanData[];\n    if (split_by_word) tspans = BB_multiline.split_tspans_by_words(tspans);\n    let dmulti = new Diagram(DiagramType.MultilineText, {\n        multilinedata : { content : tspans, \"scale-factor\" : 1 },\n        path : new Path([new Vector2(0, 0)]),\n    });\n    return dmulti;\n}\n\n\n// END primitives =============================\n\nexport function diagram_from_jsonstring(str : string) : Diagram {\n    try {\n        // turn str into JSON object\n        let d : Diagram = JSON.parse(str);\n        // turn d into Diagram\n        Object.setPrototypeOf(d, Diagram.prototype);\n        d = d.copy();\n        return d;\n    } catch (e) {\n        // if there's a mistake, return an empty diagram\n        console.warn(e);\n        return empty(new Vector2(0,0));\n    }\n}\n","import { Vector2, V2 } from \"./vector.js\";\n\n/**\n * Helper function to convert from degrees to radians\n */\nexport function to_radian(angle: number) : number {\n    return angle * Math.PI / 180;\n}\n\n/**\n * Helper function to convert from radians to degrees\n */\nexport function to_degree(angle: number) : number {\n    return angle * 180 / Math.PI;\n}\n\n\n\nexport function array_repeat<T>(arr : T[], len : number) : T[] {\n    let new_arr : T[] = [];\n    for (let i = 0; i < len; i++) {\n        new_arr.push(arr[i % arr.length]);\n    }\n    return new_arr;\n}\n\n/**\n * Create a equivalently spaced array of numbers from start to end (inclusive) \n * [start, end]\n * @param start start value\n * @param end end value\n * @param n number of points\n */\nexport function linspace(start: number, end: number, n: number = 100) : number[] {\n    let result = [];\n    let step = (end - start) / (n - 1);\n    for (let i = 0; i < n; i++) {\n        result.push(start + step * i);\n    }\n    return result;\n}\n\n/**\n * Create a equivalently spaced array of numbers from start to end (exclusice) \n * [start, end)\n * @param start start value\n * @param end end value\n * @param n number of points\n */\nexport function linspace_exc(start: number, end: number, n: number = 100) : number[] {\n    let result = [];\n    let step = (end - start) / n;\n    for (let i = 0; i < n; i++) {\n        result.push(start + step * i);\n    }\n    return result;\n}\n\n/**\n * Create a equivalently spaced array of numbers from start to end (exclusive)\n * [start, end)\n * @param start start value\n * @param end end value\n * @param step step size\n */\nexport function range(start: number, end: number, step: number = 1) : number[] {\n    // step cannot be 0 and cannot be in the wrong direction\n    if (step == 0) return [];\n    let n = Math.floor((end - start) / step);\n    if (n <= 0) return [];\n\n    let result = [];\n    if (step > 0){\n        for (let i = start; i < end; i += step) {\n            result.push(i);\n        }\n    } else {\n        for (let i = start; i > end; i += step) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\n/**\n * Create a equivalently spaced array of numbers from start to end (inc)\n * [start, end]\n * @param start start value\n * @param end end value\n * @param step step size\n */\nexport function range_inc(start: number, end: number, step: number = 1) : number[] {\n    // step cannot be 0 and cannot be in the wrong direction\n    if (step == 0) return [];\n    let n = Math.floor((end - start) / step);\n    if (n <= 0) return [];\n\n    let result = [];\n    if (step > 0){\n        for (let i = start; i <= end; i += step) {\n            result.push(i);\n        }\n    } else {\n        for (let i = start; i >= end; i += step) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\n/**\n * Transpose a 2D array\n * if the array is not a rectangle, the transposed array will be padded with undefined\n * @param arr 2D array\n * @returns transposed 2D array\n */\nexport function transpose<T>(arr : T[][]) : (T|undefined)[][] {\n    let result : T[][] = [];\n    let n = Math.max(...arr.map(a => a.length));\n    for (let i = 0; i < n; i++) {\n        result.push([]);\n        for (let j = 0; j < arr.length; j++) {\n            result[i].push(arr[j][i]);\n        }\n    }\n    return result;\n}\n\n/* @return [top, right, bottom, left] */\nexport function expand_directional_value(padding : number | number[]) : [number,number,number,number] {\n    let p = padding;\n    if (typeof p === 'number') return [p,p,p,p];\n    if (!Array.isArray(p)) return [0,0,0,0];\n    if (p.length === 1) return [p[0], p[0], p[0], p[0]];\n    if (p.length === 2) return [p[0], p[1], p[0], p[1]];\n    if (p.length === 3) return [p[0], p[1], p[2], p[1]];\n    if (p.length >= 4)  return [p[0], p[1], p[2], p[3]];\n    return [0,0,0,0];\n}\n","// color from matpltlib's tab20\nexport const tab_color : {[key : string]: string} = {\n    'blue'        : '#1f77b4',\n    'lightblue'   : '#aec7e8',\n    'orange'      : '#ff7f0e',\n    'lightorange' : '#ffbb78',\n    'green'       : '#2ca02c',\n    'lightgreen'  : '#98df8a',\n    'red'         : '#d62728',\n    'lightred'    : '#ff9896',\n    'purple'      : '#9467bd',\n    'lightpurple' : '#c5b0d5',\n    'brown'       : '#8c564b',\n    'lightbrown'  : '#c49c94',\n    'pink'        : '#e377c2',\n    'lightpink'   : '#f7b6d2',\n    'grey'        : '#7f7f7f',\n    'lightgrey'   : '#c7c7c7',\n    'gray'        : '#7f7f7f',\n    'lightgray'   : '#c7c7c7',\n    'olive'       : '#bcbd22',\n    'lightolive'  : '#dbdb8d',\n    'cyan'        : '#17becf',\n    'lightcyan'   : '#9edae5',\n}\n\nexport function get_color(colorname : string, palette : {[key : string]: string}) : string {\n    return palette[colorname] ?? colorname;\n}\n","const unicode_mathematical_italic = {\n    'A' : '𝐴', 'B' : '𝐵', 'C' : '𝐶', 'D' : '𝐷', 'E' : '𝐸',\n    'F' : '𝐹', 'G' : '𝐺', 'H' : '𝐻', 'I' : '𝐼', 'J' : '𝐽',\n    'K' : '𝐾', 'L' : '𝐿', 'M' : '𝑀', 'N' : '𝑁', 'O' : '𝑂',\n    'P' : '𝑃', 'Q' : '𝑄', 'R' : '𝑅', 'S' : '𝑆', 'T' : '𝑇',\n    'U' : '𝑈', 'V' : '𝑉', 'W' : '𝑊', 'X' : '𝑋', 'Y' : '𝑌', 'Z' : '𝑍',\n    'a' : '𝑎', 'b' : '𝑏', 'c' : '𝑐', 'd' : '𝑑', 'e' : '𝑒',\n    'f' : '𝑓', 'g' : '𝑔', 'h' : 'ℎ', 'i' : '𝑖', 'j' : '𝑗',\n    'k' : '𝑘', 'l' : '𝑙', 'm' : '𝑚', 'n' : '𝑛', 'o' : '𝑜',\n    'p' : '𝑝', 'q' : '𝑞', 'r' : '𝑟', 's' : '𝑠', 't' : '𝑡',\n    'u' : '𝑢', 'v' : '𝑣', 'w' : '𝑤', 'x' : '𝑥', 'y' : '𝑦', 'z' : '𝑧',\n\n    'Α' : '𝛢', 'Β' : '𝛣', 'Γ' : '𝛤', 'Δ' : '𝛥', 'Ε' : '𝛦',\n    'Ζ' : '𝛧', 'Η' : '𝛨', 'Θ' : '𝛩', 'Ι' : '𝛪', 'Κ' : '𝛫',\n    'Λ' : '𝛬', 'Μ' : '𝛭', 'Ν' : '𝛮', 'Ξ' : '𝛯', 'Ο' : '𝛰',\n    'Π' : '𝛱', 'Ρ' : '𝛲', 'Σ' : '𝛴', 'Τ' : '𝛵', 'Υ' : '𝛶',\n    'Φ' : '𝛷', 'Χ' : '𝛸', 'Ψ' : '𝛹', 'Ω' : '𝛺',\n    'α' : '𝛼', 'β' : '𝛽', 'γ' : '𝛾', 'δ' : '𝛿', 'ε' : '𝜀',\n    'ζ' : '𝜁', 'η' : '𝜂', 'θ' : '𝜃', 'ι' : '𝜄', 'κ' : '𝜅',\n    'λ' : '𝜆', 'μ' : '𝜇', 'ν' : '𝜈', 'ξ' : '𝜉', 'ο' : '𝜊',\n    'π' : '𝜋', 'ρ' : '𝜌', 'ς' : '𝜍', 'σ' : '𝜎', 'τ' : '𝜏', 'υ' : '𝜐', \n    'φ' : '𝜑', 'χ' : '𝜒', 'ψ' : '𝜓', 'ω' : '𝜔',\n    'ϑ' : '𝜗', 'ϰ' : '𝜘', 'ϕ' : '𝜙', 'ϱ' : '𝜚', 'ϖ' : '𝜛',\n    // '.' : '𝛻', '.' : '𝛳', '.' : '𝜕', '.' : '𝜖',\n}\nconst reversed_unicode_mathematical_italic = Object.fromEntries(\n    Object.entries(unicode_mathematical_italic).map(([k,v]) => [v,k])\n);\n\nconst latex_greek  = {\n    '\\\\alpha'   : 'α', '\\\\beta'    : 'β', '\\\\gamma'   : 'γ', '\\\\delta'   : 'δ', '\\\\epsilon' : 'ε',\n    '\\\\zeta'    : 'ζ', '\\\\eta'     : 'η', '\\\\theta'   : 'θ', '\\\\iota'    : 'ι', '\\\\kappa'   : 'κ',\n    '\\\\lambda'  : 'λ', '\\\\mu'      : 'μ', '\\\\nu'      : 'ν', '\\\\xi'      : 'ξ', '\\\\omicron' : 'ο',\n    '\\\\pi'      : 'π', '\\\\rho'     : 'ρ', '\\\\sigma'   : 'σ', '\\\\tau'     : 'τ', '\\\\upsilon' : 'υ',\n    '\\\\phi'     : 'ϕ', '\\\\chi'     : 'χ', '\\\\psi'     : 'ψ', '\\\\omega'   : 'ω',\n    '\\\\vartheta'   : 'ϑ', '\\\\varchi'     : 'ϰ', '\\\\varphi'     : 'φ', '\\\\varepsilon' : 'ε',\n    '\\\\varrho'     : 'ϱ', '\\\\varsigma'   : 'ς',\n}\n\nconst latex_symbols = {\n    \"textfractionsolidus\" : \"⁄\",\n    \"leftrightsquigarrow\" : \"↭\",\n    \"textpertenthousand\" : \"‱\",\n    \"blacktriangleright\" : \"▸\",\n    \"blacktriangledown\" : \"▾\",\n    \"blacktriangleleft\" : \"◂\",\n    \"twoheadrightarrow\" : \"↠\",\n    \"leftrightharpoons\" : \"⇋\",\n    \"rightleftharpoons\" : \"⇌\",\n    \"textreferencemark\" : \"※\",\n    \"circlearrowright\" : \"↻\",\n    \"rightrightarrows\" : \"⇉\",\n    \"vartriangleright\" : \"⊳\",\n    \"textordmasculine\" : \"º\",\n    \"textvisiblespace\" : \"␣\",\n    \"twoheadleftarrow\" : \"↞\",\n    \"downharpoonright\" : \"⇂\",\n    \"ntrianglerighteq\" : \"⋭\",\n    \"rightharpoondown\" : \"⇁\",\n    \"textperthousand\" : \"‰\",\n    \"leftrightarrows\" : \"⇆\",\n    \"textmusicalnote\" : \"♪\",\n    \"nleftrightarrow\" : \"↮\",\n    \"rightleftarrows\" : \"⇄\",\n    \"bigtriangledown\" : \"▽\",\n    \"textordfeminine\" : \"ª\",\n    \"ntrianglelefteq\" : \"⋬\",\n    \"rightthreetimes\" : \"⋌\",\n    \"trianglerighteq\" : \"⊵\",\n    \"vartriangleleft\" : \"⊲\",\n    \"rightsquigarrow\" : \"⇝\",\n    \"downharpoonleft\" : \"⇃\",\n    \"curvearrowright\" : \"↷\",\n    \"circlearrowleft\" : \"↺\",\n    \"leftharpoondown\" : \"↽\",\n    \"nLeftrightarrow\" : \"⇎\",\n    \"curvearrowleft\" : \"↶\",\n    \"guilsinglright\" : \"›\",\n    \"leftthreetimes\" : \"⋋\",\n    \"leftrightarrow\" : \"↔\",\n    \"rightharpoonup\" : \"⇀\",\n    \"guillemotright\" : \"»\",\n    \"downdownarrows\" : \"⇊\",\n    \"hookrightarrow\" : \"↪\",\n    \"dashrightarrow\" : \"⇢\",\n    \"leftleftarrows\" : \"⇇\",\n    \"trianglelefteq\" : \"⊴\",\n    \"ntriangleright\" : \"⋫\",\n    \"doublebarwedge\" : \"⌆\",\n    \"upharpoonright\" : \"↾\",\n    \"rightarrowtail\" : \"↣\",\n    \"looparrowright\" : \"↬\",\n    \"Leftrightarrow\" : \"⇔\",\n    \"sphericalangle\" : \"∢\",\n    \"divideontimes\" : \"⋇\",\n    \"measuredangle\" : \"∡\",\n    \"blacktriangle\" : \"▴\",\n    \"ntriangleleft\" : \"⋪\",\n    \"mathchar1356\" : \"⁁\",\n    \"texttrademark\" : \"™\",\n    \"mathchar2208\" : \"⌖\",\n    \"triangleright\" : \"▹\",\n    \"leftarrowtail\" : \"↢\",\n    \"guilsinglleft\" : \"‹\",\n    \"upharpoonleft\" : \"↿\",\n    \"mathbb{gamma}\" : \"ℽ\",\n    \"fallingdotseq\" : \"≒\",\n    \"looparrowleft\" : \"↫\",\n    \"textbrokenbar\" : \"¦\",\n    \"hookleftarrow\" : \"↩\",\n    \"smallsetminus\" : \"﹨\",\n    \"dashleftarrow\" : \"⇠\",\n    \"guillemotleft\" : \"«\",\n    \"leftharpoonup\" : \"↼\",\n    \"mathbb{Gamma}\" : \"ℾ\",\n    \"bigtriangleup\" : \"△\",\n    \"textcircledP\" : \"℗\",\n    \"risingdotseq\" : \"≓\",\n    \"triangleleft\" : \"◃\",\n    \"mathsterling\" : \"£\",\n    \"textcurrency\" : \"¤\",\n    \"triangledown\" : \"▿\",\n    \"blacklozenge\" : \"\",\n    \"sfrac{5}{6}\" : \"⅚\",\n    \"preccurlyeq\" : \"≼\",\n    \"Rrightarrow\" : \"⇛\",\n    \"circledcirc\" : \"⊚\",\n    \"nRightarrow\" : \"⇏\",\n    \"sfrac{3}{8}\" : \"⅜\",\n    \"sfrac{1}{3}\" : \"⅓\",\n    \"sfrac{2}{5}\" : \"⅖\",\n    \"vartriangle\" : \"▵\",\n    \"Updownarrow\" : \"⇕\",\n    \"nrightarrow\" : \"↛\",\n    \"sfrac{1}{2}\" : \"½\",\n    \"sfrac{3}{5}\" : \"⅗\",\n    \"succcurlyeq\" : \"≽\",\n    \"sfrac{4}{5}\" : \"⅘\",\n    \"diamondsuit\" : \"♦\",\n    \"sfrac{1}{6}\" : \"⅙\",\n    \"curlyeqsucc\" : \"⋟\",\n    \"blacksquare\" : \"▪\",\n    \"curlyeqprec\" : \"⋞\",\n    \"sfrac{1}{8}\" : \"⅛\",\n    \"sfrac{7}{8}\" : \"⅞\",\n    \"sfrac{1}{5}\" : \"⅕\",\n    \"sfrac{2}{3}\" : \"⅔\",\n    \"updownarrow\" : \"↕\",\n    \"backepsilon\" : \"∍\",\n    \"circleddash\" : \"⊝\",\n    \"eqslantless\" : \"⋜\",\n    \"sfrac{3}{4}\" : \"¾\",\n    \"sfrac{5}{8}\" : \"⅝\",\n    \"sfrac{1}{4}\" : \"¼\",\n    \"mathbb{Pi}\" : \"ℿ\",\n    \"mathcal{M}\" : \"ℳ\",\n    \"mathcal{o}\t\" : \"ℴ\",\n    \"mathcal{O}\t\" : \"𝒪\",\n    \"nsupseteqq\" : \"⊉\",\n    \"mathcal{B}\" : \"ℬ\",\n    \"textrecipe\" : \"℞\",\n    \"nsubseteqq\" : \"⊈\",\n    \"subsetneqq\" : \"⊊\",\n    \"mathcal{I}\" : \"ℑ\",\n    \"upuparrows\" : \"⇈\",\n    \"mathcal{e}\" : \"ℯ\",\n    \"mathcal{L}\" : \"ℒ\",\n    \"nleftarrow\" : \"↚\",\n    \"mathcal{H}\" : \"ℋ\",\n    \"mathcal{E}\" : \"ℰ\",\n    \"eqslantgtr\" : \"⋝\",\n    \"curlywedge\" : \"⋏\",\n    \"varepsilon\" : \"ε\",\n    \"supsetneqq\" : \"⊋\",\n    \"rightarrow\" : \"→\",\n    \"mathcal{R}\" : \"ℛ\",\n    \"sqsubseteq\" : \"⊑\",\n    \"mathcal{g}\" : \"ℊ\",\n    \"sqsupseteq\" : \"⊒\",\n    \"complement\" : \"∁\",\n    \"Rightarrow\" : \"⇒\",\n    \"gtreqqless\" : \"⋛\",\n    \"lesseqqgtr\" : \"⋚\",\n    \"circledast\" : \"⊛\",\n    \"nLeftarrow\" : \"⇍\",\n    \"Lleftarrow\" : \"⇚\",\n    \"varnothing\" : \"∅\",\n    \"mathcal{N}\" : \"𝒩\",\n    \"Leftarrow\" : \"⇐\",\n    \"gvertneqq\" : \"≩\",\n    \"mathbb{C}\" : \"ℂ\",\n    \"supsetneq\" : \"⊋\",\n    \"leftarrow\" : \"←\",\n    \"nleqslant\" : \"≰\",\n    \"mathbb{Q}\" : \"ℚ\",\n    \"mathbb{Z}\" : \"ℤ\",\n    \"llbracket\" : \"〚\",\n    \"mathbb{H}\" : \"ℍ\",\n    \"spadesuit\" : \"♠\",\n    \"mathit{o}\" : \"ℴ\",\n    \"mathbb{P}\" : \"ℙ\",\n    \"rrbracket\" : \"〛\",\n    \"supseteqq\" : \"⊇\",\n    \"copyright\" : \"©\",\n    \"textsc{k}\" : \"ĸ\",\n    \"gtreqless\" : \"⋛\",\n    \"mathbb{j}\" : \"ⅉ\",\n    \"pitchfork\" : \"⋔\",\n    \"estimated\" : \"℮\",\n    \"ngeqslant\" : \"≱\",\n    \"mathbb{e}\" : \"ⅇ\",\n    \"therefore\" : \"∴\",\n    \"triangleq\" : \"≜\",\n    \"varpropto\" : \"∝\",\n    \"subsetneq\" : \"⊊\",\n    \"heartsuit\" : \"♥\",\n    \"mathbb{d}\" : \"ⅆ\",\n    \"lvertneqq\" : \"≨\",\n    \"checkmark\" : \"✓\",\n    \"nparallel\" : \"∦\",\n    \"mathbb{R}\" : \"ℝ\",\n    \"lesseqgtr\" : \"⋚\",\n    \"downarrow\" : \"↓\",\n    \"mathbb{D}\" : \"ⅅ\",\n    \"mathbb{i}\" : \"ⅈ\",\n    \"backsimeq\" : \"⋍\",\n    \"mathbb{N}\" : \"ℕ\",\n    \"Downarrow\" : \"⇓\",\n    \"subseteqq\" : \"⊆\",\n    \"setminus\" : \"∖\",\n    \"succnsim\" : \"⋩\",\n    \"doteqdot\" : \"≑\",\n    \"clubsuit\" : \"♣\",\n    \"emptyset\" : \"∅\",\n    \"sqsupset\" : \"⊐\",\n    \"fbox{~~}\" : \"▭\",\n    \"curlyvee\" : \"⋎\",\n    \"varkappa\" : \"ϰ\",\n    \"llcorner\" : \"⌞\",\n    \"varsigma\" : \"ς\",\n    \"approxeq\" : \"≊\",\n    \"backcong\" : \"≌\",\n    \"supseteq\" : \"⊇\",\n    \"circledS\" : \"Ⓢ\",\n    \"circledR\" : \"®\",\n    \"textcent\" : \"¢\",\n    \"urcorner\" : \"⌝\",\n    \"lrcorner\" : \"⌟\",\n    \"boxminus\" : \"⊟\",\n    \"texteuro\" : \"€\",\n    \"vartheta\" : \"ϑ\",\n    \"barwedge\" : \"⊼\",\n    \"ding{86}\" : \"✶\",\n    \"sqsubset\" : \"⊏\",\n    \"subseteq\" : \"⊆\",\n    \"intercal\" : \"⊺\",\n    \"ding{73}\" : \"☆\",\n    \"ulcorner\" : \"⌜\",\n    \"recorder\" : \"⌕\",\n    \"precnsim\" : \"⋨\",\n    \"parallel\" : \"∥\",\n    \"boxtimes\" : \"⊠\",\n    \"ding{55}\" : \"✗\",\n    \"multimap\" : \"⊸\",\n    \"maltese\" : \"✠\",\n    \"nearrow\" : \"↗\",\n    \"swarrow\" : \"↙\",\n    \"lozenge\" : \"◊\",\n    \"sqrt[3]\" : \"∛\",\n    \"succsim\" : \"≿\",\n    \"dotplus\" : \"∔\",\n    \"tilde{}\" : \"~\",\n    \"check{}\" : \"ˇ\",\n    \"lessgtr\" : \"≶\",\n    \"Upsilon\" : \"ϒ\",\n    \"Cdprime\" : \"Ъ\",\n    \"gtrless\" : \"≷\",\n    \"backsim\" : \"∽\",\n    \"nexists\" : \"∄\",\n    \"searrow\" : \"↘\",\n    \"lessdot\" : \"⋖\",\n    \"boxplus\" : \"⊞\",\n    \"upsilon\" : \"υ\",\n    \"epsilon\" : \"ε\",\n    \"diamond\" : \"⋄\",\n    \"bigstar\" : \"★\",\n    \"ddagger\" : \"‡\",\n    \"cdprime\" : \"ъ\",\n    \"Uparrow\" : \"⇑\",\n    \"sqrt[4]\" : \"∜\",\n    \"between\" : \"≬\",\n    \"sqangle\" : \"∟\",\n    \"digamma\" : \"Ϝ\",\n    \"uparrow\" : \"↑\",\n    \"nwarrow\" : \"↖\",\n    \"precsim\" : \"≾\",\n    \"breve{}\" : \"˘\",\n    \"because\" : \"∵\",\n    \"bigcirc\" : \"◯\",\n    \"acute{}\" : \"´\",\n    \"grave{}\" : \"`\",\n    \"lesssim\" : \"≲\",\n    \"partial\" : \"∂\",\n    \"natural\" : \"♮\",\n    \"supset\" : \"⊃\",\n    \"hstrok\" : \"ħ\",\n    \"Tstrok\" : \"Ŧ\",\n    \"coprod\" : \"∐\",\n    \"models\" : \"⊧\",\n    \"otimes\" : \"⊗\",\n    \"degree\" : \"°\",\n    \"gtrdot\" : \"⋗\",\n    \"preceq\" : \"≼\",\n    \"Lambda\" : \"Λ\",\n    \"lambda\" : \"λ\",\n    \"cprime\" : \"ь\",\n    \"varrho\" : \"ϱ\",\n    \"Bumpeq\" : \"≎\",\n    \"hybull\" : \"⁃\",\n    \"lmidot\" : \"ŀ\",\n    \"nvdash\" : \"⊬\",\n    \"lbrace\" : \"{\",\n    \"bullet\" : \"•\",\n    \"varphi\" : \"φ\",\n    \"bumpeq\" : \"≏\",\n    \"ddot{}\" : \"¨\",\n    \"Lmidot\" : \"Ŀ\",\n    \"Cprime\" : \"Ь\",\n    \"female\" : \"♀\",\n    \"rtimes\" : \"⋊\",\n    \"gtrsim\" : \"≳\",\n    \"mapsto\" : \"↦\",\n    \"daleth\" : \"ℸ\",\n    \"square\" : \"■\",\n    \"nVDash\" : \"⊯\",\n    \"rangle\" : \"⟩\",\n    \"tstrok\" : \"ŧ\",\n    \"oslash\" : \"⊘\",\n    \"ltimes\" : \"⋉\",\n    \"lfloor\" : \"⌊\",\n    \"marker\" : \"▮\",\n    \"Subset\" : \"⋐\",\n    \"Vvdash\" : \"⊪\",\n    \"propto\" : \"∝\",\n    \"Hstrok\" : \"Ħ\",\n    \"dlcrop\" : \"⌍\",\n    \"forall\" : \"∀\",\n    \"nVdash\" : \"⊮\",\n    \"Supset\" : \"⋑\",\n    \"langle\" : \"⟨\",\n    \"ominus\" : \"⊖\",\n    \"rfloor\" : \"⌋\",\n    \"circeq\" : \"≗\",\n    \"eqcirc\" : \"≖\",\n    \"drcrop\" : \"⌌\",\n    \"veebar\" : \"⊻\",\n    \"ulcrop\" : \"⌏\",\n    \"nvDash\" : \"⊭\",\n    \"urcrop\" : \"⌎\",\n    \"exists\" : \"∃\",\n    \"approx\" : \"≈\",\n    \"dagger\" : \"†\",\n    \"boxdot\" : \"⊡\",\n    \"succeq\" : \"≽\",\n    \"bowtie\" : \"⋈\",\n    \"subset\" : \"⊂\",\n    \"notin\" : \"∉\",\n    \"Sigma\" : \"Σ\",\n    \"Omega\" : \"Ω\",\n    \"nabla\" : \"∇\",\n    \"colon\" : \":\",\n    \"boxHu\" : \"╧\",\n    \"boxHd\" : \"╤\",\n    \"aleph\" : \"ℵ\",\n    \"gnsim\" : \"⋧\",\n    \"boxHU\" : \"╩\",\n    \"boxHD\" : \"╦\",\n    \"equiv\" : \"≡\",\n    \"lneqq\" : \"≨\",\n    \"alpha\" : \"α\",\n    \"amalg\" : \"∐\",\n    \"boxhU\" : \"╨\",\n    \"boxhD\" : \"╥\",\n    \"uplus\" : \"⊎\",\n    \"boxhu\" : \"┴\",\n    \"kappa\" : \"κ\",\n    \"sigma\" : \"σ\",\n    \"boxDL\" : \"╗\",\n    \"Theta\" : \"Θ\",\n    \"Vdash\" : \"⊩\",\n    \"boxDR\" : \"╔\",\n    \"boxDl\" : \"╖\",\n    \"sqcap\" : \"⊓\",\n    \"boxDr\" : \"╓\",\n    \"bar{}\" : \"¯\",\n    \"dashv\" : \"⊣\",\n    \"vDash\" : \"⊨\",\n    \"boxdl\" : \"┐\",\n    \"boxVl\" : \"╢\",\n    \"boxVh\" : \"╫\",\n    \"boxVr\" : \"╟\",\n    \"boxdr\" : \"┌\",\n    \"boxdL\" : \"╕\",\n    \"boxVL\" : \"╣\",\n    \"boxVH\" : \"╬\",\n    \"boxVR\" : \"╠\",\n    \"boxdR\" : \"╒\",\n    \"theta\" : \"θ\",\n    \"lhblk\" : \"▄\",\n    \"uhblk\" : \"▀\",\n    \"ldotp\" : \".\",\n    \"ldots\" : \"…\",\n    \"boxvL\" : \"╡\",\n    \"boxvH\" : \"╪\",\n    \"boxvR\" : \"╞\",\n    \"boxvl\" : \"┤\",\n    \"boxvh\" : \"┼\",\n    \"boxvr\" : \"├\",\n    \"Delta\" : \"Δ\",\n    \"boxUR\" : \"╚\",\n    \"boxUL\" : \"╝\",\n    \"oplus\" : \"⊕\",\n    \"boxUr\" : \"╙\",\n    \"boxUl\" : \"╜\",\n    \"doteq\" : \"≐\",\n    \"happy\" : \"㋡\",\n    \"varpi\" : \"ϖ\",\n    \"smile\" : \"☺\",\n    \"boxul\" : \"┘\",\n    \"simeq\" : \"≃\",\n    \"boxuR\" : \"╘\",\n    \"boxuL\" : \"╛\",\n    \"boxhd\" : \"┬\",\n    \"gimel\" : \"ℷ\",\n    \"Gamma\" : \"Γ\",\n    \"lnsim\" : \"⋦\",\n    \"sqcup\" : \"⊔\",\n    \"omega\" : \"ω\",\n    \"sharp\" : \"♯\",\n    \"times\" : \"×\",\n    \"block\" : \"█\",\n    \"hat{}\" : \"^\",\n    \"wedge\" : \"∧\",\n    \"vdash\" : \"⊢\",\n    \"angle\" : \"∠\",\n    \"infty\" : \"∞\",\n    \"gamma\" : \"γ\",\n    \"asymp\" : \"≍\",\n    \"rceil\" : \"⌉\",\n    \"dot{}\" : \"˙\",\n    \"lceil\" : \"⌈\",\n    \"delta\" : \"δ\",\n    \"gneqq\" : \"≩\",\n    \"frown\" : \"⌢\",\n    \"phone\" : \"☎\",\n    \"vdots\" : \"⋮\",\n    \"boxr\" : \"└\",\n    \"k{i}\" : \"į\",\n    \"`{I}\" : \"Ì\",\n    \"perp\" : \"⊥\",\n    \"\\\"{o}\" : \"ö\",\n    \"={I}\" : \"Ī\",\n    \"`{a}\" : \"à\",\n    \"v{T}\" : \"Ť\",\n    \"surd\" : \"√\",\n    \"H{O}\" : \"Ő\",\n    \"vert\" : \"|\",\n    \"k{I}\" : \"Į\",\n    \"\\\"{y}\" : \"ÿ\",\n    \"\\\"{O}\" : \"Ö\",\n    \"u{u}\" : \"ў\",\n    \"u{G}\" : \"Ğ\",\n    \".{E}\" : \"Ė\",\n    \".{z}\" : \"ż\",\n    \"v{t}\" : \"ť\",\n    \"prec\" : \"≺\",\n    \"H{o}\" : \"ő\",\n    \"mldr\" : \"…\",\n    \"cong\" : \"≅\",\n    \".{e}\" : \"ė\",\n    \"star\" : \"*\",\n    \".{Z}\" : \"Ż\",\n    \"geqq\" : \"≧\",\n    \"cdot\" : \"⋅\",\n    \"cdots\" : \"…\",\n    \"`{U}\" : \"Ù\",\n    \"v{L}\" : \"Ľ\",\n    \"c{s}\" : \"ş\",\n    \"~{A}\" : \"Ã\",\n    \"Vert\" : \"‖\",\n    \"k{e}\" : \"ę\",\n    \"lnot\" : \"¬\",\n    \"leqq\" : \"≦\",\n    \"beta\" : \"β\",\n    \"beth\" : \"ℶ\",\n    \"~{n}\" : \"ñ\",\n    \"u{i}\" : \"й\",\n    \"c{S}\" : \"Ş\",\n    \"c{N}\" : \"Ņ\",\n    \"H{u}\" : \"ű\",\n    \"v{n}\" : \"ň\",\n    \"={U}\" : \"Ū\",\n    \"~{O}\" : \"Õ\",\n    \"v{E}\" : \"Ě\",\n    \"H{U}\" : \"Ű\",\n    \"v{N}\" : \"Ň\",\n    \"prod\" : \"∏\",\n    \"v{s}\" : \"š\",\n    \"\\\"{U}\" : \"Ü\",\n    \"c{n}\" : \"ņ\",\n    \"k{U}\" : \"Ų\",\n    \"c{R}\" : \"Ŗ\",\n    \"~{o}\" : \"õ\",\n    \"v{e}\" : \"ě\",\n    \"v{S}\" : \"Š\",\n    \"u{A}\" : \"Ă\",\n    \"circ\" : \"∘\",\n    \"\\\"{u}\" : \"ü\",\n    \"flat\" : \"♭\",\n    \"v{z}\" : \"ž\",\n    \"r{U}\" : \"Ů\",\n    \"`{O}\" : \"Ò\",\n    \"={u}\" : \"ū\",\n    \"oint\" : \"∮\",\n    \"c{K}\" : \"Ķ\",\n    \"k{u}\" : \"ų\",\n    \"not<\" : \"≮\",\n    \"not>\" : \"≯\",\n    \"`{o}\" : \"ò\",\n    \"\\\"{I}\" : \"Ï\",\n    \"v{D}\" : \"Ď\",\n    \".{G}\" : \"Ġ\",\n    \"r{u}\" : \"ů\",\n    \"not=\" : \"≠\",\n    \"`{u}\" : \"ù\",\n    \"v{c}\" : \"č\",\n    \"c{k}\" : \"ķ\",\n    \".{g}\" : \"ġ\",\n    \"odot\" : \"⊙\",\n    \"`{e}\" : \"э\",\n    \"c{T}\" : \"Ţ\",\n    \"v{d}\" : \"ď\",\n    \"\\\"{e}\" : \"ё\",\n    \"v{R}\" : \"Ř\",\n    \"k{a}\" : \"ą\",\n    \"nldr\" : \"‥\",\n    \"`{A}\" : \"À\",\n    \"~{N}\" : \"Ñ\",\n    \"nmid\" : \"∤\",\n    \".{C}\" : \"Ċ\",\n    \"zeta\" : \"ζ\",\n    \"~{u}\" : \"ũ\",\n    \"`{E}\" : \"Э\",\n    \"~{a}\" : \"ã\",\n    \"c{t}\" : \"ţ\",\n    \"={o}\" : \"ō\",\n    \"v{r}\" : \"ř\",\n    \"={A}\" : \"Ā\",\n    \".{c}\" : \"ċ\",\n    \"~{U}\" : \"Ũ\",\n    \"k{A}\" : \"Ą\",\n    \"\\\"{a}\" : \"ä\",\n    \"u{U}\" : \"Ў\",\n    \"iota\" : \"ι\",\n    \"={O}\" : \"Ō\",\n    \"c{C}\" : \"Ç\",\n    \"gneq\" : \"≩\",\n    \"boxH\" : \"═\",\n    \"hbar\" : \"ℏ\",\n    \"\\\"{A}\" : \"Ä\",\n    \"boxv\" : \"│\",\n    \"boxh\" : \"─\",\n    \"male\" : \"♂\",\n    \"sqrt\" : \"√\",\n    \"succ\" : \"≻\",\n    \"c{c}\" : \"ç\",\n    \"v{l}\" : \"ľ\",\n    \"u{a}\" : \"ă\",\n    \"v{Z}\" : \"Ž\",\n    \"c{G}\" : \"Ģ\",\n    \"v{C}\" : \"Č\",\n    \"lneq\" : \"≨\",\n    \"{E}\" : \"Ё\",\n    \"={a}\" : \"ā\",\n    \"c{l}\" : \"ļ\",\n    \"={E}\" : \"Ē\",\n    \"boxV\" : \"║\",\n    \"u{g}\" : \"ğ\",\n    \"u{I}\" : \"Й\",\n    \"c{L}\" : \"Ļ\",\n    \"k{E}\" : \"Ę\",\n    \".{I}\" : \"İ\",\n    \"~{I}\" : \"Ĩ\",\n    \"c{r}\" : \"ŗ\",\n    \"{Y}\" : \"Ÿ\",\n    \"={e}\" : \"ē\",\n    \"leq\" : \"≤\",\n    \"Cup\" : \"⋓\",\n    \"Psi\" : \"Ψ\",\n    \"neq\" : \"≠\",\n    \"k{}\" : \"˛\",\n    \"={}\" : \"‾\",\n    \"H{}\" : \"˝\",\n    \"cup\" : \"∪\",\n    \"geq\" : \"≥\",\n    \"mho\" : \"℧\",\n    \"Dzh\" : \"Џ\",\n    \"cap\" : \"∩\",\n    \"bot\" : \"⊥\",\n    \"psi\" : \"ψ\",\n    \"chi\" : \"χ\",\n    \"c{}\" : \"¸\",\n    \"Phi\" : \"Φ\",\n    \"ast\" : \"*\",\n    \"ell\" : \"ℓ\",\n    \"top\" : \"⊤\",\n    \"lll\" : \"⋘\",\n    \"tau\" : \"τ\",\n    \"Cap\" : \"⋒\",\n    \"sad\" : \"☹\",\n    \"iff\" : \"⇔\",\n    \"eta\" : \"η\",\n    \"eth\" : \"ð\",\n    \"d{\" : \"\ṭ\",\n    \"rho\" : \"ρ\",\n    \"dzh\" : \"џ\",\n    \"div\" : \"÷\",\n    \"phi\" : \"ϕ\",\n    \"Rsh\" : \"↱\",\n    \"vee\" : \"∨\",\n    \"b{}\" : \"ˍ\",\n    \"t{\" : \"\t͡\",\n    \"int\" : \"∫\",\n    \"sim\" : \"∼\",\n    \"r{}\" : \"˚\",\n    \"Lsh\" : \"↰\",\n    \"yen\" : \"¥\",\n    \"ggg\" : \"⋙\",\n    \"mid\" : \"∣\",\n    \"sum\" : \"∑\",\n    \"neg\" : \"¬\",\n    \"Dz\" : \"Ѕ\",\n    \"Re\" : \"ℜ\",\n    \"oe\" : \"œ\",\n    \"DH\" : \"Ð\",\n    \"ll\" : \"≪\",\n    \"ng\" : \"ŋ\",\n    \"wr\" : \"≀\",\n    \"wp\" : \"℘\",\n    \"=I\" : \"І\",\n    \":)\" : \"☺\",\n    \":(\" : \"☹\",\n    \"AE\" : \"Æ\",\n    \"AA\" : \"Å\",\n    \"ss\" : \"ß\",\n    \"dz\" : \"ѕ\",\n    \"ae\" : \"æ\",\n    \"aa\" : \"å\",\n    \"th\" : \"þ\",\n    \"to\" : \"→\",\n    \"Pi\" : \"Π\",\n    \"mp\" : \"∓\",\n    \"Im\" : \"ℑ\",\n    \"pm\" : \"±\",\n    \"pi\" : \"π\",\n    \"\\\"I\" : \"Ї\",\n    \"in\" : \"∈\",\n    \"ni\" : \"∋\",\n    \"ne\" : \"≠\",\n    \"TH\" : \"Þ\",\n    \"Xi\" : \"Ξ\",\n    \"nu\" : \"ν\",\n    \"NG\" : \"Ŋ\",\n    \":G\" : \"㋡\",\n    \"xi\" : \"ξ\",\n    \"OE\" : \"Œ\",\n    \"gg\" : \"≫\",\n    \"DJ\" : \"Đ\",\n    \"=e\" : \"є\",\n    \"=E\" : \"Є\",\n    \"mu\" : \"μ\",\n    \"dj\" : \"đ\",\n    // \"&\" : \"&\",\n    // \"$\" : \"$\",\n    // \"%\" : \"%\",\n    // \"#\" : \"#\",\n    // \"-\" : \"­\",\n    \"S\" : \"§\",\n    \"P\" : \"¶\",\n    \"O\" : \"Ø\",\n    \"L\" : \"Ł\",\n    // \"}\" : \"}\",\n    \"o\" : \"ø\",\n    \"l\" : \"ł\",\n    \"h\" : \"ℎ\",\n    \"i\" : \"ℹ\",\n    // \"-\" : \"−\",\n    \"'{Y}\" : \"Ý\",\n    \"'{y}\" : \"ý\",\n    \"'{L}\" : \"Ĺ\",\n    \"'{e}\" : \"é\",\n    \"'{l}\" : \"ĺ\",\n    \"'{s}\" : \"ś\",\n    \"'{z}\" : \"ź\",\n    \"'{E}\" : \"É\",\n    \"'{S}\" : \"Ś\",\n    \"'{Z}\" : \"Ź\",\n    \"'{R}\" : \"Ŕ\",\n    \"'{A}\" : \"Á\",\n    \"'{N}\" : \"Ń\",\n    \"'{I}\" : \"Í\",\n    \"'{n}\" : \"ń\",\n    \"'{c}\" : \"ć\",\n    \"'{u}\" : \"ú\",\n    \"'{C}\" : \"Ć\",\n    \"'{o}\" : \"ó\",\n    \"'{a}\" : \"á\",\n    \"'{O}\" : \"Ó\",\n    \"'{g}\" : \"ǵ\",\n    \"'{r}\" : \"ŕ\",\n    \"'{U}\" : \"Ú\",\n    \"'G\" : \"Ѓ\",\n    \"'C\" : \"Ћ\",\n    \"'K\" : \"Ќ\",\n    \"'k\" : \"ќ\",\n    \"'c\" : \"ћ\",\n    \"'g\" : \"ѓ\",\n}\n\n\nexport function str_latex_to_unicode(str : string){\n    str = str;\n    for (let key in latex_greek){\n        str = str.replaceAll(key, (latex_greek as any)[key]);\n    }\n    for (let key in latex_symbols){\n        str = str.replaceAll('\\\\'+key, (latex_symbols as any)[key]);\n    }\n    return str;\n}\nexport function str_to_mathematical_italic(str : string) {\n    return [...str_latex_to_unicode(str)]\n        .map(c => (unicode_mathematical_italic as any)[c] || c).join('');\n}\nexport function str_to_normal_from_mathematical_italic(str : string) {\n    return [...str]\n        .map(c => reversed_unicode_mathematical_italic[c] || c).join('');\n}\n","import { Diagram, DiagramType, DiagramStyle, TextData, DEFAULT_FONTSIZE } from \"./diagram.js\";\nimport { tab_color, get_color } from \"./color_palette.js\";\nimport { to_degree, expand_directional_value } from \"./utils.js\";\nimport { str_to_mathematical_italic, str_to_normal_from_mathematical_italic } from './unicode_utils.js'\nimport { TAG } from \"./tag_names.js\";\n\n// TODO : add guard for the dictionary key\n// since the implementation is using `for (let stylename in style)` without checking\n// if the correct key is in the dictionary, it can lead to unintended behavior\n// for example, `font-size` could be defined in default_text_diagram_style\n// and will shadow the `font-size` in default_diagram_style\n\nexport const default_diagram_style : DiagramStyle = {\n    \"fill\"             : \"none\",\n    \"stroke\"           : \"black\",\n    \"stroke-width\"     : \"1\",\n    \"stroke-linecap\"   : \"butt\",\n    \"stroke-dasharray\" : \"none\",\n    \"stroke-linejoin\"  : \"round\",\n    \"vector-effect\"    : \"non-scaling-stroke\",\n    \"opacity\"          : \"1\",\n}\nexport const _init_default_diagram_style : DiagramStyle = {...default_diagram_style}\n\nexport const default_text_diagram_style : DiagramStyle = {\n    \"fill\"             : \"black\",\n    \"stroke\"           : \"none\",\n    \"stroke-width\"     : \"1\",\n    \"stroke-linecap\"   : \"butt\",\n    \"stroke-dasharray\" : \"none\",\n    \"stroke-linejoin\"  : \"round\",\n    \"vector-effect\"    : \"non-scaling-stroke\",\n    \"opacity\"          : \"1\",\n}\nexport const _init_default_text_diagram_style : DiagramStyle = {...default_text_diagram_style}\n\nexport const default_textdata : TextData = {\n    \"text\"             : \"\",\n    \"font-family\"      : \"Latin Modern Math, sans-serif\",\n    \"font-size\"        : DEFAULT_FONTSIZE,\n    \"font-weight\"      : \"normal\",\n    \"text-anchor\"      : \"middle\",\n    \"dy\"               : \"0.25em\",\n    \"angle\"            : \"0\",\n    \"font-style\"       : \"normal\",\n    \"font-scale\"       : \"auto\",\n}\nexport const _init_default_textdata : TextData = {...default_textdata}\n\nexport function reset_default_styles() : void {\n    for (let s in default_diagram_style) \n        (default_diagram_style as any)[s] = (_init_default_diagram_style as any)[s];\n    for (let s in default_text_diagram_style)\n        (default_text_diagram_style as any)[s] = (_init_default_text_diagram_style as any)[s];\n    for (let s in default_textdata)\n        (default_textdata as any)[s] = (_init_default_textdata as any)[s];\n}\n\nfunction draw_polygon(\n    svgelement : SVGSVGElement, target_element : SVGSVGElement|SVGGElement,\n    diagram : Diagram, svgtag? : string\n) : void {\n    // get properties\n    let style = {...default_diagram_style, ...diagram.style}; // use default if not defined\n    style.fill = get_color(style.fill as string, tab_color);\n    style.stroke = get_color(style.stroke as string, tab_color);\n\n    // draw svg\n    let polygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n    for (let stylename in style) {\n        polygon.style[stylename as any] = (style as any)[stylename as any];\n    }\n    if (svgtag != undefined) polygon.setAttribute(\"_dg_tag\", svgtag);\n    // polygon.style.fill = color_fill;\n    // polygon.style.stroke = color_stroke;\n    // use tab_color color palette\n\n    target_element.appendChild(polygon);\n    if (diagram.path != undefined) {\n        for (let i = 0; i < diagram.path.points.length; i++) {\n            let p = diagram.path.points[i];\n            var point = svgelement.createSVGPoint();\n            point.x =  p.x;\n            point.y = -p.y;\n            polygon.points.appendItem(point);\n        }\n    }\n}\n\n\nfunction draw_curve(\n    svgelement : SVGSVGElement, target_element : SVGSVGElement|SVGGElement,\n    diagram : Diagram, svgtag? : string\n) : void {\n    // get properties\n    let style = {...default_diagram_style, ...diagram.style}; // use default if not defined\n    style.fill = \"none\";\n    style.stroke = get_color(style.stroke as string, tab_color);\n\n    // draw svg\n    let polyline = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polyline\");\n    for (let stylename in style) {\n        polyline.style[stylename as any] = (style as any)[stylename as any];\n    }\n    if (svgtag != undefined) polyline.setAttribute(\"_dg_tag\", svgtag);\n\n    target_element.appendChild(polyline);\n    if (diagram.path != undefined) {\n        for (let i = 0; i < diagram.path.points.length; i++) {\n            let p = diagram.path.points[i];\n            var point = svgelement.createSVGPoint();\n            point.x =  p.x;\n            point.y = -p.y;\n            polyline.points.appendItem(point);\n        }\n    }\n}\n\n\nfunction is_dataURL(url : string) : boolean {\n    // Regular expression to check for data URL\n    const dataUrlPattern = /^data:image\\/(png|jpeg|jpg|gif|svg\\+xml);base64,/;\n    return dataUrlPattern.test(url);\n}\n\nconst _IMAGE_DATAURL_CACHE_MAP = new Map<string, string|undefined>();\n\n/**\n * Convert image href to data url\n * This is necessary so that the image diagram can be downloaded as png\n */\nfunction set_image_href_dataURL(img : SVGImageElement, src : string) : void{\n    // if it is already a dataURL, just set it\n    if (is_dataURL(src)) {\n        img.setAttribute(\"href\", src);\n        img.setAttribute(\"xlink:href\", src);\n        return;\n    }\n    \n    // if it's already cached, just set it\n    if (_IMAGE_DATAURL_CACHE_MAP.has(src)){\n        const dataURL = _IMAGE_DATAURL_CACHE_MAP.get(src)!;\n        if (!dataURL) return; \n        // dataURL can be undefined, indicating it's still loading or\n        // the image is not found\n        img.setAttribute(\"href\", dataURL);\n        img.setAttribute(\"xlink:href\", dataURL);\n        return;\n    }\n    \n    // _IMAGE_DATAURL_CACHE_MAP.set(src, undefined);\n    let canvas    = document.createElement(\"canvas\");\n    let ctx       = canvas.getContext('2d');\n\n    let base_image = new Image();\n    base_image.crossOrigin = \"anonymous\";\n    base_image.onload = () => {\n        canvas.height = base_image.height;\n        canvas.width  = base_image.width;\n        ctx?.drawImage(base_image, 0, 0);\n\n        // NOTE : we need to set both href and xlink:href for compatibility reason\n        // most browser already deprecate xlink:href because of SVG 2.0\n        // but other browser and image viewer/editor still only support xlink:href\n        // might be removed in the future\n        const dataURL = canvas.toDataURL(\"image/png\");\n        img.setAttribute(\"href\", dataURL);\n        img.setAttribute(\"xlink:href\", dataURL);\n        _IMAGE_DATAURL_CACHE_MAP.set(src, dataURL);\n        canvas.remove();\n    }\n    base_image.src = src;\n\n}\n\n/**\n * if `embed_image` is `true`, the image will be embedded as dataURL\n * this allow the image to be downloaded as SVG with the image embedded\n */\nfunction draw_image(\n    target_element: SVGSVGElement|SVGGElement,\n    diagram : Diagram, embed_image : boolean, svgtag? : string\n) : void {\n    let image = document.createElementNS(\"http://www.w3.org/2000/svg\", \"image\");\n    image.setAttribute(\"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n    if (diagram.imgdata.src == undefined) return;\n    // make sure path is defined and have 4 points\n    if (diagram.path == undefined) return;\n    if (diagram.path.points.length != 4) return;\n\n    // it's calculated like this to be able to apply linear transformation\n    // path: bottom-left, bottom-right, top-right, top-left\n    // width  : 0-1\n    // height : 1-2\n    let width  = diagram.path.points[1].sub(diagram.path.points[0]).length();\n    let height = diagram.path.points[2].sub(diagram.path.points[1]).length();\n    \n    // calculate the linear transformation matrix\n    // [ a c ]\n    // [ b d ]\n    let ex = diagram.path.points[1].sub(diagram.path.points[0]).normalize();\n    let ey = diagram.path.points[3].sub(diagram.path.points[0]).normalize();\n    let a =  ex.x; let b = -ex.y;\n    let c = -ey.x; let d =  ey.y;\n\n    let xpos = diagram.path.points[3].x;\n    let ypos = -diagram.path.points[3].y;\n\n    if (embed_image) {\n        set_image_href_dataURL(image, diagram.imgdata.src);\n    } else {\n        image.setAttribute(\"href\", diagram.imgdata.src);\n    }\n    image.setAttribute(\"width\", width.toString());\n    image.setAttribute(\"height\", height.toString());\n    image.setAttribute(\"transform\", `matrix(${a} ${b} ${c} ${d} ${xpos} ${ypos})`);\n    image.setAttribute(\"preserveAspectRatio\", \"none\");\n    if (svgtag != undefined) image.setAttribute(\"_dg_tag\", svgtag);\n\n    target_element.appendChild(image);\n}\n\n/**\n * Collect all DiagramType.Text in the diagram\n * @param diagram the outer diagram\n * @returns a list of DiagramType.Text\n*/\nfunction collect_text(diagram : Diagram, type : DiagramType.Text | DiagramType.MultilineText) : Diagram[] {\n    if (diagram.type == type) {\n        return [diagram];\n    } else if (diagram.type == DiagramType.Diagram) {\n        let result : Diagram[] = [];\n        for (let d of diagram.children) {\n            result = result.concat(collect_text(d, type));\n        }\n        return result;\n    } else {\n        return [];\n    }\n}\n\n/** Calculate the scaling factor for the text based on the reference svg element */\nexport function calculate_text_scale(referencesvgelement : SVGSVGElement, padding? : [number, number, number, number]) : number {\n    const pad = expand_directional_value(padding ?? 0)\n    let bbox = referencesvgelement.getBBox();\n    let refsvgelement_width = referencesvgelement.width.baseVal.value - pad[1] - pad[3];\n    let refsvgelement_height = referencesvgelement.height.baseVal.value - pad[0] - pad[2];\n    return Math.max(bbox.width / refsvgelement_width, bbox.height / refsvgelement_height)\n}\n\n/**\n * @param svgelement the svg element to draw to\n * @param diagrams the list of text diagrams to draw\n * @param calculated_scale the calculated scale for the text\n */\nfunction draw_texts(\n    target_element: SVGSVGElement|SVGGElement,\n    diagrams : Diagram[], \n    calculated_scale : number, svgtag? : string\n) : void {\n    for (let diagram of diagrams) {\n        let style = {...default_text_diagram_style, ...diagram.style}; // use default if not defined\n        style.fill = get_color(style.fill as string, tab_color);\n        style.stroke = get_color(style.stroke as string, tab_color);\n\n        let textdata = {...default_textdata, ...diagram.textdata}; // use default if not defined\n        if (diagram.path == undefined) { throw new Error(\"Text must have a path\"); }\n        // draw svg of text\n        let text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        // text.setAttribute(\"x\", diagram.path.points[0].x.toString());\n        // text.setAttribute(\"y\", (-diagram.path.points[0].y).toString());\n        let xpos = diagram.path.points[0].x;\n        let ypos = -diagram.path.points[0].y;\n        let angle_deg = to_degree(parseFloat(textdata[\"angle\"] as string));\n\n        let scale = textdata[\"font-scale\"] == \"auto\" ? \n            calculated_scale : parseFloat(textdata[\"font-scale\"] as string);\n        let font_size = parseFloat(textdata[\"font-size\"] as string) * scale;\n\n        // set font styles (font-family, font-size, font-weight)\n        text.setAttribute(\"font-family\", textdata[\"font-family\"] as string);\n        text.setAttribute(\"font-style\", textdata[\"font-style\"] as string);\n        text.setAttribute(\"font-size\", font_size.toString());\n        text.setAttribute(\"font-weight\", textdata[\"font-weight\"] as string);\n        text.setAttribute(\"text-anchor\", textdata[\"text-anchor\"] as string);\n        text.setAttribute(\"dy\", textdata[\"dy\"] as string);\n        // text.setAttribute(\"dominant-baseline\", textdata[\"dominant-baseline\"] as string);\n        text.setAttribute(\"transform\", `translate(${xpos} ${ypos}) rotate(${angle_deg}) `);\n        if (svgtag != undefined) text.setAttribute(\"_dg_tag\", svgtag);\n\n        // custom attribute for tex display\n        text.setAttribute(\"_x\", xpos.toString());\n        text.setAttribute(\"_y\", ypos.toString());\n        text.setAttribute(\"_angle\", angle_deg.toString());\n        \n        for (let stylename in style) {\n            text.style[stylename as any] = (style as any)[stylename as any];\n        }\n\n        // set the content of the text\n        let text_content = textdata[\"text\"];\n        if (diagram.tags.includes(TAG.TEXTVAR) && !is_texstr(text_content)) \n            text_content = str_to_mathematical_italic(text_content);\n        text.innerHTML = text_content;\n\n        // add to svgelement\n        target_element.appendChild(text);\n    }\n}\n\n/**\n * @param svgelement the svg element to draw to\n * @param diagrams the list of text diagrams to draw\n * @param calculated_scale the calculated scale for the text\n */\nfunction draw_multiline_texts(\n    target_element : SVGSVGElement|SVGGElement,\n    diagrams : Diagram[],  calculated_scale : number, svgtag? : string\n) : void {\n    for (let diagram of diagrams) {\n    //     let style = {...default_text_diagram_style, ...diagram.style}; // use default if not defined\n    //     style.fill = get_color(style.fill as string, tab_color);\n    //     style.stroke = get_color(style.stroke as string, tab_color);\n    //\n    //     let textdata = {...default_textdata, ...diagram.textdata}; // use default if not defined\n        if (diagram.path == undefined) { throw new Error(\"Text must have a path\"); }\n        // draw svg of text\n        let textsvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        let xpos = diagram.path.points[0].x;\n        let ypos = -diagram.path.points[0].y;\n        // let angle_deg = to_degree(parseFloat(textdata[\"angle\"] as string));\n        let angle_deg = 0;\n\n\n        // use default if not defined\n        let textdata = {...default_textdata, ...{dy:\"0\", \"text-anchor\":\"start\"}, ...diagram.textdata}; \n        let diagram_font_size = textdata[\"font-size\"];\n\n\n        if (diagram.multilinedata?.content == undefined) { throw new Error(\"MultilineText must have multilinedata\"); }\n        // let current_line : number = 0;\n        let dg_scale_factor = diagram.multilinedata[\"scale-factor\"] ?? 1;\n        let is_firstline : boolean = true;\n        let is_in_front  : boolean = true;\n        let newline_dy   : string  = \"1em\";\n        for (let tspandata of diagram.multilinedata.content) {\n\n            if (tspandata.text == \"\\n\") { \n                is_in_front = true; \n                newline_dy = tspandata.style['dy'] ?? \"1em\";\n                continue; \n            }\n\n            // create tspan for each tspandata\n            let tspan = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n\n            let not_setting_dy = (tspandata.style['dy'] == undefined)\n            let tspanstyle = {\n                ...default_text_diagram_style, \n                ...textdata,\n                ...{dy : \"0\", dx : \"0\"}, \n                ...{\"font-size\" : diagram_font_size},\n                ...tspandata.style\n            };\n\n            if (is_in_front) {\n                tspan.setAttribute(\"x\", \"0\");\n                let textdata_dy = textdata[\"dy\"] as string ?? \"0\";\n                if (not_setting_dy) tspanstyle.dy = is_firstline ? textdata_dy : newline_dy;\n                is_in_front = false;\n            }\n\n            let scale = tspanstyle[\"font-scale\"] == \"auto\" ? \n                calculated_scale : parseFloat(tspanstyle[\"font-scale\"] as string);\n            let font_size_scale_factor = tspanstyle[\"font-size-scale-factor\"] ?? 1;\n            let font_size = parseFloat(tspanstyle[\"font-size\"] as string) \n                * scale * dg_scale_factor * font_size_scale_factor;\n\n            if (tspanstyle[\"tag\"]) tspan.setAttribute(\"_dg_tag\", tspanstyle[\"tag\"] as string);\n\n            tspan.style.whiteSpace = \"pre\";\n            // if we do style.whiteSpace in `textsvg`, it doesnt work in Apple's webkit\n            tspan.setAttribute(\"dx\", tspanstyle.dx as string);\n            tspan.setAttribute(\"dy\", tspanstyle.dy as string);\n            tspan.setAttribute(\"font-style\", tspanstyle[\"font-style\"] as string);\n            tspan.setAttribute(\"font-family\", tspanstyle[\"font-family\"] as string);\n            // tspan.setAttribute(\"font-size\", tspanstyle[\"font-size\"] as string);\n            tspan.setAttribute(\"font-size\", font_size.toString());\n            tspan.setAttribute(\"font-weight\", tspanstyle[\"font-weight\"] as string);\n            // tspan.setAttribute(\"text-anchor\", tspanstyle[\"text-anchor\"] as string);\n            tspan.style[\"fill\"] = get_color(tspanstyle.fill as string, tab_color);\n            tspan.style[\"stroke\"] = get_color(tspanstyle.stroke as string, tab_color);\n            tspan.style[\"opacity\"] = tspanstyle.opacity as string;\n            // if baseline-shift is defined, set it\n            if (tspanstyle[\"baseline-shift\"]) \n                tspan.setAttribute(\"baseline-shift\", tspanstyle[\"baseline-shift\"] as string);\n\n            let text = tspandata.text;\n            if (tspanstyle[\"textvar\"]) text = str_to_mathematical_italic(text);\n            tspan.innerHTML = text;\n            textsvg.appendChild(tspan);\n\n            is_firstline = false;\n        }\n\n        //\n        // let scale = textdata[\"font-scale\"] == \"auto\" ? \n        //     calculated_scale : parseFloat(textdata[\"font-scale\"] as string);\n        // let font_size = parseFloat(textdata[\"font-size\"] as string) * scale;\n        //\n        // // set font styles (font-family, font-size, font-weight)\n        // text.setAttribute(\"font-family\", textdata[\"font-family\"] as string);\n        // text.setAttribute(\"font-size\", font_size.toString());\n        // text.setAttribute(\"font-weight\", textdata[\"font-weight\"] as string);\n        // text.setAttribute(\"text-anchor\", textdata[\"text-anchor\"] as string);\n        // // text.setAttribute(\"dominant-baseline\", textdata[\"dominant-baseline\"] as string);\n        textsvg.setAttribute(\"dy\", textdata[\"dy\"] as string);\n        textsvg.setAttribute(\"text-anchor\", textdata[\"text-anchor\"] as string);\n        textsvg.setAttribute(\"transform\", `translate(${xpos} ${ypos}) rotate(${angle_deg}) `);\n        if (svgtag != undefined) textsvg.setAttribute(\"_dg_tag\", svgtag);\n        //\n        // // custom attribute for tex display\n        // text.setAttribute(\"_x\", xpos.toString());\n        // text.setAttribute(\"_y\", ypos.toString());\n        // text.setAttribute(\"_angle\", angle_deg.toString());\n        // \n        // for (let stylename in style) {\n        //     text.style[stylename as any] = (style as any)[stylename as any];\n        // }\n        //\n        // // set the content of the text\n        // let text_content = textdata[\"text\"];\n        // if (diagram.tags.includes('textvar') && !is_texstr(text_content)) \n        //     text_content = str_to_mathematical_italic(text_content);\n        // text.innerHTML = text_content;\n        //\n        // // add to svgelement\n        target_element.appendChild(textsvg);\n    }\n}\n\n/**\n * Get all svg elements with a specific tag\n * @param svgelement the svg element to search\n * @param tag the tag to search\n * @returns a list of svg elements with the tag\n */\nexport function get_tagged_svg_element(tag : string, svgelement : SVGElement) : SVGElement[] {\n    let result : SVGElement[] = [];\n    for (let i in svgelement.children) {\n        let child = svgelement.children[i];\n        if (!(child instanceof SVGElement)) continue;\n        if (child.getAttribute(\"_dg_tag\") == tag) {\n            result.push(child);\n        }\n        // recurse through all children\n        if (child.children?.length) {\n            result = result.concat(get_tagged_svg_element(tag, child));\n        }\n    }\n    return result;\n}\n\n/**\n * @param svgelement the svg element to draw to\n * @param diagram the diagram to draw\n * @param render_text whether to render text\n * @param embed_image (optional) whether to embed images\n * this allow the image to be downloaded as SVG with the image embedded\n * @param text_scaling_factor (optional) the scaling factor for text\n * @param svgtag (optional) the tag to add to the svg element\n */\nexport function f_draw_to_svg(\n    svgelement : SVGSVGElement, target_element: SVGSVGElement|SVGGElement,\n    diagram : Diagram, render_text : boolean = true, embed_image : boolean = false,\n    text_scaling_factor? : number, svgtag? : string\n) : void {\n    if (diagram.type == DiagramType.Polygon) {\n        draw_polygon(svgelement, target_element, diagram, svgtag);\n    } else if (diagram.type == DiagramType.Curve){\n        draw_curve(svgelement, target_element, diagram, svgtag);\n    } else if (diagram.type == DiagramType.Text || diagram.type == DiagramType.MultilineText){\n        // do nothing\n    } else if (diagram.type == DiagramType.Image){\n        draw_image(target_element, diagram, embed_image, svgtag);\n    } else if (diagram.type == DiagramType.Diagram){\n        for (let d of diagram.children) {\n            f_draw_to_svg(svgelement, target_element, d, false, embed_image, undefined, svgtag);\n        }\n    } else {\n        console.warn(\"Unreachable, unknown diagram type : \" + diagram.type);\n    }\n\n    // draw text last to make the scaling works\n    // because the text is scaled based on the bounding box of the svgelement\n    if (render_text) {\n        if (text_scaling_factor == undefined){\n            text_scaling_factor = calculate_text_scale(svgelement);\n        }\n        let text_diagrams      : Diagram[] = collect_text(diagram, DiagramType.Text);\n        let multiline_diagrams : Diagram[] = collect_text(diagram, DiagramType.MultilineText);\n        draw_texts(target_element, text_diagrams, text_scaling_factor ?? 1, svgtag);\n        draw_multiline_texts(target_element, multiline_diagrams, text_scaling_factor ?? 1, svgtag);\n    }\n    \n}\n\n/**\n * WARNING: DEPRECATED\n * use `draw_to_svg_element` instead\n *\n * Draw a diagram to an svg element\n * @param outer_svgelement the outer svg element to draw to\n * @param diagram the diagram to draw\n * @param set_html_attribute whether to set the html attribute of the outer_svgelement\n * @param render_text whether to render text\n * @param clear_svg whether to clear the svg before drawing\n */\nexport function draw_to_svg(outer_svgelement : SVGSVGElement, diagram : Diagram,\n    set_html_attribute : boolean = true, render_text : boolean = true, clear_svg : boolean = true) : void {\n    let options : draw_to_svg_options = {\n        set_html_attribute : set_html_attribute,\n        render_text : render_text,\n        clear_svg : clear_svg,\n    };\n    draw_to_svg_element(outer_svgelement, diagram, options);\n}\n\nexport interface draw_to_svg_options {\n    set_html_attribute? : boolean,\n    render_text? : boolean,\n    clear_svg? : boolean,\n    embed_image? : boolean,\n    background_color? : string,\n    padding? : number | number[],\n    text_scaling_reference_svg? : SVGSVGElement,\n    text_scaling_reference_padding? : number | number[],\n    filter_strings? : string[],\n}\n\n// TODO: replace draw_to_svg with the current draw_to_svg_element in the next major version\n\n/**\n * Draw a diagram to an svg element\n * @param outer_svgelement the outer svg element to draw to\n * @param diagram the diagram to draw\n * @param options the options for drawing\n * ```typescript\n * options : {\n *    set_html_attribute? : boolean (true),\n *    render_text? : boolean (true),\n *    clear_svg? : boolean (true),\n *    embed_image? : boolean (false),\n *    background_color? : string (undefined),\n *    padding? : number | number[] (10),\n *    text_scaling_reference_svg? : SVGSVGElement (undefined),\n *    text_scaling_reference_padding? : number | number[] (undefined),\n * }\n * ````\n * define `text_scaling_reference_svg` and `text_scaling_reference_padding` to scale text based on another svg element\n */\nexport function draw_to_svg_element(outer_svgelement : SVGSVGElement, diagram : Diagram, options : draw_to_svg_options = {}) : void {\n    const set_html_attribute = options.set_html_attribute ?? true;\n    const render_text = options.render_text ?? true;\n    const clear_svg = options.clear_svg ?? true;\n    const embed_image = options.embed_image ?? false;\n    \n    let svgelement : SVGSVGElement | undefined = undefined;\n    // check if outer_svgelement has a child with meta=diagram_svg\n    for (let i in outer_svgelement.children) {\n        let child = outer_svgelement.children[i];\n        if (child instanceof SVGSVGElement && child.getAttribute(\"meta\") == \"diagram_svg\") {\n            svgelement = child;\n            break;\n        }\n    }\n\n    if (svgelement == undefined) {\n        // if svgelemet doesn't exist yet, create it\n        // create an inner svg element\n        svgelement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        svgelement.setAttribute(\"meta\", \"diagram_svg\")\n        svgelement.setAttribute(\"width\", \"100%\");\n        svgelement.setAttribute(\"height\", \"100%\");\n        outer_svgelement.appendChild(svgelement);\n    }\n    \n    handle_filter_strings(outer_svgelement, options.filter_strings);\n\n    let text_scaling_factor : number | undefined = undefined;\n    if (options.text_scaling_reference_svg) {\n        options.text_scaling_reference_padding = options.text_scaling_reference_padding ?? options.padding ?? 10;\n        options.text_scaling_reference_padding = expand_directional_value(options.text_scaling_reference_padding);\n        text_scaling_factor = calculate_text_scale(\n            options.text_scaling_reference_svg,\n            options.text_scaling_reference_padding as [number, number, number, number]\n        );\n    }\n    \n    // TODO : for performance, do smart clearing of svg, and not just clear everything\n    if (clear_svg) svgelement.innerHTML = \"\";\n\n    f_draw_to_svg(svgelement, svgelement, diagram, render_text, embed_image, text_scaling_factor);\n\n    if (set_html_attribute) {\n        const pad_px = expand_directional_value(options.padding ?? 10);\n        // set viewbox to the bounding box\n        let bbox = svgelement.getBBox();\n        // add padding of 10px to the bounding box (if the graph is small, it'll mess it up)\n        // scale 10px based on the width and height of the svg\n        let svg_width = svgelement.width.baseVal.value - pad_px[1] - pad_px[3];\n        let svg_height = svgelement.height.baseVal.value - pad_px[0] - pad_px[2];\n        let scale = Math.max(bbox.width / svg_width, bbox.height / svg_height)\n        let pad = pad_px.map(p => p*scale);\n        // [top, right, bottom, left]\n        bbox.x -= pad[3];\n        bbox.y -= pad[0];\n        bbox.width += pad[1] + pad[3];\n        bbox.height += pad[0] + pad[2];\n        svgelement.setAttribute(\"viewBox\", `${bbox.x} ${bbox.y} ${bbox.width} ${bbox.height}`);\n        // set preserveAspectRatio to xMidYMid meet\n        svgelement.setAttribute(\"preserveAspectRatio\", \"xMidYMid meet\");\n        outer_svgelement.style.overflow = \"visible\";\n    }\n    \n    if (options.background_color) {\n        let bbox = svgelement.getBBox();\n        // if svgelement has viewBox set, use it instead of getBBox\n        if (svgelement.viewBox.baseVal.width !== 0) bbox = svgelement.viewBox.baseVal;\n        \n        // draw a rectangle as the background\n        let rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n        rect.setAttribute(\"x\", bbox.x.toString());\n        rect.setAttribute(\"y\", bbox.y.toString());\n        rect.setAttribute(\"width\", bbox.width.toString());\n        rect.setAttribute(\"height\", bbox.height.toString());\n        rect.style.fill = get_color(options.background_color as string, tab_color);\n        rect.style.stroke = \"none\";\n        \n        // prepend\n        svgelement.insertBefore(rect, svgelement.firstChild);\n    }\n}\n\nfunction handle_filter_strings(svgelement : SVGSVGElement, filter_strings? : string[]) : void {\n    if (filter_strings == undefined || filter_strings.length == 0) return;\n    \n    let defs = svgelement.querySelector(\"defs\");\n    if (defs == null) {\n        defs = document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\n        svgelement.insertBefore(defs, svgelement.firstChild);\n    }\n    \n    defs.innerHTML = \"\";\n    for (let filter_string of filter_strings) {\n        defs.innerHTML += filter_string;\n    }\n}\n\nfunction is_texstr(s : string) : boolean {\n    return s.startsWith(\"$\") && s.endsWith(\"$\");\n}\nfunction is_texdisplaystr(s : string) : boolean {\n    return s.startsWith(\"$$\") && s.endsWith(\"$$\");\n}\nfunction strip_texstr(s : string) : string {\n    if (is_texdisplaystr(s)) return s.substring(2, s.length-2);\n    if (is_texstr(s)) return s.substring(1, s.length-1);\n    return s;\n}\n\ntype texhandler_config = {\n    display : boolean,\n    // fontsize : number,\n}\ntype texhadler_function = (texstr : string, config : texhandler_config) => string; // return SVG string\n\n/**\n * Recursively handle tex in svg\n * @param svg the svg element to handle\n * @param texhandler the tex handler function\n */\nexport function handle_tex_in_svg(svg : SVGElement, texhandler : texhadler_function) : void {\n    // recurse through all children of svg until we find text\n    // then replace the text with the svg returned by texhandler\n    for (let i = 0; i < svg.children.length; i++) {\n        let child = svg.children[i];\n        if (child instanceof SVGTextElement) {\n            let str = child.innerHTML;\n            if (!is_texstr(str)) continue;\n\n            let fontsizestr = child.getAttribute('font-size');\n            if (fontsizestr == null) continue;\n            let fontsize = parseFloat(fontsizestr);\n\n            let svgstr = texhandler(strip_texstr(str), {\n                display : is_texdisplaystr(str),\n                // fontsize : parseFloat(fontsize),\n            });\n\n            let xstr = child.getAttribute('_x');\n            let ystr = child.getAttribute('_y');\n            // let angstr = child.getAttribute('_angle');\n            if (xstr == null || ystr == null) continue;\n\n            let textanchor = child.getAttribute('text-anchor');\n            let dy = child.getAttribute('dy');\n            if (textanchor == null || dy == null) continue;\n\n            child.outerHTML = svgstr;\n            child = svg.children[i]; // update child\n\n            // HACK: scaling for mathjax tex2svg, for other option think about it later\n            let widthexstr = child.getAttribute('width');   // ###ex\n            if (widthexstr == null) continue;\n            let widthex = parseFloat(widthexstr.substring(0, widthexstr.length-2));\n            let heightexstr = child.getAttribute('height'); // ###ex\n            if (heightexstr == null) continue;\n            let heightex = parseFloat(heightexstr.substring(0, heightexstr.length-2));\n\n            const magic_number = 2;\n            let width = widthex * fontsize / magic_number;\n            let height = heightex * fontsize / magic_number;\n\n            let xval = parseFloat(xstr);\n            let yval = parseFloat(ystr);\n            switch (textanchor) {\n                case \"start\": break; // left\n                case \"middle\":       // center\n                    xval -= width/2; break;\n                case \"end\":          // right\n                    xval -= width; break;\n            }\n            switch (dy) {\n                case \"0.75em\": break; // top\n                case \"0.25em\":                  // center\n                    yval -= height/2; break;\n                case \"-0.25em\":         // bottom\n                    yval -= height; break;\n            }\n\n            child.setAttribute('width', width.toString());\n            child.setAttribute('height', height.toString());\n            child.setAttribute('x', xval.toString());\n            child.setAttribute('y', yval.toString());\n        } else if (child instanceof SVGElement) {\n            handle_tex_in_svg(child, texhandler);\n        }\n    }\n}\n\n/**\n * Download the svg as svg file\n * @param outer_svgelement the outer svg element to download\n */\nexport function download_svg_as_svg(outer_svgelement : SVGSVGElement) : void {\n    let inner_svgelement = outer_svgelement.querySelector(\"svg[meta=diagram_svg]\") as SVGSVGElement | null;\n    if (inner_svgelement == null) { console.warn(\"Cannot find svg element\"); return; }\n    let locator_svgelement = outer_svgelement.querySelector(\"svg[meta=control_svg]\") as SVGSVGElement | null;\n\n    let svgelement = inner_svgelement;\n    // concat locator_svgelement to the copy of inner_svgelement\n    if (locator_svgelement != null) {  \n        let copy_inner_svgelement = inner_svgelement.cloneNode(true) as SVGSVGElement;\n        for (let i in locator_svgelement.children) {\n            let child = locator_svgelement.children[i];\n            if (!(child instanceof SVGSVGElement)) continue;\n            copy_inner_svgelement.appendChild(child.cloneNode(true));\n        }\n        svgelement = copy_inner_svgelement;\n    }\n\n    // get svg string\n    let svg_string = new XMLSerializer().serializeToString(svgelement);\n    let blob = new Blob([svg_string], {type: \"image/svg+xml\"});\n    let url = URL.createObjectURL(blob);\n    let a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"diagramatics.svg\";\n    a.click();\n}\n\n/**\n * Download the svg as png file\n * @param outer_svgelement the outer svg element to download\n */\nexport function download_svg_as_png(outer_svgelement : SVGSVGElement) {\n    let inner_svgelement = outer_svgelement.querySelector(\"svg[meta=diagram_svg]\") as SVGSVGElement | null;\n    if (inner_svgelement == null) { console.warn(\"Cannot find svg element\"); return; }\n    let svgelem = outer_svgelement;\n\n    let svg_string = new XMLSerializer().serializeToString(svgelem);\n    let svg_blob = new Blob([svg_string], {type: \"image/svg+xml\"});\n\n    const DOMURL = window.URL || window.webkitURL || window;\n    const url = DOMURL.createObjectURL(svg_blob);\n\n    const image = new Image();\n    image.width = svgelem.width.baseVal.value;\n    image.height = svgelem.height.baseVal.value;\n    image.src = url;\n    image.onload = function() {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const ctx = canvas.getContext(\"2d\");\n        ctx?.drawImage(image, 0, 0);\n        DOMURL.revokeObjectURL(url);\n\n        const imgURI = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n        const a = document.createElement(\"a\");\n        a.href = imgURI;\n        a.download = \"diagramatics.png\";\n        a.click();\n    }\n}\n","import { Diagram, polygon, line, curve, text, diagram_combine } from './diagram.js';\nimport { Vector2, V2 } from './vector.js';\nimport { to_radian } from './utils.js';\nimport { TAG } from './tag_names.js';\n\n// function helpers to create common shapes\n\n/**\n * Create rectange centered at origin\n * @param width width of the rectangle\n * @param height height of the rectangle\n * @returns a Diagram object\n */\nexport function rectangle(width : number, height : number) : Diagram {\n    let points = [\n        V2(-width/2,-height/2), V2( width/2,-height/2), \n        V2( width/2, height/2), V2(-width/2, height/2)\n    ];\n    return polygon(points);\n}\n\n/**\n * Create rectange with a given bottom left corner and top right corner\n * @param bottomleft bottom left corner of the rectangle\n * @param topright top right corner of the rectangle\n * @returns a Diagram object\n */\nexport function rectangle_corner(bottomleft : Vector2, topright : Vector2) : Diagram {\n    let points = [\n        bottomleft, V2(topright.x, bottomleft.y),\n        topright, V2(bottomleft.x, topright.y),\n    ];\n    return polygon(points);\n}\n\n/**\n * Create square centered at origin\n * @param side side length of the square\n * @returns a Diagram object\n */\nexport function square(side : number = 1) : Diagram {\n    return rectangle(side, side);\n}\n\n/**\n * Create regular polygon centered at origin with a given radius\n * @param n number of sides\n * @param radius radius of the polygon\n * @returns a Diagram object\n * \\* if you want to create a regular polygon with a given side length, use regular_polygon_side\n */\nexport function regular_polygon(n : number, radius : number = 1) : Diagram {\n    let points : Vector2[] = [];\n    for (let i = 0; i < n; i++) {\n        points.push(V2(0,radius).rotate(i*2*Math.PI/n));\n    }\n    return polygon(points);\n}\n\n/**\n * Create regular polygon centered at origin with a given side length\n * @param n number of sides\n * @param sidelength side length of the polygon\n * @returns a Diagram object\n * \\* if you want to create a regular polygon with a given radius, use regular_polygon\n */\nexport function regular_polygon_side(n : number, sidelength : number = 1) : Diagram {\n    let radius = sidelength/(2*Math.sin(Math.PI/n));\n    return regular_polygon(n, radius);\n}\n\n/**\n * Create circle centered at origin\n * *currently implemented as a regular polygon with 50 sides*\n * @param radius radius of the circle\n * @returns a Diagram object\n */\nexport function circle(radius : number = 1) : Diagram {\n    return regular_polygon(50, radius).append_tags(TAG.CIRCLE);\n}\n\n/**\n * Create an arc centered at origin\n * @param radius radius of the arc\n * @param angle angle of the arc\n * @returns a Diagram object\n */\nexport function arc(radius : number = 1, angle : number = to_radian(360)) : Diagram {\n    let n = 100;\n    let points : Vector2[] = [];\n    for (let i = 0; i < n; i++) {\n        points.push(V2(radius,0).rotate(i*angle/(n-1)));\n    }\n    return curve(points);\n}\n\n/**\n * Create an arrow from origin to a given point\n * @param v the end point of the arrow\n * @param headsize size of the arrow head\n * @returns a Diagram object\n */\nexport function arrow(v : Vector2, headsize : number = 1) : Diagram {\n    let line_diagram = line(V2(0,0), v).append_tags(TAG.ARROW_LINE);\n    let raw_triangle = polygon([V2(0,0), V2(-headsize, headsize/2), V2(-headsize, -headsize/2)]);\n    let head_triangle = raw_triangle.rotate(v.angle()).position(v).append_tags(TAG.ARROW_HEAD);\n    return diagram_combine(line_diagram, head_triangle);\n}\n\n/**\n * Create an arrow from a given point to another given point\n * @param start the start point of the arrow\n * @param end the end point of the arrow\n * @param headsize size of the arrow head\n * @returns a Diagram object\n */\nexport function arrow1(start : Vector2, end : Vector2, headsize : number = 1) : Diagram {\n    return arrow(end.sub(start), headsize).position(start);\n}\n\n/**\n * Create a two-sided arrow from a given point to another given point\n * @param start the start point of the arrow\n * @param end the end point of the arrow\n * @param headsize size of the arrow head\n * @returns a Diagram object\n */\nexport function arrow2(start : Vector2, end : Vector2, headsize : number = 1) : Diagram {\n    let line_diagram = line(start, end).append_tags(TAG.ARROW_LINE);\n    let direction    = end.sub(start);\n    let raw_triangle = polygon([V2(0,0), V2(-headsize, headsize/2), V2(-headsize, -headsize/2)]);\n    let head_triangle  = raw_triangle.rotate(direction.angle()).position(end).append_tags(TAG.ARROW_HEAD);\n    let head_triangle2 = raw_triangle.rotate(direction.angle()+Math.PI).position(start).append_tags(TAG.ARROW_HEAD);\n    return diagram_combine(line_diagram, head_triangle, head_triangle2);\n}\n\n/**\n * Create a text object with mathematical italic font\n * @param str text to be displayed\n * @returns a Diagram object\n */\nexport function textvar(str : string) : Diagram {\n    return text(str).append_tags(TAG.TEXTVAR);\n}\n","import { Diagram, DiagramType } from '../diagram.js';\nimport { Vector2, V2 } from '../vector.js';\nimport { TAG } from '../tag_names.js';\n\n// ============================= utilities\n/**\n * Calculate the area of a polygon\n * @param p a polygon Diagram\n * if p is a Diagram with children, calculate the sum of the areas of the children\n * @returns area of the polygon\n*/\nexport function area(p : Diagram) : number {\n    if (p.type == DiagramType.Polygon) {\n        return calculate_polygon_area(p.path?.points ?? []);\n    }\n    else if (p.type == DiagramType.Diagram) {\n        return p.children.reduce((acc, c) => acc + area(c), 0);\n    } else {\n        return 0;\n    }\n}\nfunction calculate_polygon_area(vertices: Vector2[]) : number {\n    let area = 0;\n    const n = vertices.length;\n    for (let i = 0; i < n; i++) {\n        const j = (i + 1) % n;\n        const xi = vertices[i].x; const yi = vertices[i].y;\n        const xj = vertices[j].x; const yj = vertices[j].y;\n        area += xi * yj - xj * yi;\n    }\n    return Math.abs(area) / 2;\n}\n\n/**\n * Get the radius of a circle\n * @param circle a circle Diagram\n * @returns radius of the circle\n */\nexport function circle_radius(circle : Diagram) : number {\n    let tags = circle.tags;\n    if (!tags.includes(TAG.CIRCLE)) return -1;\n\n    let center = circle.get_anchor('center-center');\n    if (circle.path == undefined) return -1;\n    let p0 = circle.path.points[0];\n    return center.sub(p0).length();\n}\n\n/**\n * Get the tangent points of a circle from a point\n * @param point a point\n * @param circle a circle Diagram\n */\nexport function circle_tangent_point_from_point(point : Vector2, circle : Diagram) : [Vector2, Vector2] {\n    let radius = circle_radius(circle);\n    if (radius == -1) return [V2(0,0), V2(0,0)];\n    let center = circle.get_anchor('center-center');\n\n    // https://en.wikipedia.org/wiki/Tangent_lines_to_circles\n    \n    let r = radius;\n    let d0_2 = center.sub(point).length_sq();\n    let r_2 = r*r;\n\n    let v0 = point.sub(center);\n    let sLeft  = r_2 / d0_2;\n    let vLeft  = v0.scale(sLeft);\n    let sRight = r * Math.sqrt(d0_2 - r_2) / d0_2;\n    let vRight = V2(-v0.y, v0.x).scale(sRight);\n    let P1 = vLeft.add(vRight).add(center);\n    let P2 = vLeft.sub(vRight).add(center);\n    return [P1, P2];\n}\n\n/**\n * Get the points of a line\n * @param l a line Diagram\n * @returns the two points of the line\n */\nexport function line_points(l : Diagram) : [Vector2, Vector2] {\n    let tags = l.tags;\n    if (!tags.includes(TAG.LINE)) return [V2(0,0), V2(0,0)];\n    if (l.path == undefined) return [V2(0,0), V2(0,0)];\n\n    let p0 = l.path.points[0];\n    let p1 = l.path.points[1];\n    return [p0, p1];\n}\n\n/**\n * Get the intersection of a line with a horizontal line at y = yi\n * @param l a line Diagram\n * @param yi y value of the horizontal line\n * @returns the intersection point\n */\nexport function line_intersection_y(l : Diagram, yi : number) : Vector2 {\n    let [a, b] = line_points(l);\n    let xi = a.x + (b.x - a.x) * (yi - a.y) / (b.y - a.y);\n    return V2(xi, yi);\n}\n\n/**\n * Get the intersection of a line with a vertical line at x = xi\n * @param l a line Diagram\n * @param xi x value of the vertical line\n * @returns the intersection point\n */\nexport function line_intersection_x(l : Diagram, xi : number) : Vector2 {\n    let [a, b] = line_points(l);\n    let yi = a.y + (b.y - a.y) * (xi - a.x) / (b.x - a.x);\n    return V2(xi, yi);\n}\n\n/**\n * Get the intersection of two lines\n * @param l1 a line Diagram\n * @param l2 a line Diagram\n * @returns the intersection point\n * if the lines are parallel, return V2(Infinity, Infinity)\n */\nexport function line_intersection(l1 : Diagram, l2 : Diagram) : Vector2 {\n    if (!l1.tags.includes(TAG.LINE) || !l2.tags.includes(TAG.LINE)) return V2(Infinity, Infinity);\n    let [a1, b1] = line_points(l1);\n    let [a2, b2] = line_points(l2);\n\n    let x1 = a1.x; let y1 = a1.y; let x2 = b1.x; let y2 = b1.y;\n    let x3 = a2.x; let y3 = a2.y; let x4 = b2.x; let y4 = b2.y;\n\n    let d = (x1-x2)*(y3-y4) - (y1-y2)*(x3-x4);\n    if (d == 0) return V2(Infinity, Infinity);\n    let x = ((x1*y2 - y1*x2)*(x3-x4) - (x1-x2)*(x3*y4 - y3*x4))/d;\n    let y = ((x1*y2 - y1*x2)*(y3-y4) - (y1-y2)*(x3*y4 - y3*x4))/d;\n    return V2(x, y);\n}\n\n\n\n// ============================= shapes\n\n/**\n * Extend a line by a length on both ends\n * @param l a line Diagram\n * @param len1 length to extend on the first end\n * @param len2 length to extend on the second end\n * @returns a new line Diagram\n */\nexport function line_extend(l : Diagram, len1 : number, len2 : number) : Diagram {\n    let tags = l.tags;\n    if (!tags.includes(TAG.LINE)) return l;\n    if (l.path == undefined) return l;\n\n    let p0 = l.path.points[0];\n    let p1 = l.path.points[1];\n    let v = p1.sub(p0).normalize();\n    let p0_new = p0.sub(v.scale(len1));\n    let p1_new = p1.add(v.scale(len2));\n\n    let newl = l.copy();\n    if (newl.path == undefined) return l; // to surpress typescript error\n    newl.path.points = [p0_new, p1_new];\n    return newl;\n}\n\n/**\n * Get the size of a diagram\n * @param diagram a diagram\n * @returns the width and height of the diagram\n */\nexport function size(diagram : Diagram) : [number, number] {\n    let bb = diagram.bounding_box();\n    return [bb[1].x - bb[0].x, bb[1].y - bb[0].y];\n}\n","import { Diagram, diagram_combine, empty } from './diagram.js';\nimport { V2 } from './vector.js';\nimport { size } from './shapes/shapes_geometry.js';\n\nexport type VerticalAlignment   = 'top'  | 'center' | 'bottom';\nexport type HorizontalAlignment = 'left' | 'center' | 'right';\n\n/**\n * Align diagrams vertically\n * @param diagrams diagrams to be aligned\n * @param alignment vertical alignment of the diagrams\n * alignment can be 'top', 'center', or 'bottom'\n * @returns array of aligned diagrams\n */\nexport function align_vertical(diagrams : Diagram[], alignment : VerticalAlignment = 'center') : Diagram {\n    // align all the diagrams following the first diagram\n    if (diagrams.length == 0) { return empty(); }\n    let newdiagrams = [...diagrams]\n\n    if (alignment == 'top'){\n        let top_y = newdiagrams[0].get_anchor(\"top-left\").y;\n        // return diagrams.map(d => d.translate(V2(0, top_y - d.get_anchor(\"top-left\").y)));\n        for (let i = 0; i < newdiagrams.length; i++) {\n            newdiagrams[i] = newdiagrams[i].translate(V2(0, top_y - newdiagrams[i].get_anchor(\"top-left\").y));\n        }\n        return diagram_combine(...newdiagrams);\n    }\n    else if (alignment == 'center'){\n        let center_y = newdiagrams[0].get_anchor(\"center-left\").y;\n        // return diagrams.map(d => d.translate(V2(0, center_y - d.get_anchor(\"center-left\").y)));\n        for (let i = 0; i < newdiagrams.length; i++) {\n            newdiagrams[i] = newdiagrams[i].translate(V2(0, center_y - newdiagrams[i].get_anchor(\"center-left\").y));\n        }\n        return diagram_combine(...newdiagrams);\n    }\n    else if (alignment == 'bottom'){\n        let bottom_y = newdiagrams[0].get_anchor(\"bottom-left\").y;\n        // return diagrams.map(d => d.translate(V2(0, bottom_y - d.get_anchor(\"bottom-left\").y)));\n        for (let i = 0; i < newdiagrams.length; i++) {\n            newdiagrams[i] = newdiagrams[i].translate(V2(0, bottom_y - newdiagrams[i].get_anchor(\"bottom-left\").y));\n        }\n        return diagram_combine(...newdiagrams);\n    }\n    else {\n        throw new Error(\"Unknown vertical alignment : \" + alignment);\n    }\n}\n\n/**\n * Align diagrams horizontally\n * @param diagrams diagrams to be aligned\n * @param alignment horizontal alignment of the diagrams\n * alignment can be 'left', 'center', or 'right'\n * @returns array of aligned diagrams\n */\nexport function align_horizontal(diagrams : Diagram[], alignment : HorizontalAlignment = 'center') : Diagram {\n\n    // align all the diagrams following the first diagram\n    if (diagrams.length == 0) { return empty(); }\n    let newdiagrams = [...diagrams]\n\n    if (alignment == 'left'){\n        let left_x = newdiagrams[0].get_anchor(\"top-left\").x;\n        // return newdiagrams.map(d => d.translate(V2(left_x - d.get_anchor(\"top-left\").x, 0)));\n        for (let i = 0; i < newdiagrams.length; i++) {\n            newdiagrams[i] = newdiagrams[i].translate(V2(left_x - newdiagrams[i].get_anchor(\"top-left\").x, 0));\n        }\n        return diagram_combine(...newdiagrams);\n    }\n    else if (alignment == 'center'){\n        let center_x = newdiagrams[0].get_anchor(\"top-center\").x;\n        // return newdiagrams.map(d => d.translate(V2(center_x - d.get_anchor(\"top-center\").x, 0)));\n        for (let i = 0; i < newdiagrams.length; i++) {\n            newdiagrams[i] = newdiagrams[i].translate(V2(center_x - newdiagrams[i].get_anchor(\"top-center\").x, 0));\n        }\n        return diagram_combine(...newdiagrams);\n    }\n    else if (alignment == 'right'){\n        let right_x = newdiagrams[0].get_anchor(\"top-right\").x;\n        // return newdiagrams.map(d => d.translate(V2(right_x - d.get_anchor(\"top-right\").x, 0)));\n        for (let i = 0; i < newdiagrams.length; i++) {\n            newdiagrams[i] = newdiagrams[i].translate(V2(right_x - newdiagrams[i].get_anchor(\"top-right\").x, 0));\n        }\n        return diagram_combine(...newdiagrams);\n    }\n    else {\n        throw new Error(\"Unknown horizontal alignment : \" + alignment);\n    }\n}\n\n/**\n * Distribute diagrams horizontally\n * @param diagrams diagrams to be distributed\n * @param space space between the diagrams (default = 0)\n * @returns array of distributed diagrams\n */\nexport function distribute_horizontal(diagrams : Diagram[], space : number = 0) : Diagram {\n    if (diagrams.length == 0) { return empty(); }\n    let newdiagrams = [...diagrams]\n\n    let distributed_diagrams : Diagram[] = [newdiagrams[0]];\n    for (let i = 1; i < newdiagrams.length; i++) {\n        let prev_diagram = distributed_diagrams[i-1];\n        let this_diagram = newdiagrams[i];\n        let prev_right = prev_diagram.get_anchor(\"top-right\").x;\n        let this_left  = this_diagram.get_anchor(\"top-left\").x;\n        let dx = prev_right - this_left + space;\n        distributed_diagrams.push(this_diagram.translate(V2(dx, 0)));\n    }\n    return diagram_combine(...distributed_diagrams);\n}\n\n/**\n * Distribute diagrams vertically\n * @param diagrams diagrams to be distributed\n * @param space space between the diagrams (default = 0)\n * @returns array of distributed diagrams\n */\nexport function distribute_vertical(diagrams : Diagram[], space : number = 0) : Diagram {\n    if (diagrams.length == 0) { return empty(); }\n    let newdiagrams = [...diagrams]\n\n    let distributed_diagrams : Diagram[] = [newdiagrams[0]];\n    for (let i = 1; i < newdiagrams.length; i++) {\n        let prev_diagram = distributed_diagrams[i-1];\n        let this_diagram = newdiagrams[i];\n        let prev_bottom = prev_diagram.get_anchor(\"bottom-left\").y;\n        let this_top    = this_diagram.get_anchor(\"top-left\").y;\n        let dy = prev_bottom - this_top - space;\n        distributed_diagrams.push(this_diagram.translate(V2(0, dy)));\n    }\n    return diagram_combine(...distributed_diagrams);\n}\n\n/**\n * Distribute diagrams horizontally and align\n * @param diagrams diagrams to be distributed\n * @param horizontal_space space between the diagrams (default = 0)\n * @param alignment vertical alignment of the diagrams\n * alignment can be 'top', 'center', or 'bottom'\n * @returns array of distributed and aligned diagrams\n */\nexport function distribute_horizontal_and_align(diagrams : Diagram[], horizontal_space : number = 0,\n    alignment : VerticalAlignment = 'center') : Diagram {\n    return distribute_horizontal(align_vertical(diagrams, alignment).children, horizontal_space);\n}\n\n/**\n * Distribute diagrams vertically and align\n * @param diagrams diagrams to be distributed\n * @param vertical_space space between the diagrams (default = 0)\n * @param alignment horizontal alignment of the diagrams\n * alignment can be 'left', 'center', or 'right'\n * @returns array of distributed and aligned diagrams\n */\nexport function distribute_vertical_and_align(diagrams : Diagram[], vertical_space : number = 0,\n    alignment : HorizontalAlignment = 'center') : Diagram {\n    return distribute_vertical(align_horizontal(diagrams, alignment).children, vertical_space);\n}\n\n/**\n * Distribute diagrams in a grid\n * @param diagrams diagrams to be distributed\n * @param column_count number of columns\n * @param vectical_space space between the diagrams vertically (default = 0)\n * @param horizontal_space space between the diagrams horizontally (default = 0)\n * NODE: the behaviour is updated in v1.3.0 \n * (now the returned diagram's children is the distributed diagrams instead of list of list of diagrams)\n */\nexport function distribute_grid_row(diagrams : Diagram[], column_count : number, \n    vectical_space : number = 0, horizontal_space : number = 0,\n) : Diagram {\n    if (diagrams.length == 0) { return empty(); }\n    let newdiagrams = [...diagrams]\n\n    let row_count = Math.ceil(newdiagrams.length / column_count);\n    let rows : Diagram[][] = [];\n    for (let i = 0; i < row_count; i++) {\n        rows.push(newdiagrams.slice(i * column_count, (i+1) * column_count));\n    }\n    let distributed_rows = rows.map(row => distribute_horizontal(row, horizontal_space));\n    let distributed_diagrams = distribute_vertical(distributed_rows, vectical_space);\n\n    let grid_diagrams = []\n    for (let i = 0; i < distributed_diagrams.children.length; i++) {\n        for (let j = 0; j < distributed_diagrams.children[i].children.length; j++) {\n            grid_diagrams.push(distributed_diagrams.children[i].children[j]);\n        }\n    }\n    return diagram_combine(...grid_diagrams);\n}\n\n/**\n * Distribute diagrams in a variable width row\n * if there is a diagram that is wider than the container width, it will be placed in a separate row\n * @param diagrams diagrams to be distributed\n * @param container_width width of the container\n * @param vertical_space space between the diagrams vertically (default = 0)\n * @param horizontal_space space between the diagrams horizontally (default = 0)\n * @param vertical_alignment vertical alignment of the diagrams (default = 'center')\n * alignment can be 'top', 'center', or 'bottom'\n * @param horizontal_alignment horizontal alignment of the diagrams (default = 'left')\n * alignment can be 'left', 'center', or 'right'\n */\nexport function distribute_variable_row(diagrams: Diagram[], container_width : number, \n    vertical_space : number = 0, horizontal_space : number = 0, \n    vertical_alignment : VerticalAlignment = 'center', \n    horizontal_alignment : HorizontalAlignment = 'left'\n) : Diagram {\n    if (diagrams.length == 0) { return empty(); }\n\n    let rows : Diagram[] = [];\n    let current_row : Diagram[] = [];\n    let current_row_w = 0;\n\n    function add_diagrams_to_rows(arr : Diagram[]) {\n        let distributed_row_dg = distribute_horizontal_and_align(arr, horizontal_space, vertical_alignment);\n        rows.push(distributed_row_dg);\n        current_row = [];\n        current_row_w = 0;\n    }\n\n    for (let i = 0; i < diagrams.length; i++) {\n        let d = diagrams[i];\n        let w = size(d)[0];\n        if (w > container_width) {\n            if (current_row.length > 0) add_diagrams_to_rows(current_row);\n            current_row.push(d); add_diagrams_to_rows(current_row);\n            continue;\n        }\n\n        if (current_row_w + horizontal_space + w > container_width) add_diagrams_to_rows(current_row);\n\n        current_row.push(d);\n        current_row_w += w + horizontal_space;\n    }\n\n    if (current_row.length > 0) add_diagrams_to_rows(current_row);\n\n    // distribute vertically\n    let distributed_diagrams = distribute_vertical_and_align(rows, vertical_space, horizontal_alignment);\n\n    let row_diagrams = []\n    for (let i = 0; i < distributed_diagrams.children.length; i++) {\n        for (let j = 0; j < distributed_diagrams.children[i].children.length; j++) {\n            row_diagrams.push(distributed_diagrams.children[i].children[j]);\n        }\n    }\n    return diagram_combine(...row_diagrams);\n}\n","import { Diagram, DiagramType, diagram_combine, empty } from './diagram.js';\nimport { str_to_mathematical_italic } from './unicode_utils.js'\nimport { Vector2, V2 } from './vector.js';\nimport { get_color, tab_color } from './color_palette.js';\nimport { f_draw_to_svg, calculate_text_scale } from './draw_svg.js';\nimport { rectangle, rectangle_corner } from './shapes.js';\nimport { size } from './shapes/shapes_geometry.js';\nimport { HorizontalAlignment, VerticalAlignment, distribute_horizontal_and_align, distribute_variable_row, distribute_vertical_and_align } from './alignment.js';\nimport { range } from './utils.js';\n\ntype BBox = [Vector2, Vector2]\n\nfunction format_number(val : number, prec : number) {\n    let fixed = val.toFixed(prec);\n    // remove trailing zeros\n    // and if the last character is a dot, remove it\n    return fixed.replace(/\\.?0+$/, \"\");\n}\nexport type formatFunction = (name : string, value : any, prec? : number) => string;\nconst defaultFormat_f : formatFunction = (name : string, val : any, prec? : number) => {\n    let val_str = (typeof val == 'number' && prec != undefined) ? format_number(val,prec) : val.toString();\n    return `${str_to_mathematical_italic(name)} = ${val_str}`;\n}\n\ntype setter_function_t = (_ : any) => void;\ntype inpVariables_t = {[key : string] : any};\ntype inpSetter_t    = {[key : string] : setter_function_t };\n\nenum control_svg_name {\n    locator   = \"control_svg\",\n    dnd       = \"dnd_svg\",\n    custom    = \"custom_int_svg\",\n    button    = \"button_svg\"\n}\nenum HTML_INT_TARGET {\n    DOCUMENT = \"document\",\n    SVG = \"svg\"\n} \n\n/**\n * Object that controls the interactivity of the diagram\n */\nexport class Interactive {\n    public inp_variables : inpVariables_t = {};\n    public inp_setter    : inpSetter_t = {};\n    public display_mode  : \"svg\" | \"canvas\" = \"svg\";\n\n    public diagram_svg : SVGSVGElement | undefined = undefined;\n    public locator_svg : SVGSVGElement | undefined = undefined;\n    public dnd_svg : SVGSVGElement | undefined = undefined;\n    public custom_svg : SVGSVGElement | undefined = undefined;\n    public button_svg : SVGSVGElement | undefined = undefined;\n\n    private locatorHandler? : LocatorHandler = undefined;\n    private dragAndDropHandler? : DragAndDropHandler = undefined;\n    private buttonHandler? : ButtonHandler = undefined;\n    // no support for canvas yet\n\n    public draw_function : (inp_object : inpVariables_t, setter_object? : inpSetter_t) => any \n        = (_) => {};\n    public display_precision : undefined | number = 5;\n    intervals : {[key : string] : any} = {};         \n    \n    public registeredEventListenerRemoveFunctions : (() => void)[] = [];\n    public single_int_mode: boolean = false;\n\n    /**\n     * @param control_container_div the div that contains the control elements\n     * @param diagram_outer_svg the svg element that contains the diagram\n     * \\* _only needed if you want to use the locator_\n     * @param inp_object_ the object that contains the variables\n     * \\* _only needed if you want to use custom input object_\n     */\n    constructor(\n        public control_container_div : HTMLElement, \n        public diagram_outer_svg? : SVGSVGElement,\n        inp_object_? : {[key : string] : any},\n        public event_target: HTML_INT_TARGET = HTML_INT_TARGET.SVG,\n    ){\n        if (inp_object_ != undefined){ this.inp_variables = inp_object_; }\n    }\n\n    public draw() : void {\n        this.draw_function(this.inp_variables, this.inp_setter);\n        this.locatorHandler?.setViewBox();\n        this.dragAndDropHandler?.setViewBox();\n        set_viewbox(this.custom_svg, this.diagram_svg);\n        set_viewbox(this.button_svg, this.diagram_svg);\n        // TODO: also do this for the other control_svg\n    }\n\n    public set(variable_name : string, val : any) : void {\n        this.inp_setter[variable_name](val);\n    }\n    public get(variable_name : string) : any {\n        return this.inp_variables[variable_name];\n    }\n\n    public label(variable_name : string, value : any, display_format_func : formatFunction = defaultFormat_f){\n\n        let labeldiv = document.createElement('div');\n        labeldiv.classList.add(\"diagramatics-label\");\n        labeldiv.innerHTML = display_format_func(variable_name, value, this.display_precision);\n\n        this.inp_variables[variable_name] = value;\n\n        // setter ==========================\n        const setter = (val : any) => {\n            this.inp_variables[variable_name] = val;\n            labeldiv.innerHTML = display_format_func(variable_name, val, this.display_precision);\n        }\n        this.inp_setter[variable_name] = setter;\n\n        // ==============================\n        // add components to div\n        //\n        // <div class=\"diagramatics-label-container\">\n        //     <div class=\"diagramatics-label\"></div>\n        // </div>\n        \n        let container = document.createElement('div');\n        container.classList.add(\"diagramatics-label-container\");\n        container.appendChild(labeldiv);\n\n        this.control_container_div.appendChild(container);\n    }\n\n\n    /**\n     * WARNING: deprecated\n     * use `locator_initial_draw` instead\n     */\n    public locator_draw(){\n        this.locatorHandler?.setViewBox();\n    }\n    public locator_initial_draw(){\n        // TODO: generate the svg here\n        this.locatorHandler?.setViewBox();\n    }\n\n    /** \n     * alias for `dnd_initial_draw`\n     */\n    public drag_and_drop_initial_draw(){\n        this.dnd_initial_draw();\n    }\n    public dnd_initial_draw() {\n        this.dragAndDropHandler?.setViewBox();\n        this.dragAndDropHandler?.drawSvg();\n    }\n    \n    private registerEventListener(\n        element: EventTarget, \n        type: keyof GlobalEventHandlersEventMap, \n        callback: EventListenerOrEventListenerObject | null,\n        options? : boolean | AddEventListenerOptions,\n    ) {\n        element.addEventListener(type, callback, options);\n        const removeFunction = () => element.removeEventListener(type, callback);\n        this.registeredEventListenerRemoveFunctions.push(removeFunction);\n    }\n    \n    public removeRegisteredEventListener() {\n        this.registeredEventListenerRemoveFunctions.forEach(f => f());\n        this.registeredEventListenerRemoveFunctions = [];\n    }\n    \n\n    get_svg_element(metaname: string, force_recreate: boolean = false) : SVGSVGElement {\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\n        let diagram_svg : SVGSVGElement | undefined = undefined;\n        // check if this.diagram_outer_svg has a child with meta=control_svg\n        // if not, create one\n        let svg_element : SVGSVGElement | undefined = undefined;\n\n        for (let i in this.diagram_outer_svg.children) {\n            let child = this.diagram_outer_svg.children[i];\n            if (child instanceof SVGSVGElement && child.getAttribute(\"meta\") == metaname) {\n                svg_element = child;\n            }\n        }\n\n        if (this.single_int_mode && force_recreate && svg_element != undefined) {\n            svg_element.remove?.();\n            svg_element = undefined;\n        }\n        if (svg_element == undefined) {\n            svg_element = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n            svg_element.setAttribute(\"meta\", metaname);\n            svg_element.setAttribute(\"width\", \"100%\");\n            svg_element.setAttribute(\"height\", \"100%\");\n            if (this.isTargetingDocument()) svg_element.style.overflow = \"visible\";\n            this.diagram_outer_svg.appendChild(svg_element);\n        }\n\n        return svg_element;\n    }\n\n    get_diagram_svg() : SVGSVGElement {\n        let diagram_svg = this.get_svg_element(\"diagram_svg\");\n        this.diagram_svg = diagram_svg;\n        return diagram_svg;\n    }\n    \n    isTargetingDocument() : boolean {\n        return this.event_target == HTML_INT_TARGET.DOCUMENT;\n    }\n\n    /**\n     * Create a locator\n     * Locator is a draggable object that contain 2D coordinate information\n     * @param variable_name name of the variable\n     * @param value initial value\n     * @param radius radius of the locator draggable object\n     * @param color color of the locator\n     * @param track_diagram if provided, the locator will snap to the closest point on the diagram\n     */\n    public locator(\n        variable_name : string, value : Vector2, radius : number, color : string = 'blue', \n        track_diagram? : Diagram, blink : boolean = true,\n        callback?: (locator_name: string, position: Vector2) => any,\n    ){\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\n        this.inp_variables[variable_name] = value;\n\n        let diagram_svg  = this.get_diagram_svg();\n        let control_svg  = this.get_svg_element(control_svg_name.locator, !this.locator_svg);\n        this.locator_svg = control_svg;\n        // if this is the fist time this function is called, create a locatorHandler\n        if (this.locatorHandler == undefined) {\n            let locatorHandler = new LocatorHandler(control_svg, diagram_svg);\n            this.locatorHandler = locatorHandler;\n            const eventTarget = this.isTargetingDocument() ? document : this.diagram_outer_svg;\n            this.registerEventListener(eventTarget, 'mousemove',  (evt:any) => { locatorHandler.drag(evt)});\n            this.registerEventListener(eventTarget, 'mouseup',    (evt:any) => { locatorHandler.endDrag(evt)});\n            this.registerEventListener(eventTarget, 'touchmove',  (evt:any) => { locatorHandler.drag(evt)});\n            this.registerEventListener(eventTarget, 'touchend',   (evt:any) => { locatorHandler.endDrag(evt)});\n            this.registerEventListener(eventTarget, 'touchcancel',(evt:any) => { locatorHandler.endDrag(evt)});\n        }\n\n\n        // ============== callback\n        const f_callback = (pos : Vector2, redraw : boolean = true) => {\n            this.inp_variables[variable_name] = pos;\n            if (callback && redraw) callback(variable_name, pos);\n            if (redraw) this.draw();\n        }\n        this.locatorHandler.registerCallback(variable_name, f_callback);\n\n        // ============== Circle element\n\n        let locator_svg = this.locatorHandler.create_locator_circle_pointer_svg(variable_name, radius, value, color, blink);\n        if(blink){\n            // store the circle_outer into the LocatorHandler so that we can turn it off later\n            let blinking_outers = locator_svg.getElementsByClassName(\"diagramatics-locator-blink\");\n            for (let i = 0; i < blinking_outers.length; i++)\n                (this.locatorHandler as LocatorHandler).addBlinkingCircleOuter(blinking_outers[i])\n        }\n        this.registerEventListener(locator_svg, 'mousedown', (evt:any) => {\n            this.locatorHandler!.startDrag(evt, variable_name, locator_svg);\n        });\n        this.registerEventListener(locator_svg, 'touchstart', (evt:any) => {\n            this.locatorHandler!.startDrag(evt, variable_name, locator_svg);\n        });\n\n        // =============== setter\n        let setter;\n        if (track_diagram) {\n            if (track_diagram.type != DiagramType.Polygon && track_diagram.type != DiagramType.Curve)\n                throw Error('Track diagram must be a polygon or curve');\n            if (track_diagram.path == undefined) throw Error(`diagram {diagtam.type} must have a path`);\n            let track = track_diagram.path.points;\n            setter = (pos : Vector2) => {\n                let coord = closest_point_from_points(pos, track);\n                locator_svg.setAttribute(\"transform\", `translate(${coord.x},${-coord.y})`)\n                return coord;\n            }\n        }\n        else{\n            setter = (pos : Vector2) => {\n                locator_svg.setAttribute(\"transform\", `translate(${pos.x},${-pos.y})`)\n                return pos;\n            }\n        }\n        this.locatorHandler.registerSetter(variable_name, setter);\n        this.inp_setter[variable_name] = setter;\n\n        // set initial position\n        let init_pos = setter(value);\n        this.locatorHandler.setPos(variable_name, init_pos);\n    }\n\n\n    // TODO: in the next breaking changes update,\n    // merge this function with locator\n    /**\n     * Create a locator with custom diagram object\n     * @param variable_name name of the variable\n     * @param value initial value\n     * @param diagram diagram of the locator\n     * @param track_diagram if provided, the locator will snap to the closest point on the diagram\n     * @param blink if true, the locator will blink\n     * @param callback callback function that will be called when the locator is moved\n     * @param callback_rightclick callback function that will be called when the locator is right clicked\n     */\n    public locator_custom(\n        variable_name : string, value : Vector2, diagram : Diagram, \n        track_diagram? : Diagram, blink : boolean = true,\n        callback?: (locator_name: string, position: Vector2) => any,\n        callback_rightclick?: (locator_name: string) => any\n    ){\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\n        this.inp_variables[variable_name] = value;\n\n        let diagram_svg  = this.get_diagram_svg();\n        let control_svg  = this.get_svg_element(control_svg_name.locator, !this.locator_svg);\n        this.locator_svg = control_svg;\n        // if this is the fist time this function is called, create a locatorHandler\n        if (this.locatorHandler == undefined) {\n            let locatorHandler = new LocatorHandler(control_svg, diagram_svg);\n            this.locatorHandler = locatorHandler;\n            const eventTarget = this.isTargetingDocument() ? document : this.diagram_outer_svg;\n            this.registerEventListener(eventTarget, 'mousemove',  (evt:any) => { locatorHandler.drag(evt); })\n            this.registerEventListener(eventTarget, 'mouseup',    (evt:any) => { locatorHandler.endDrag(evt); })\n            this.registerEventListener(eventTarget, 'touchmove',  (evt:any) => { locatorHandler.drag(evt); })\n            this.registerEventListener(eventTarget, 'touchend',   (evt:any) => { locatorHandler.endDrag(evt); })\n            this.registerEventListener(eventTarget, 'touchcancel',(evt:any) => { locatorHandler.endDrag(evt); })\n        }\n\n\n        // ============== callback\n        const f_callback = (pos : Vector2, redraw : boolean = true) => {\n            this.inp_variables[variable_name] = pos;\n            // don't call the callback on the initialization;\n            if (callback && redraw) callback(variable_name, pos);\n            if (redraw) this.draw();\n        }\n        this.locatorHandler.registerCallback(variable_name, f_callback);\n\n        // ============== SVG element\n\n        let locator_svg = this.locatorHandler!.create_locator_diagram_svg(variable_name, diagram, blink);\n        this.registerEventListener(locator_svg, 'mousedown', (evt:any) => {\n            this.locatorHandler!.startDrag(evt, variable_name, locator_svg);\n        });\n        this.registerEventListener(locator_svg, 'touchstart', (evt:any) => {\n            this.locatorHandler!.startDrag(evt, variable_name, locator_svg);\n        });\n        if (callback_rightclick){\n          this.registerEventListener(locator_svg, 'contextmenu', (evt) => {\n            evt.preventDefault();\n            callback_rightclick(variable_name);\n          });\n        }\n\n        // =============== setter\n        let setter;\n        if (track_diagram) {\n            if (track_diagram.type != DiagramType.Polygon && track_diagram.type != DiagramType.Curve)\n                throw Error('Track diagram must be a polygon or curve');\n            if (track_diagram.path == undefined) throw Error(`diagram {diagtam.type} must have a path`);\n            let track = track_diagram.path.points;\n            setter = (pos : Vector2) => {\n                let coord = closest_point_from_points(pos, track);\n                locator_svg.setAttribute(\"transform\", `translate(${coord.x},${-coord.y})`)\n                return coord;\n            }\n        }\n        else{\n            setter = (pos : Vector2) => {\n                locator_svg.setAttribute(\"transform\", `translate(${pos.x},${-pos.y})`)\n                return pos;\n            }\n        }\n        this.locatorHandler.registerSetter(variable_name, setter);\n        this.inp_setter[variable_name] = setter;\n\n        // set initial position\n        let init_pos = setter(value);\n        this.locatorHandler.setPos(variable_name, init_pos);\n    }\n\n    /**\n     * Create a slider\n     * @param variable_name name of the variable\n     * @param min minimum value\n     * @param max maximum value\n     * @param value initial value\n     * @param step step size\n     * @param time time of the animation in milliseconds\n     * @param display_format_func function to format the display of the value\n    */\n    public slider(variable_name : string, min : number = 0, max : number = 100, value : number = 50, step : number = -1, \n        time : number = 1.5, display_format_func : formatFunction = defaultFormat_f){\n        // if the step is -1, then it is automatically calculated\n        if (step == -1){ step = (max - min) / 100; }\n\n        // initialize the variable\n        this.inp_variables[variable_name] = value;\n\n        // =========== label =============\n        let labeldiv = document.createElement('div');\n        labeldiv.classList.add(\"diagramatics-label\");\n        labeldiv.innerHTML = display_format_func(variable_name, value, this.display_precision);\n\n        // =========== slider ===========\n\n        // create the callback function\n        const callback = (val : number, redraw : boolean = true) => {\n            this.inp_variables[variable_name] = val;\n            labeldiv.innerHTML = display_format_func(variable_name, val, this.display_precision);\n            if (redraw) this.draw();\n        }\n        let slider = create_slider(callback, min, max, value, step);\n\n        // ================ setter\n        const setter = (val : number) => {\n            slider.value = val.toString();\n            callback(val, false);\n        }\n\n        this.inp_setter[variable_name] = setter;\n\n        // =========== playbutton ========\n        let nstep = (max - min) / step;\n        const interval_time = 1000 * time / nstep;\n\n        let playbutton = document.createElement('button');\n        let symboldiv  = document.createElement('div');\n        symboldiv.classList.add(\"diagramatics-slider-playbutton-symbol\");\n        playbutton.appendChild(symboldiv);\n        playbutton.classList.add(\"diagramatics-slider-playbutton\");\n        playbutton.onclick = () => {\n            if (this.intervals[variable_name] == undefined){\n                // if is not playing\n                playbutton.classList.add(\"paused\");\n                this.intervals[variable_name] = setInterval(() => {\n                    let val = parseFloat(slider.value);\n                    val += step;\n                    // wrap around\n                    val = ((val - min) % (max - min)) + min;\n                    \n                    slider.value = val.toString();\n                    callback(val);\n                }, interval_time);\n            } else {\n                // if is playing\n                playbutton.classList.remove(\"paused\");\n                clearInterval(this.intervals[variable_name]);\n                this.intervals[variable_name] = undefined;\n            }\n        }\n\n        // ==============================\n        // add components to div\n        //\n        // <div class=\"diagramatics-slider-leftcontainer\">\n        //     <br>\n        //     <button class=\"diagramatics-slider-playbutton\"></button>\n        // </div>\n        // <div class=\"diagramatics-slider-rightcontainer\">\n        //     <div class=\"diagramatics-label\"></div>\n        //     <input type=\"range\"class=\"diagramatics-slider\">\n        // </div>\n        //\n        let leftcontainer = document.createElement('div');\n        leftcontainer.classList.add(\"diagramatics-slider-leftcontainer\");\n        leftcontainer.appendChild(document.createElement('br'));\n        leftcontainer.appendChild(playbutton);\n\n        let rightcontainer = document.createElement('div');\n        rightcontainer.classList.add(\"diagramatics-slider-rightcontainer\");\n        rightcontainer.appendChild(labeldiv);\n        rightcontainer.appendChild(slider);\n\n        let container = document.createElement('div');\n        container.classList.add(\"diagramatics-slider-container\");\n        container.appendChild(leftcontainer);\n        container.appendChild(rightcontainer);\n\n        this.control_container_div.appendChild(container);\n    }\n\n    private init_drag_and_drop() {\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\n        let diagram_svg = this.get_diagram_svg();\n        let dnd_svg     = this.get_svg_element(control_svg_name.dnd, !this.dnd_svg);\n        this.dnd_svg    = dnd_svg;\n\n        // if this is the fist time this function is called, create a dragAndDropHandler\n        if (this.dragAndDropHandler == undefined) {\n            let dragAndDropHandler = new DragAndDropHandler(dnd_svg, diagram_svg);\n            this.dragAndDropHandler = dragAndDropHandler;\n            const eventTarget = this.isTargetingDocument() ? document : this.diagram_outer_svg;\n            // this.registerEventListener(this.diagram_outer_svg, 'mousemove',  (evt:any) => {dragAndDropHandler.drag(evt);});\n            this.registerEventListener(eventTarget, 'mousemove',  (evt:any) => {dragAndDropHandler.drag(evt);});\n            this.registerEventListener(eventTarget, 'mouseup',    (evt:any) => {dragAndDropHandler.endDrag(evt);});\n            this.registerEventListener(eventTarget, 'touchmove',  (evt:any) => {dragAndDropHandler.drag(evt);});\n            this.registerEventListener(eventTarget, 'touchend',   (evt:any) => {dragAndDropHandler.endDrag(evt);});\n            this.registerEventListener(eventTarget, 'touchcancel',(evt:any) => {dragAndDropHandler.endDrag(evt);});\n        }\n    }\n\n    /**\n     * Create a drag and drop container\n     * @param name name of the container\n     * @param diagram diagram of the container\n     * @param capacity capacity of the container (default is 1)\n     * @param config configuration of the container positioning\n     * the configuration is an object with the following format:\n     * `{type:\"horizontal-uniform\"}`, `{type:\"vertical-uniform\"}`, `{type:\"grid\", value:[number, number]}`\n     * `{type:\"horizontal\", padding:number}`, `{type:\"vertical\", padding:number}`\n     * `{type:\"flex-row\", padding:number, vertical_alignment:VerticalAlignment, horizontal_alignment:HorizontalAlignment}`\n     *\n     * you can also add custom region box for the target by adding `custom_region_box: [Vector2, Vector2]` in the config\n     *\n     * you can also add a sorting function for the target by adding `sorting_function: (a: string, b: string) => number`\n    */\n    public dnd_container(name : string, diagram : Diagram, capacity? : number, config? : dnd_container_config) {\n        this.init_drag_and_drop();\n        this.dragAndDropHandler?.add_container(name, diagram, capacity, config);\n    }\n\n    // TODO: in the next breaking changes update,\n    // merge this function with dnd_draggable_to_container\n    /**\n     * Create a drag and drop draggable that is positioned into an existing container\n     * @param name name of the draggable\n     * @param diagram diagram of the draggable\n     * @param container_name name of the container\n     * @param callback callback function when the draggable is moved\n     */\n    public dnd_draggable_to_container(name : string, diagram : Diagram, container_name : string, callback? : (name:string, container:string) => any) {\n        this.init_drag_and_drop();\n        if (this.dragAndDropHandler == undefined) throw Error(\"dragAndDropHandler in Interactive class is undefined\");\n\n        this.inp_variables[name] = diagram.origin;\n        this.dragAndDropHandler.add_draggable_to_container(name, diagram, container_name);\n\n        const dnd_callback = (pos : Vector2, redraw : boolean = true) => {\n            this.inp_variables[name] = pos;\n            if (callback) callback(name, container_name);\n            if (redraw) this.draw();\n        }\n        this.dragAndDropHandler.registerCallback(name, dnd_callback);\n    }\n    \n    /**\n     * Create a drag and drop draggable\n     * @param name name of the draggable\n     * @param diagram diagram of the draggable\n     * @param container_diagram diagram of the container, if not provided, a container will be created automatically\n     * @param callback callback function when the draggable is moved\n    */\n    public dnd_draggable(name : string, diagram : Diagram, container_diagram? : Diagram, callback? : (name:string, pos:Vector2) => any) {\n        this.init_drag_and_drop();\n        if (this.dragAndDropHandler == undefined) throw Error(\"dragAndDropHandler in Interactive class is undefined\");\n\n        this.inp_variables[name] = diagram.origin;\n        this.dragAndDropHandler.add_draggable_with_container(name, diagram, container_diagram);\n\n        const dnd_callback = (pos : Vector2, redraw : boolean = true) => {\n            this.inp_variables[name] = pos;\n            if (callback) callback(name, pos);\n            if (redraw) this.draw();\n        }\n        this.dragAndDropHandler.registerCallback(name, dnd_callback);\n    }\n\n    /**\n     * Register a callback function when a draggable is dropped outside of a container\n     * @param callback callback function\n     */\n    public dnd_register_drop_outside_callback(callback : (name : string) => any) {\n        this.init_drag_and_drop();\n        this.dragAndDropHandler?.register_dropped_outside_callback(callback);\n    }\n    \n    /**\n     * Register a validation function when a draggable is moved to a container\n     * If the function return false, the draggable will not be moved\n     * @param fun validation function\n    */\n    public dnd_register_move_validation_function(fun: (draggable_name: string, target_name: string) => boolean) {\n        this.init_drag_and_drop();\n        this.dragAndDropHandler?.register_move_validation_function(fun);\n    }\n\n    /**\n     * Move a draggable to a container\n     * @param name name of the draggable\n     * @param container_name name of the container\n     */\n    public dnd_move_to_container(name : string, container_name : string) {\n        this.dragAndDropHandler?.try_move_draggable_to_container(name, container_name);\n    }\n\n    /**\n     * Get the data of the drag and drop objects with the format:\n     * `{container:string, content:string[]}[]`\n    */\n    public get_dnd_data() : DragAndDropData {\n        return this.dragAndDropHandler?.getData() ?? [];\n    }\n\n    /**\n     * Set the data of the drag and drop objects with the format:\n     * `{container:string, content:string[]}[]`\n     */\n    public set_dnd_data(data : DragAndDropData) : void {\n        this.dragAndDropHandler?.setData(data);\n    }\n    \n    /**\n    * Get the content size of a container\n    */\n    public  get_dnd_container_content_size(container_name : string) : [number,number] {\n       if (!this.dragAndDropHandler) return [NaN,NaN];\n       return this.dragAndDropHandler.get_container_content_size(container_name);\n    }\n    \n    /**\n     * Set whether the content of the container should be sorted or not\n     */\n    public set_dnd_content_sort(sort_content : boolean) : void {\n        if (!this.dragAndDropHandler) return;\n        this.dragAndDropHandler.sort_content = sort_content;\n    }\n    \n    public remove_dnd_draggable(name : string) {\n        this.dragAndDropHandler?.remove_draggable(name);\n    }\n    public remove_locator(name: string) {\n        this.locatorHandler?.remove(name);\n    }\n    public remove_button(name: string) {\n        this.buttonHandler?.remove(name);\n    }\n\n    /**\n     * @deprecated (use `Interactive.custom_object_g()` instead)\n     * This method will be removed in the next major release\n     *\n     * Create a custom interactive object\n     * @param id id of the object\n     * @param classlist list of classes of the object\n     * @param diagram diagram of the object\n     * @returns the svg element of the object\n     */\n    public custom_object(id : string, classlist: string[], diagram : Diagram) : SVGSVGElement {\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\n        let diagram_svg = this.get_diagram_svg();\n        let control_svg = this.get_svg_element(control_svg_name.custom, !this.custom_svg);\n\n        let svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        f_draw_to_svg(svg, svg, diagram, true, false, calculate_text_scale(diagram_svg));\n        svg.setAttribute(\"overflow\", \"visible\");\n        svg.setAttribute(\"class\", classlist.join(\" \"));\n        svg.setAttribute(\"id\",id);\n        \n        control_svg.setAttribute(\"viewBox\", diagram_svg.getAttribute(\"viewBox\") as string);\n        control_svg.setAttribute(\"preserveAspectRatio\", diagram_svg.getAttribute(\"preserveAspectRatio\") as string);\n        control_svg.style.overflow = \"visible\";\n\n        control_svg.appendChild(svg);\n        this.custom_svg = control_svg;\n        return svg;\n    }\n    \n    /**\n     * Create a custom interactive object\n     * @param id id of the object\n     * @param classlist list of classes of the object\n     * @param diagram diagram of the object\n     * @returns the <g> svg element of the object\n     */\n    public custom_object_g(id : string, classlist: string[], diagram : Diagram) : SVGGElement {\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\n        let diagram_svg = this.get_diagram_svg();\n        let control_svg = this.get_svg_element(control_svg_name.custom, !this.custom_svg);\n\n        let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        f_draw_to_svg(control_svg, g, diagram, true, false, calculate_text_scale(diagram_svg));\n        g.setAttribute(\"overflow\", \"visible\");\n        g.setAttribute(\"class\", classlist.join(\" \"));\n        g.setAttribute(\"id\",id);\n        \n        control_svg.setAttribute(\"viewBox\", diagram_svg.getAttribute(\"viewBox\") as string);\n        control_svg.setAttribute(\"preserveAspectRatio\", diagram_svg.getAttribute(\"preserveAspectRatio\") as string);\n        control_svg.style.overflow = \"visible\";\n\n        control_svg.appendChild(g);\n        this.custom_svg = control_svg;\n        return g;\n    }\n\n    private init_button() {\n        if (this.diagram_outer_svg == undefined) throw Error(\"diagram_outer_svg in Interactive class is undefined\");\n        let diagram_svg = this.get_diagram_svg();\n        let button_svg  = this.get_svg_element(control_svg_name.button, !this.button_svg);\n        this.button_svg = button_svg;\n\n        // if this is the fist time this function is called, create a dragAndDropHandler\n        if (this.buttonHandler == undefined) {\n            let buttonHandler = new ButtonHandler(button_svg, diagram_svg);\n            this.buttonHandler = buttonHandler;\n        }\n    }\n\n    /**\n     * Create a toggle button\n     * @param name name of the button\n     * @param diagram_on diagram of the button when it is on\n     * @param diagram_off diagram of the button when it is off\n     * @param state initial state of the button\n     * @param callback callback function when the button state is changed\n    */\n    public button_toggle(name : string, diagram_on : Diagram, diagram_off : Diagram, state : boolean = false,\n        callback? : (name : string, state : boolean) => any\n    ){\n        this.init_button();\n        if (this.buttonHandler == undefined) throw Error(\"buttonHandler in Interactive class is undefined\");\n\n        this.inp_variables[name] = state;\n\n        let main_callback;\n        if (callback){\n            main_callback = (state : boolean, redraw : boolean = true) => { \n                this.inp_variables[name] = state \n                callback(name, state);\n                if (redraw) this.draw();\n            }\n        } else {\n            main_callback = (state : boolean, redraw : boolean = true) => { \n                this.inp_variables[name] = state \n                if (redraw) this.draw();\n            }\n\n        }\n\n        let setter = this.buttonHandler.try_add_toggle(name, diagram_on, diagram_off, state, main_callback);\n        this.inp_setter[name] = setter;\n    }\n\n    /**\n     * Create a click button\n     * @param name name of the button\n     * @param diagram diagram of the button\n     * @param diagram_pressed diagram of the button when it is pressed\n     * @param callback callback function when the button is clicked\n    */\n    public button_click(name : string, diagram : Diagram, diagram_pressed : Diagram, callback : () => any){\n        this.init_button();\n        if (this.buttonHandler == undefined) throw Error(\"buttonHandler in Interactive class is undefined\");\n\n        let n_callback = () => { callback(); this.draw(); }\n        this.buttonHandler.try_add_click(name, diagram, diagram_pressed, diagram, n_callback);\n    }\n    \n    /**\n     * Create a click button\n     * @param name name of the button\n     * @param diagram diagram of the button\n     * @param diagram_pressed diagram of the button when it is pressed\n     * @param diagram_hover diagram of the button when it is hovered\n     * @param callback callback function when the button is clicked\n    */\n    public button_click_hover(name : string, diagram : Diagram, diagram_pressed : Diagram, diagram_hover : Diagram, callback : () => any){\n        this.init_button();\n        if (this.buttonHandler == undefined) throw Error(\"buttonHandler in Interactive class is undefined\");\n\n        let n_callback = () => { callback(); this.draw(); }\n        this.buttonHandler.try_add_click(name, diagram, diagram_pressed, diagram_hover, n_callback);\n    }\n}\n\n// ========== functions\n//\n\nfunction set_viewbox(taget : SVGSVGElement | undefined, source : SVGSVGElement | undefined) {\n    if (taget == undefined) return;\n    if (source == undefined) return;\n    taget.setAttribute(\"viewBox\", source.getAttribute(\"viewBox\") as string);\n    taget.setAttribute(\"preserveAspectRatio\", source.getAttribute(\"preserveAspectRatio\") as string);\n}\n\n\nfunction create_slider(callback : (val : number) => any, min : number = 0, max : number = 100, value : number = 50, step : number) : HTMLInputElement {\n    // create a slider\n    let slider = document.createElement(\"input\");\n    slider.type = \"range\";\n    slider.min = min.toString();\n    slider.max = max.toString();\n    slider.value = value.toString();\n    slider.step = step.toString();\n    slider.oninput = () => {\n        let val = slider.value;\n        callback(parseFloat(val));\n    }\n    // add class to slider\n    slider.classList.add(\"diagramatics-slider\");\n    return slider;\n}\n\n// function create_locator() : SVGCircleElement {\n// }\n//\nfunction closest_point_from_points(p : Vector2, points : Vector2[]) : Vector2 {\n    if (points.length == 0) return p;\n    let closest_d2 = Infinity;\n    let closest_p = points[0];\n    for (let i = 0; i < points.length; i++) {\n        let d2 = points[i].sub(p).length_sq();\n        if (d2 < closest_d2) {\n            closest_d2 = d2;\n            closest_p = points[i];\n        }\n    }\n    return closest_p;\n}\n\n// helper to calculate CTM in firefox\n// there's a well known bug in firefox about `getScreenCTM()`\nfunction firefox_calcCTM(svgelem : SVGSVGElement) : DOMMatrix {\n    let ctm = svgelem.getScreenCTM() as DOMMatrix;\n    // get screen width and height of the element\n    let screenWidth  = svgelem.width.baseVal.value;\n    let screenHeight = svgelem.height.baseVal.value;\n    let viewBox      = svgelem.viewBox.baseVal;\n    let scalex       = screenWidth/viewBox.width;\n    let scaley       = screenHeight/viewBox.height;\n    let scale        = Math.min(scalex, scaley);\n\n    // let translateX = (screenWidth/2  + ctm.e) - (viewBox.width/2  + viewBox.x) * scale;\n    // let translateY = (screenHeight/2 + ctm.f) - (viewBox.height/2 + viewBox.y) * scale;\n    let translateX = (screenWidth/2 ) - (viewBox.width/2  + viewBox.x) * scale;\n    let translateY = (screenHeight/2) - (viewBox.height/2 + viewBox.y) * scale;\n    return DOMMatrix.fromMatrix(ctm).translate(translateX, translateY).scale(scale);\n}\n\ntype LocatorEvent = TouchEvent | Touch | MouseEvent\ntype DnDEvent = TouchEvent | Touch | MouseEvent\n\n/**\n * Convert client position to SVG position\n * @param clientPos the client position\n * @param svgelem the svg element\n */\nexport function clientPos_to_svgPos(clientPos : {x : number, y : number}, svgelem : SVGSVGElement) : \n{x : number, y : number} {\n    // var CTM = this.control_svg.getScreenCTM() as DOMMatrix;\n    // NOTE: there's a well known bug in firefox about `getScreenCTM()`\n    // check if the browser is firefox\n    let CTM : DOMMatrix;\n    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n        CTM = firefox_calcCTM(svgelem);\n    } else {\n        CTM = svgelem.getScreenCTM() as DOMMatrix;\n    }\n    // console.log(CTM);\n    \n    return {\n        x : (clientPos.x - CTM.e) / CTM.a,\n        y : - (clientPos.y - CTM.f) / CTM.d\n    }\n}\n\nfunction getMousePosition(evt : LocatorEvent, svgelem : SVGSVGElement) : {x : number, y : number} {\n    // firefox doesn't support `TouchEvent`, we need to check for it\n    if (window.TouchEvent && evt instanceof TouchEvent) { evt = evt.touches[0]; }\n    let clientPos = {\n        x : (evt as Touch | MouseEvent).clientX,\n        y : (evt as Touch | MouseEvent).clientY\n    }\n    return clientPos_to_svgPos(clientPos, svgelem);\n}\n\n/**\n * Get the SVG coordinate from the event (MouseEvent or TouchEvent)\n * @param evt the event\n * @param svgelem the svg element\n * @returns the SVG coordinate\n */\nexport function get_SVGPos_from_event(evt : LocatorEvent, svgelem : SVGSVGElement) : {x : number, y : number} {\n    return getMousePosition(evt, svgelem);\n}\n\nclass LocatorHandler {\n\n    selectedElement  : SVGElement | null = null;\n    selectedVariable : string | null = null;\n    mouseOffset : Vector2 = V2(0,0);\n    callbacks : {[key : string] : (pos : Vector2, redraw?: boolean) => any} = {};\n    setter    : {[key : string] : (pos : Vector2) => any} = {};\n    // store blinking circle_outer so that we can turn it off\n    svg_elements: {[key : string] : SVGElement} = {};\n    blinking_circle_outers : Element[] = [];\n    first_touch_callback : Function | null = null;\n    element_pos : {[key : string] : Vector2} = {};\n\n    constructor(public control_svg : SVGSVGElement, public diagram_svg : SVGSVGElement){\n    }\n\n    startDrag(evt : LocatorEvent, variable_name : string, selectedElement : SVGElement) {\n        this.selectedElement  = selectedElement;\n        this.selectedVariable = variable_name;\n        \n        if (evt instanceof MouseEvent) { evt.preventDefault(); }\n        if (window.TouchEvent && evt instanceof TouchEvent) { evt.preventDefault(); }\n        let coord = getMousePosition(evt, this.control_svg);\n        let mousepos = V2(coord.x, coord.y);\n        let elementpos = this.element_pos[variable_name];\n        if (elementpos){\n            this.mouseOffset = elementpos.sub(mousepos);\n        }\n        \n        this.handleBlinking();\n    }\n    drag(evt : LocatorEvent) {\n        if (this.selectedElement == undefined) return;\n        if (this.selectedVariable == undefined) return;\n\n        if (evt instanceof MouseEvent) { evt.preventDefault(); }\n        if (window.TouchEvent && evt instanceof TouchEvent) { evt.preventDefault(); }\n\n        let coord = getMousePosition(evt, this.control_svg);\n\n        let pos = V2(coord.x, coord.y).add(this.mouseOffset);\n        this.element_pos[this.selectedVariable] = pos;\n        // check if setter for this.selectedVariable exists\n        // if it does, call it\n        if (this.setter[this.selectedVariable] != undefined) {\n            pos = this.setter[this.selectedVariable](pos);\n        }\n\n        // check if callback for this.selectedVariable exists\n        // if it does, call it\n        if (this.selectedVariable == null) return;\n        if (this.callbacks[this.selectedVariable] != undefined) {\n            this.callbacks[this.selectedVariable](pos);\n        }\n        this.setViewBox();\n\n    }\n    setViewBox() {\n        // set viewBox and preserveAspectRatio of control_svg to be the same as diagram_svg\n        this.control_svg.setAttribute(\"viewBox\", this.diagram_svg.getAttribute(\"viewBox\") as string);\n        this.control_svg.setAttribute(\"preserveAspectRatio\", this.diagram_svg.getAttribute(\"preserveAspectRatio\") as string);\n    }\n    endDrag(_ : LocatorEvent) {\n        this.selectedElement = null;\n        this.selectedVariable = null;\n    }\n    \n    public remove(variable_name : string) : void {\n        if (this.selectedVariable == variable_name){\n            this.selectedElement = null;\n            this.selectedVariable = null;\n        }\n        delete this.callbacks[variable_name];\n        delete this.setter[variable_name];\n        this.svg_elements[variable_name]?.remove();\n        delete this.svg_elements[variable_name];\n        delete this.element_pos[variable_name];\n    }\n\n    setPos(name : string, pos : Vector2){\n        this.element_pos[name] = pos;\n        this.callbacks[name](pos, false);\n    }\n    registerCallback(name : string, callback : (pos : Vector2) => any){\n        this.callbacks[name] = callback;\n    }\n    registerSetter(name : string, setter : (pos : Vector2) => any){\n        this.setter[name] = setter;\n    }\n    addBlinkingCircleOuter(circle_outer : Element){\n        this.blinking_circle_outers.push(circle_outer);\n    }\n    handleBlinking(){\n        // turn off all blinking_circle_outers after the first touch\n        if (this.blinking_circle_outers.length == 0) return;\n        for (let i = 0; i < this.blinking_circle_outers.length; i++) {\n            this.blinking_circle_outers[i].classList.remove(\"diagramatics-locator-blink\");\n        }\n        this.blinking_circle_outers = [];\n        if (this.first_touch_callback != null) this.first_touch_callback();\n    }\n\n    create_locator_diagram_svg(name: string, diagram : Diagram, blink : boolean) : SVGGElement {\n        let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        f_draw_to_svg(this.control_svg, g, diagram.position(V2(0,0)), true, false, calculate_text_scale(this.diagram_svg));\n        g.style.cursor = \"pointer\";\n        g.setAttribute(\"overflow\", \"visible\");\n        if (blink) {\n            g.classList.add(\"diagramatics-locator-blink\");\n            this.addBlinkingCircleOuter(g);\n        }\n        \n        if (this.svg_elements[name]){\n            this.svg_elements[name].replaceWith(g);\n        } else {\n            this.control_svg.appendChild(g);\n        }\n        \n        \n        this.svg_elements[name] = g;\n        this.element_pos[name]\n        return g;\n    }\n\n    create_locator_circle_pointer_svg(name: string, radius : number, value : Vector2, color : string, blink : boolean) : SVGGElement {\n        let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        // set svg overflow to visible\n        g.setAttribute(\"overflow\", \"visible\");\n        // set cursor to be pointer when hovering\n        g.style.cursor = \"pointer\";\n\n        let circle_outer = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n        let circle_inner = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n\n        let inner_radius    = radius * 0.4;\n\n        circle_outer.setAttribute(\"r\", radius.toString());\n        circle_outer.setAttribute(\"fill\", get_color(color, tab_color));\n        circle_outer.setAttribute(\"fill-opacity\", \"0.3137\");\n        circle_outer.setAttribute(\"stroke\", \"none\");\n        circle_outer.classList.add(\"diagramatics-locator-outer\");\n        if (blink) circle_outer.classList.add(\"diagramatics-locator-blink\");\n\n        circle_inner.setAttribute(\"r\", inner_radius.toString());\n        circle_inner.setAttribute(\"fill\", get_color(color, tab_color));\n        circle_inner.setAttribute(\"stroke\", \"none\");\n        circle_inner.classList.add(\"diagramatics-locator-inner\");\n\n        g.appendChild(circle_outer);\n        g.appendChild(circle_inner);\n        g.setAttribute(\"transform\", `translate(${value.x},${-value.y})`)\n        if (this.svg_elements[name]){\n            this.svg_elements[name].replaceWith(g);\n        } else {\n            this.control_svg.appendChild(g);\n        }\n        \n        this.svg_elements[name] = g;\n        return g;\n    }\n\n}\n\ntype DragAndDropContainerData = {\n    name : string,\n    position : Vector2,\n    svgelement? : SVGElement,\n    diagram : Diagram,\n    content : string[],\n    capacity : number,\n    config : dnd_container_config,\n}\ntype DragAndDropDraggableData = {\n    name : string,\n    position : Vector2,\n    svgelement? : SVGElement,\n    diagram : Diagram,\n    diagram_size : [number, number],\n    container : string,\n}\ntype DragAndDropData = {container:string, content:string[]}[]\n\nenum dnd_type {\n    container = \"diagramatics-dnd-container\",\n    draggable = \"diagramatics-dnd-draggable\",\n    ghost     = \"diagramatics-dnd-draggable-ghost\"\n}\n\n//TODO: add more\ntype dnd_container_positioning_type =\n    {type:\"horizontal-uniform\"} |\n    {type:\"vertical-uniform\"} |\n    {type:\"horizontal\", padding:number} |\n    {type:\"vertical\", padding:number} |\n    {type:\"flex-row\", padding:number, vertical_alignment?:VerticalAlignment, horizontal_alignment?:HorizontalAlignment} |\n    {type:\"grid\", value:[number, number]}\ntype dnd_container_config = dnd_container_positioning_type & {\n    custom_region_box?: [Vector2, Vector2]\n    sorting_function?: (a : string, b : string) => number\n}\n\nclass DragAndDropHandler {\n    containers : {[key : string] : DragAndDropContainerData} = {};\n    draggables : {[key : string] : DragAndDropDraggableData} = {};\n    callbacks : {[key : string] : (pos : Vector2) => any} = {};\n    hoveredContainerName : string | null = null;\n    draggedElementName : string | null = null;\n    draggedElementGhost : SVGElement | null = null;\n    dropped_outside_callback : ((name : string) => any) | null = null;\n    move_validation_function : ((draggable_name: string, target_name: string) => boolean) | null = null;\n    sort_content : boolean = false;\n    dom_to_id_map : WeakMap<HTMLElement|SVGElement, string>;\n\n    constructor(public dnd_svg : SVGSVGElement, public diagram_svg : SVGSVGElement){\n        this.dom_to_id_map = new WeakMap();\n    }\n\n    public add_container(\n        name : string, diagram : Diagram, \n        capacity? : number , config? : dnd_container_config,\n    ) {\n        if (this.containers[name] != undefined) {\n            this.replace_container_svg(name, diagram, capacity, config);\n            return;\n        }\n\n        this.containers[name] = {\n            name, diagram, \n            position : diagram.origin, \n            content : [], \n            config : config ?? {type:\"horizontal-uniform\"},\n            capacity : capacity ?? 1\n        };\n    }\n\n    generate_position_map(bbox : BBox, config : dnd_container_config, capacity : number, content : string[]) \n    : Vector2[] {\n        const p_center = bbox[0].add(bbox[1]).scale(0.5);\n        switch (config.type){\n            case \"horizontal-uniform\": {\n                let width = bbox[1].x - bbox[0].x;\n                let dx = width / capacity;\n                let x0 = bbox[0].x + dx / 2;\n                let y  = p_center.y;\n                return range(0, capacity).map(i => V2(x0 + dx*i, y));\n            }\n            case \"vertical-uniform\": {\n                //NOTE: top to bottom\n                let height = bbox[1].y - bbox[0].y;\n                let dy = height / capacity;\n                let x  = p_center.x;\n                let y0 = bbox[1].y - dy / 2;\n                return range(0, capacity).map(i => V2(x, y0 - dy*i));\n            }\n            case \"grid\" : {\n                let [nx,ny] = config.value;\n                let height = bbox[1].y - bbox[0].y;\n                let width  = bbox[1].x - bbox[0].x;\n                let dx = width / nx;\n                let dy = height / ny;\n                let x0 = bbox[0].x + dx / 2;\n                let y0 = bbox[1].y - dy / 2;\n                return range(0, capacity).map(i => {\n                    let x = x0 + dx * (i % nx);\n                    let y = y0 - dy * Math.floor(i / nx);\n                    return V2(x, y);\n                });\n            }\n            case \"vertical\" : {\n                const p_top_center = V2(p_center.x, bbox[1].y);\n                const sizelist = content.map((name) => this.draggables[name]?.diagram_size ?? [0,0]);\n                const size_rects = sizelist.map(([w,h]) => rectangle(w,h).mut());\n                const distributed = distribute_vertical_and_align(size_rects, config.padding).mut()\n                    .move_origin('top-center').position(p_top_center)\n                    .translate(V2(0,-config.padding));\n                return distributed.children.map(d => d.origin);\n            }\n            case \"horizontal\" : {\n                const p_center_left = V2(bbox[0].x, p_center.y);\n                const sizelist = content.map((name) => this.draggables[name]?.diagram_size ?? [0,0]);\n                const size_rects = sizelist.map(([w,h]) => rectangle(w,h).mut());\n                const distributed = distribute_horizontal_and_align(size_rects, config.padding).mut()\n                    .move_origin('center-left').position(p_center_left)\n                    .translate(V2(config.padding,0));\n                return distributed.children.map(d => d.origin);\n            }\n            case \"flex-row\" : {\n                const pad = config.padding ?? 0;\n                const container_width = bbox[1].x - bbox[0].x - 2*pad;\n                const sizelist = content.map((name) => this.draggables[name]?.diagram_size ?? [0,0]);\n                const size_rects = sizelist.map(([w,h]) => rectangle(w,h).mut());\n                let distributed = distribute_variable_row(\n                    size_rects, container_width, pad, pad,\n                    config.vertical_alignment, config.horizontal_alignment\n                ).mut()\n                switch (config.horizontal_alignment){\n                    case 'center' :{\n                        distributed = distributed\n                            .move_origin('top-center').position(V2(p_center.x, bbox[1].y-pad));\n                    } break;\n                    case 'right' : {\n                        distributed = distributed\n                            .move_origin('top-right').position(V2(bbox[1].x-pad, bbox[1].y-pad));\n                    } break;\n                    case 'center':\n                    default: {\n                        distributed = distributed\n                            .move_origin('top-left').position(V2(bbox[0].x+pad, bbox[1].y-pad));\n                    }\n                }\n                return distributed.children.map(d => d.origin);\n            }\n            default : {\n                return [];\n            }\n        }\n    }\n    \n    get_container_content_size(container_name : string) : [number,number] {\n        const container = this.containers[container_name];\n        if (container == undefined) return [NaN, NaN];\n        const pad = (container.config as any).padding ?? 0;\n        const content_diagrams = container.content.map(name => this.draggables[name]?.diagram ?? empty());\n        const [width, height] = size(diagram_combine(...content_diagrams));\n        return [width + 2*pad, height + 2*pad];\n    }\n    \n    private replace_draggable_svg(name : string, diagram : Diagram) {\n        let draggable = this.draggables[name];\n        if (draggable == undefined) return;\n        draggable.svgelement?.remove();\n        draggable.diagram = diagram;\n        draggable.diagram_size = size(diagram);\n        this.add_draggable_svg(name, diagram);\n        this.reposition_container_content(draggable.container)\n    }\n    private replace_container_svg(name : string, diagram : Diagram, capacity? : number, config? : dnd_container_config) {\n        let container = this.containers[name];\n        if (container == undefined) return;\n        container.svgelement?.remove();\n        container.diagram = diagram;\n        if (capacity) container.capacity = capacity;\n        if (config) container.config = config;\n        this.add_container_svg(name, diagram);\n        this.reposition_container_content(name);\n    }\n\n    public add_draggable_to_container(name : string, diagram : Diagram, container_name : string) {\n        if (this.draggables[name] != undefined) {\n            this.replace_draggable_svg(name, diagram);\n            this.move_draggable_to_container(name, container_name, true);\n            return;\n        }\n\n        const diagram_size = size(diagram);\n        this.draggables[name] = {name, diagram : diagram.mut() , diagram_size, position : diagram.origin, container : container_name};\n        this.containers[container_name].content.push(name);\n    }\n\n    public add_draggable_with_container(name : string, diagram : Diagram, container_diagram? : Diagram) {\n        if (this.draggables[name] != undefined) {\n            this.replace_draggable_svg(name, diagram);\n            return;\n        }\n        // add a container as initial container for the draggable\n        let initial_container_name = `_container0_${name}`;\n\n        if (container_diagram == undefined)\n            container_diagram = this.diagram_container_from_draggable(diagram);\n        this.add_container(initial_container_name, container_diagram);\n\n        const diagram_size = size(diagram);\n        this.containers[initial_container_name].content.push(name);\n        this.draggables[name] = {name, diagram : diagram.mut() , diagram_size, position : diagram.origin, container : initial_container_name};\n    }\n    \n    public remove_draggable(name : string) : void {\n        for (let container_name in this.containers) {\n            const container = this.containers[container_name];\n            container.content = container.content.filter(e => e != name);\n        }\n        this.draggables[name].svgelement?.remove();\n        delete this.draggables[name];\n    }\n\n    registerCallback(name : string, callback : (pos : Vector2) => any){\n        this.callbacks[name] = callback;\n    }\n\n    register_dropped_outside_callback(callback : (name : string) => any){\n        this.dropped_outside_callback = callback;\n    }\n    \n    register_move_validation_function(fun: (draggable_name: string, target_name: string) => boolean){\n        this.move_validation_function = fun;\n    }\n\n    setViewBox() {\n        // set viewBox and preserveAspectRatio of control_svg to be the same as diagram_svg\n        this.dnd_svg.setAttribute(\"viewBox\", this.diagram_svg.getAttribute(\"viewBox\") as string);\n        this.dnd_svg.setAttribute(\"preserveAspectRatio\", this.diagram_svg.getAttribute(\"preserveAspectRatio\") as string);\n    }\n    drawSvg(){\n        for (let name in this.containers){\n            if (this.containers[name].svgelement) continue;\n            this.add_container_svg(name, this.containers[name].diagram);\n        }\n        for (let name in this.draggables){\n            if (this.draggables[name].svgelement) continue;\n            this.add_draggable_svg(name, this.draggables[name].diagram);\n        }\n        for (let name in this.containers)\n            this.reposition_container_content(name);\n    }\n\n    getData() : DragAndDropData {\n        let data : DragAndDropData = []\n        for (let name in this.containers){\n            data.push({container : name, content : this.containers[name].content});\n        }\n        return data;\n    }\n\n    setData(data : DragAndDropData) {\n        try {\n            for (let containerdata of data) {\n                for (let content of containerdata.content) {\n                    this.try_move_draggable_to_container(content, containerdata.container, true);\n                }\n            }\n        } catch (_e) {\n            console.error(\"the data is not valid\");\n        }\n    }\n\n    diagram_container_from_draggable(diagram : Diagram) : Diagram {\n        let rect = rectangle_corner(...diagram.bounding_box()).move_origin(diagram.origin);\n        return rect.strokedasharray([5]);\n    }\n\n    add_container_svg(name : string, diagram: Diagram) {\n        let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        f_draw_to_svg(this.dnd_svg, g, diagram.position(V2(0,0)), \n            false, false, calculate_text_scale(this.diagram_svg), dnd_type.container);\n        let position = diagram.origin;\n        g.setAttribute(\"transform\", `translate(${position.x},${-position.y})`)\n        g.setAttribute(\"class\", dnd_type.container);\n        this.dnd_svg.prepend(g);\n\n        this.containers[name].svgelement = g;\n        this.dom_to_id_map.set(g, name);\n    }\n\n    add_draggable_svg(name : string, diagram : Diagram) {\n        let g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        f_draw_to_svg(this.dnd_svg, g, diagram.position(V2(0,0)), true, false, calculate_text_scale(this.diagram_svg), dnd_type.draggable);\n        let position = diagram.origin;\n        g.setAttribute(\"transform\", `translate(${position.x},${-position.y})`)\n        g.setAttribute(\"class\", dnd_type.draggable);\n        g.setAttribute(\"draggable\", \"true\");\n\n        g.onmousedown = (evt) => {\n            this.draggedElementName = name;\n            this.startDrag(evt);\n        }\n        g.ontouchstart = (evt) => {\n            this.draggedElementName = name;\n            this.startDrag(evt);\n        }\n\n        this.dnd_svg.append(g);\n        this.draggables[name].svgelement = g;\n        this.dom_to_id_map.set(g, name);\n    }\n\n    reposition_container_content(container_name : string){\n        let container = this.containers[container_name];\n        if (container == undefined) return;\n        \n        if (this.sort_content){\n            container.content.sort()\n        } else if (container.config?.sorting_function) {\n            container.content.sort(container.config.sorting_function);\n        }\n        const bbox = container.config.custom_region_box ?? container.diagram.bounding_box();\n        const position_map = this.generate_position_map(bbox, container.config, container.capacity, container.content);\n\n        for (let i = 0; i < container.content.length; i++) {\n            let draggable = this.draggables[container.content[i]];\n            let pos = position_map[i] ?? container.diagram.origin;\n            draggable.diagram = draggable.diagram.position(pos);\n            draggable.position = pos;\n            draggable.svgelement?.setAttribute(\"transform\", `translate(${pos.x},${-pos.y})`);\n        }\n    }\n    remove_draggable_from_container(draggable_name : string, container_name : string) {\n        this.containers[container_name].content = \n            this.containers[container_name].content.filter((name) => name != draggable_name);\n    }\n    move_draggable_to_container(draggable_name : string, container_name : string, ignore_callback = false) {\n        let draggable = this.draggables[draggable_name];\n        if (draggable == undefined) return;\n\n        // ignore if the draggable is already in the container\n        if (draggable.container == container_name) return;\n\n        let container = this.containers[container_name];\n        let original_container_name = draggable.container;\n\n        this.remove_draggable_from_container(draggable_name, original_container_name);\n        draggable.container = container_name;\n        container.content.push(draggable_name);\n\n        this.reposition_container_content(container_name);\n        this.reposition_container_content(original_container_name);\n\n        if (ignore_callback) return;\n        let draggedElement = this.draggables[draggable_name];\n        this.callbacks[draggedElement.name](draggedElement.position);\n    }\n\n    try_move_draggable_to_container(draggable_name : string, container_name : string, ignore_callback = false) {\n        if (this.move_validation_function) {\n            const valid = this.move_validation_function(draggable_name, container_name);\n            if (!valid) return;\n        }\n        let draggable = this.draggables[draggable_name];\n        let container = this.containers[container_name];\n        if (container.content.length + 1 <= container.capacity) {\n            this.move_draggable_to_container(draggable_name, container_name, ignore_callback);\n        } else if (container.capacity == 1){\n            // only swap if the container has only 1 capacity\n            // swap\n            let original_container_name = draggable.container;\n            let other_draggable_name = container.content[0];\n            this.move_draggable_to_container(draggable_name, container_name, true);\n            this.move_draggable_to_container(other_draggable_name, original_container_name, ignore_callback);\n        }\n    }\n\n    startDrag(evt : DnDEvent) {\n        if (evt instanceof MouseEvent) { evt.preventDefault(); }\n        if (window.TouchEvent && evt instanceof TouchEvent) { evt.preventDefault(); }\n        this.hoveredContainerName = null;\n\n        // reset container hovered class\n        this.reset_hovered_class();\n        // delete orphaned ghost\n        let ghosts = this.dnd_svg.getElementsByClassName(dnd_type.ghost);\n        for (let i = 0; i < ghosts.length; i++) ghosts[i].remove();\n        \n        // create a clone of the dragged element\n        if (this.draggedElementName == null) return;\n        let draggable = this.draggables[this.draggedElementName];\n        if (draggable.svgelement == undefined) return;\n        draggable.svgelement.classList.add(\"picked\");\n        this.draggedElementGhost = draggable.svgelement.cloneNode(true) as SVGElement;\n        // set pointer-events : none\n        this.draggedElementGhost.style.pointerEvents = \"none\";\n        this.draggedElementGhost.setAttribute(\"opacity\", \"0.5\");\n        this.draggedElementGhost.setAttribute(\"class\", dnd_type.ghost);\n        this.dnd_svg.append(this.draggedElementGhost);\n    }\n\n    get_dnd_element_data_from_evt(evt : DnDEvent) : {name : string, type : string} | null {\n        let element : HTMLElement | null = null;\n        if (window.TouchEvent && evt instanceof TouchEvent) { \n            let evt_touch = evt.touches[0];\n            element = document.elementFromPoint(evt_touch.clientX, evt_touch.clientY) as HTMLElement;\n        } else {\n            const evt_ = evt as MouseEvent\n            element = document.elementFromPoint(evt_.clientX, evt_.clientY) as HTMLElement;\n        }\n        if (element == null) return null;\n\n        if (element.localName == \"tspan\") element = element.parentElement;\n        if (element == null) return null;\n        \n        let dg_tag = element.getAttribute(\"_dg_tag\"); if (dg_tag == null) return null;\n\n        if (dg_tag == dnd_type.container) {\n            let parent = element.parentElement; if (parent == null) return null;\n            let name = this.dom_to_id_map.get(parent); if (name == null) return null;\n            return {name, type : dnd_type.container};\n        }\n        if (dg_tag == dnd_type.draggable) {\n            let parent = element.parentElement; if (parent == null) return null;\n            let name = this.dom_to_id_map.get(parent);  if (name == null) return null;\n            return {name, type : dnd_type.draggable};\n        }\n        return null;\n    }\n\n    drag(evt : DnDEvent) {\n        if (this.draggedElementName == null) return;\n        if (this.draggedElementGhost == null) return;\n        if (evt instanceof MouseEvent) { evt.preventDefault(); }\n        if (window.TouchEvent && evt instanceof TouchEvent) { evt.preventDefault(); }\n\n        this.reset_hovered_class();\n        let element_data = this.get_dnd_element_data_from_evt(evt);\n        if (element_data == null) {\n            this.hoveredContainerName = null;\n        } else if (element_data.type == dnd_type.container) {\n            this.hoveredContainerName = element_data.name;\n            this.containers[element_data.name].svgelement?.classList.add(\"hovered\");\n        } else if (element_data.type == dnd_type.draggable) {\n            this.hoveredContainerName = this.draggables[element_data.name]?.container;\n            this.draggables[element_data.name].svgelement?.classList.add(\"hovered\");\n            // this.containers[this.hoveredContainerName]?.svgelement?.classList.add(\"hovered\");\n        }\n\n        let coord = getMousePosition(evt, this.dnd_svg);\n        this.draggedElementGhost.setAttribute(\"transform\", `translate(${coord.x},${-coord.y})`);\n    }\n\n    endDrag(_evt : DnDEvent) {\n        if (this.hoveredContainerName != null && this.draggedElementName != null){\n            this.try_move_draggable_to_container(this.draggedElementName, this.hoveredContainerName);\n        }\n\n        // if dropped outside of any container\n        if (this.hoveredContainerName == null && this.draggedElementName != null \n            && this.dropped_outside_callback != null){\n            this.dropped_outside_callback(this.draggedElementName);\n        }\n\n        this.draggedElementName = null;\n        this.hoveredContainerName = null;\n        this.reset_hovered_class();\n        this.reset_picked_class();\n\n        if (this.draggedElementGhost != null){\n            this.draggedElementGhost.remove();\n            this.draggedElementGhost = null;\n        }\n    }\n\n    reset_hovered_class(){\n        for (let name in this.containers) {\n            this.containers[name].svgelement?.classList.remove(\"hovered\");\n        }\n        for (let name in this.draggables) {\n            this.draggables[name].svgelement?.classList.remove(\"hovered\");\n        }\n    }\n\n    reset_picked_class(){\n        for (let name in this.draggables) {\n            this.draggables[name].svgelement?.classList.remove(\"picked\");\n        }\n    }\n}\n\nclass ButtonHandler {\n    // callbacks : {[key : string] : (state : boolean) => any} = {};\n    states : {[key : string] : boolean} = {};\n    svg_g_element : {[key : string] : [SVGGElement,SVGGElement,SVGElement|undefined]} = {};\n    touchdownName : string | null = null;\n\n    constructor(public button_svg : SVGSVGElement, public diagram_svg : SVGSVGElement){\n    }\n    \n    remove(name : string){\n        delete this.states[name];\n        const [a, b] = this.svg_g_element[name];\n        a?.remove();\n        b?.remove();\n        delete this.svg_g_element[name];\n    }\n\n    /** add a new toggle button if it doesn't exist, otherwise, update diagrams and callback */\n    try_add_toggle(name : string, diagram_on : Diagram, diagram_off : Diagram, state : boolean, callback : (state : boolean, redraw? : boolean) => any) : setter_function_t {\n        if (this.svg_g_element[name] != undefined) {\n            // delete the old button\n            let [old_svg_on, old_svg_off, _] = this.svg_g_element[name];\n            old_svg_on.remove();\n            old_svg_off.remove();\n        }\n        return this.add_toggle(name, diagram_on, diagram_off, state, callback);\n    }\n\n    add_toggle(name : string, diagram_on : Diagram, diagram_off : Diagram, state : boolean, callback : (state : boolean, redraw? : boolean) => any) : setter_function_t {\n        let g_off = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        f_draw_to_svg(this.button_svg, g_off, diagram_off, true, false, calculate_text_scale(this.diagram_svg));\n        g_off.setAttribute(\"overflow\", \"visible\");\n        g_off.style.cursor = \"pointer\";\n\n        let g_on = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        f_draw_to_svg(this.button_svg, g_on, diagram_on, true, false, calculate_text_scale(this.diagram_svg));\n        g_on.setAttribute(\"overflow\", \"visible\");\n        g_on.style.cursor = \"pointer\";\n\n        this.button_svg.appendChild(g_off);\n        this.button_svg.appendChild(g_on);\n        this.svg_g_element[name] = [g_on, g_off, undefined];\n\n        this.states[name] = state;\n\n        const set_display = (state : boolean) => {\n            g_on.setAttribute(\"display\", state ? \"block\" : \"none\");\n            g_off.setAttribute(\"display\", state ? \"none\" : \"block\");\n        }\n        set_display(this.states[name]);\n\n        const update_state = (state : boolean, redraw : boolean = true) => {\n            this.states[name] = state;\n            callback(this.states[name], redraw);\n            set_display(this.states[name]);\n        }\n\n        g_on.onclick = (e) => { \n            e.preventDefault();\n            update_state(false); \n        };\n        g_off.onclick = (e) => { \n            e.preventDefault();\n            update_state(true); \n        };\n        g_on.ontouchstart = (e) => { \n            e.preventDefault();\n            this.touchdownName = name; \n        };\n        g_off.ontouchstart = (e) => { \n            e.preventDefault();\n            this.touchdownName = name; \n        };\n\n        g_on.ontouchend = () => { \n            if (this.touchdownName == name) update_state(false); \n            this.touchdownName = null;\n        };\n        g_off.ontouchend = () => { \n            if (this.touchdownName == name) update_state(true); \n            this.touchdownName = null;\n        };\n\n        const setter = (state : boolean) => { update_state(state, false); }\n        return setter;\n    }\n\n    /** add a new click button if it doesn't exist, otherwise, update diagrams and callback */\n    try_add_click(\n        name : string, diagram : Diagram, diagram_pressed : Diagram, diagram_hover : Diagram,\n        callback : () => any\n    ){\n        if (this.svg_g_element[name] != undefined) {\n            // delete the old button\n            let [old_svg_normal, old_svg_pressed, old_svg_hover] = this.svg_g_element[name];\n            old_svg_normal.remove();\n            old_svg_pressed.remove();\n            old_svg_hover?.remove();\n        }\n        this.add_click(name, diagram, diagram_pressed, diagram_hover, callback);\n    }\n\n    // TODO: handle touch input moving out of the button\n    add_click(name : string, diagram : Diagram, diagram_pressed : Diagram, diagram_hover : Diagram, callback : () => any){\n        let g_normal = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        f_draw_to_svg(this.button_svg, g_normal, diagram, true, false, calculate_text_scale(this.diagram_svg));\n        g_normal.setAttribute(\"overflow\", \"visible\");\n        g_normal.style.cursor = \"pointer\";\n\n        let g_pressed = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        f_draw_to_svg(this.button_svg, g_pressed, diagram_pressed, true, false, calculate_text_scale(this.diagram_svg));\n        g_pressed.setAttribute(\"overflow\", \"visible\");\n        g_pressed.style.cursor = \"pointer\";\n        \n        let g_hover = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        f_draw_to_svg(this.button_svg, g_hover, diagram_hover, true, false, calculate_text_scale(this.diagram_svg));\n        g_hover.setAttribute(\"overflow\", \"visible\");\n        g_hover.style.cursor = \"pointer\";\n\n        this.button_svg.appendChild(g_normal);\n        this.button_svg.appendChild(g_pressed);\n        this.button_svg.appendChild(g_hover);\n        this.svg_g_element[name] = [g_normal, g_pressed, g_hover];\n\n        const set_display = (pressed : boolean, hovered : boolean) => {\n            g_normal.setAttribute(\"display\", !pressed && !hovered ? \"block\" : \"none\");\n            g_pressed.setAttribute(\"display\", pressed ? \"block\" : \"none\");\n            g_hover.setAttribute(\"display\", hovered && !pressed ? \"block\" : \"none\");\n        }\n        set_display(false, false);\n        let pressed_state = false;\n        let hover_state = false;\n        \n        const update_display = () => {\n            set_display(pressed_state, hover_state);\n        }\n\n        g_normal.onmousedown = (e) => {\n            e.preventDefault();\n            this.touchdownName = name;\n            pressed_state = true;\n            update_display();\n        }\n        g_normal.onmouseup = (e) => {\n            e.preventDefault();\n            this.touchdownName = null;\n        }\n        g_normal.onmouseenter = (_e) => {\n            hover_state = true;\n            update_display();\n        }\n        g_normal.onmouseleave = (_e) => {\n            // hover_state = false;\n            update_display();\n        }\n        g_pressed.onmouseleave = (_e) => { \n            hover_state = false;\n            pressed_state = false;\n            update_display();\n        }\n        g_pressed.onmousedown = (e) => {\n            e.preventDefault();\n            this.touchdownName = name;\n        }\n        g_pressed.onmouseup = (_e) => {\n            if (this.touchdownName == name) callback();\n            this.touchdownName = null;\n            pressed_state = false;\n            update_display();\n        }\n        g_hover.onmousedown = (e) => {\n            e.preventDefault();\n            this.touchdownName = name;\n            pressed_state = true;\n            update_display();\n        }\n        g_hover.onmouseup = (e) => {\n            e.preventDefault();\n            this.touchdownName = null;\n        }\n        g_hover.onmouseleave = (_e) => {\n            hover_state = false;\n            update_display();\n        }\n\n        g_normal.ontouchstart = (e) => { \n            e.preventDefault();\n            this.touchdownName = name; \n            pressed_state = true;\n            update_display();\n        };\n        g_normal.ontouchend = (_e) => {\n            if (this.touchdownName == name) callback();\n            this.touchdownName = null;\n            pressed_state = false;\n            update_display();\n        }\n        g_pressed.ontouchstart = (e) => { \n            e.preventDefault();\n            this.touchdownName = name; \n            pressed_state = true;\n            update_display();\n        };\n        g_pressed.ontouchend = (_e) => {\n            if (this.touchdownName == name) callback();\n            this.touchdownName = null;\n            pressed_state = false;\n            update_display();\n        }\n            \n            \n    }\n        \n}\n","import { Path, Diagram, DiagramType, diagram_combine, } from './diagram.js';\nimport { Vector2, V2, Vdir} from './vector.js';\nimport { linspace, linspace_exc, range } from './utils.js';\nimport { array_repeat } from './utils.js'\nimport { arrow1 } from './shapes.js';\nimport { TAG } from './tag_names.js';\n\ntype modifierFunction = (d : Diagram) => Diagram\n\n/**\n * convert a function that modifies a path of a diagram to a function that modifies a diagram\n * if the diagram is a polygon or curve, the function is applied directly to the diagram\n * if the diagram is a diagram, the function is recursively applied to all children\n * if the diagram is empty or text, the function is not applied\n * @param func function that modifies a path of a diagram\n*/\nfunction function_handle_path_type(func : modifierFunction) : modifierFunction {\n    function modified_func(d : Diagram) : Diagram {\n        if (d.type == DiagramType.Polygon || d.type == DiagramType.Curve ) {\n            // apply directly\n            return func(d);\n        } else if (d.type == DiagramType.Diagram) {\n            // recursively apply to all children\n            d.children = d.children.map(c => modified_func(c));\n            return d;\n        } else if (d.type == DiagramType.Text || d.type == DiagramType.MultilineText) {\n            // do nothing\n            return d;\n        } else {\n            throw new Error(\"Unreachable, unknown diagram type : \" + d.type);\n        }\n    }\n    return modified_func;\n}\n\n\n/**\n * Resample a diagram so that it has `n` points\n * @param n number of points\n * @returns function that modifies a diagram\n */\nexport function resample(n : number) : modifierFunction{\n    // TODO : this function uses Diagram.parametric_point,\n    // which might be slow for large n\n    // for performance reason, we might want to implement it directly by calculating\n    // the points of the path here\n    function func(d : Diagram) : Diagram {\n        if (d.path == undefined) return d;\n        let ts = (d.type == DiagramType.Curve) ? linspace(0, 1, n) : linspace_exc(0, 1, n);\n        let new_points = ts.map(t => d.parametric_point(t));\n        d.path = new Path(new_points);\n        return d;\n    }\n    return function_handle_path_type(func);\n}\n\n/**\n * Subdivide each segment of a diagram into n segments\n * @param n number of segments to subdivide each segment into\n * @returns function that modifies a diagram\n */\nexport function subdivide(n : number = 100) : modifierFunction {\n    function func(d : Diagram) : Diagram {\n        if (d.path == undefined) return d;\n\n        let new_points : Vector2[] = [];\n        for (let i = 0; i < d.path.points.length; i++){\n            let curr_i = i;\n            let next_i = (curr_i + 1) % d.path.points.length;\n            let curr_p = d.path.points[i];\n            let next_p = d.path.points[next_i];\n\n            let xs = linspace(curr_p.x, next_p.x, n+1);\n            let ys = linspace(curr_p.y, next_p.y, n+1);\n            let subdivide_points = xs.map((x,i) => V2(x, ys[i]));\n            // ignore the last point\n            subdivide_points.pop();\n            new_points = new_points.concat(subdivide_points);\n        }\n\n        d.path = new Path(new_points);\n        return d;\n    }\n    return function_handle_path_type(func);\n}\n\n/**\n * Get a slice of a diagram from `t_start` to `t_end`\n * @param t_start starting point of the slice\n * @param t_end ending point of the slice\n * @param n number of points in the slice\n * @returns function that modifies a diagram\n */\nexport function slicepath(t_start : number, t_end : number, n : number = 100) : modifierFunction {\n    if (t_start > t_end) [t_start, t_end] = [t_end, t_start];\n    if (t_start < 0) t_start = 0;\n    if (t_end > 1) t_end = 1;\n\n    let n_total = Math.floor(n / (t_end - t_start));\n    function func(d : Diagram) : Diagram {\n        if (d.path == undefined) return d;\n        let dnew = d.apply(resample(n_total));\n        if (dnew.path == undefined) return d;\n        // take slice of the path\n        let new_points = dnew.path.points.slice(\n            Math.floor(t_start * n_total),\n            Math.floor(t_end * n_total) + 1\n        );\n        dnew.path = new Path(new_points);\n        return dnew;\n    }\n    return function_handle_path_type(func);\n}\n\n\nfunction get_round_corner_arc_points(radius : number, points : [Vector2,Vector2,Vector2], count : number) : Vector2[] {\n    let [p1, p2, p3] = points;\n\n    let v1 = p1.sub(p2).normalize();\n    let v3 = p3.sub(p2).normalize();\n    let corner_angle = Math.abs((v1.angle() - v3.angle()) % Math.PI);\n    let s_dist  = radius/Math.tan(corner_angle/2);\n\n    // s_dist can only be as long as half the distance to the closest point\n    let d1 = p1.sub(p2).length();\n    let d3 = p3.sub(p2).length();\n    // recalculate\n    s_dist = Math.min(s_dist, d1/2, d3/2);\n    radius = s_dist * Math.tan(corner_angle/2);\n\n    let pa = p2.add(v1.scale(s_dist));\n    let pb = p2.add(v3.scale(s_dist));\n    let distc = Math.sqrt(radius*radius + s_dist*s_dist);\n    let pc = p2.add(\n        v1.add(v3).normalize().scale(distc)\n    );\n\n    let angle_a = pa.sub(pc).angle();\n    let angle_b = pb.sub(pc).angle();\n    // if we just use angle_a and angle_b as is, the arc might be drawn in the wrong direction\n    // find out which direction is the correct one\n    // check whether angle_a is closer to angle_b, angle_b + 2π, or angle_b - 2π\n    let angle_b_plus  = angle_b + 2*Math.PI;\n    let angle_b_minus = angle_b - 2*Math.PI;\n    let angle_a_b       = Math.abs(angle_a - angle_b);\n    let angle_a_b_plus  = Math.abs(angle_a - angle_b_plus);\n    let angle_a_b_minus = Math.abs(angle_a - angle_b_minus);\n    if (angle_a_b_plus < angle_a_b)  angle_b = angle_b_plus;\n    if (angle_a_b_minus < angle_a_b) angle_b = angle_b_minus;\n\n    let arc_points = linspace(angle_a, angle_b, count).map(a => pc.add(Vdir(a).scale(radius)));\n    return arc_points;\n}\n\n/**\n * Create a function that modifies a diagram by rounding the corners of a polygon or curve\n * @param radius radius of the corner\n * @param point_indices indices of the points to be rounded\n * @returns function that modifies a diagram\n *\n * @example\n * ```javascript\n * let s = square(5).apply(mod.round_corner(2, [0,2]))\n * ```\n */\nexport function round_corner(radius : number | number[] =  1, point_indices? : number[], count : number = 40) : modifierFunction {\n    // if radius is 0, return the identity function\n    if (radius == 0) return (d) => d;\n    \n    // if radius is a number, create an array of length one\n    if (typeof radius == \"number\") radius = [radius];\n\n    // create a function that modify the path of a diagram, (only works for polygon and curve)\n    // later we will convert it to a function that modifies any diagram using function_handle_path_type\n    function func(d : Diagram) : Diagram {\n        if (d.path == undefined) return d;\n        let diagram_point_indices = range(0, d.path.points.length);\n        if (point_indices == undefined) point_indices = diagram_point_indices;\n\n        // filter only the points that are in diagram_point_indices\n        point_indices = point_indices.filter(i => diagram_point_indices.includes(i));\n        // repeat the radius array to match the number of points\n        radius = array_repeat(radius as number[], point_indices.length);\n\n        let new_points : Vector2[] = [];\n        for (let i = 0; i < d.path.points.length; i++){\n            let curr_i = i;\n            if (!point_indices.includes(curr_i)) {\n                new_points.push(d.path.points[i]);\n                continue;\n            }\n            let prev_i = (curr_i - 1 + d.path.points.length) % d.path.points.length;\n            let next_i = (curr_i + 1) % d.path.points.length;\n            let prev_p = d.path.points[prev_i];\n            let curr_p = d.path.points[i];\n            let next_p = d.path.points[next_i];\n            let arc_points = get_round_corner_arc_points(\n                radius[point_indices.indexOf(curr_i)], [prev_p, curr_p, next_p], count);\n            new_points = new_points.concat(arc_points);\n        }\n\n        d.path = new Path(new_points);\n        return d;\n    }\n    return function_handle_path_type(func);\n}\n\n\n/**\n * Add an arrow to the end of a curve\n * Make sure the diagram this modifier is applied to is a curve\n * @param headsize size of the arrow head\n * @param flip flip the arrow position\n */\nexport function add_arrow(headsize : number, flip = false) : modifierFunction {\n    function func(c : Diagram) : Diagram {\n        if (c.path == undefined) return c;\n        let p1 = flip ? c.path.points[0] : c.path.points[c.path.points.length - 1];\n        let p0 = flip ? c.path.points[1] : c.path.points[c.path.points.length - 2];\n        let arrow = arrow1(p0, p1, headsize);\n        return diagram_combine(c, arrow).clone_style_from(c);\n    }\n    return function_handle_path_type(func);\n}\n\nfunction arrowhead_angle(d : Diagram) : number {\n    if (!d.contain_tag(TAG.ARROW_HEAD)) return NaN;\n    let points = d.path?.points\n    if (points == undefined) return NaN;\n    if (points.length != 3) return NaN;\n    let v_tip   = points[0];\n    let v_base1 = points[1];\n    let v_base2 = points[2];\n    let v_base  = v_base1.add(v_base2).scale(0.5)\n    let v_dir   = v_tip.sub(v_base);\n    return v_dir.angle();\n}\n\n/**\n* Replace arrowhead inside a diagram with another diagram\n* @param new_arrowhead diagram to replace the arrowhead with\n* The arrow will be rotated automatically,\n* The default direction is to the right (+x) with the tip at the origin\n*/\nexport function arrowhead_replace(new_arrowhead : Diagram) : modifierFunction {\n    return function func(d : Diagram) : Diagram {\n        return d.apply_to_tagged_recursive(TAG.ARROW_HEAD, (arrowhead : Diagram) => {\n            let angle = arrowhead_angle(arrowhead);\n            return new_arrowhead.copy().rotate(angle).position(arrowhead.origin);\n        })\n    }\n}\n","//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.cm\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\nvar AlongIntersection;\n(function (AlongIntersection) {\n    AlongIntersection[AlongIntersection[\"BeforeStart\"] = 0] = \"BeforeStart\";\n    AlongIntersection[AlongIntersection[\"EqualStart\"] = 1] = \"EqualStart\";\n    AlongIntersection[AlongIntersection[\"BetweenStartAndEnd\"] = 2] = \"BetweenStartAndEnd\";\n    AlongIntersection[AlongIntersection[\"EqualEnd\"] = 3] = \"EqualEnd\";\n    AlongIntersection[AlongIntersection[\"AfterEnd\"] = 4] = \"AfterEnd\";\n})(AlongIntersection || (AlongIntersection = {}));\nclass Geometry {\n    pointsSame(p1, p2) {\n        return this.pointsSameX(p1, p2) && this.pointsSameY(p1, p2);\n    }\n    pointsCompare(p1, p2) {\n        // returns -1 if p1 is smaller, 1 if p2 is smaller, 0 if equal\n        if (this.pointsSameX(p1, p2)) {\n            return this.pointsSameY(p1, p2) ? 0 : p1[1] < p2[1] ? -1 : 1;\n        }\n        return p1[0] < p2[0] ? -1 : 1;\n    }\n}\nclass GeometryEpsilon extends Geometry {\n    constructor(epsilon = 0.0000000001) {\n        super();\n        this.epsilon = epsilon;\n    }\n    pointAboveOrOnLine(p, left, right) {\n        const Ax = left[0];\n        const Ay = left[1];\n        const Bx = right[0];\n        const By = right[1];\n        const Cx = p[0];\n        const Cy = p[1];\n        return (Bx - Ax) * (Cy - Ay) - (By - Ay) * (Cx - Ax) >= -this.epsilon;\n    }\n    pointBetween(p, left, right) {\n        // p must be collinear with left->right\n        // returns false if p == left, p == right, or left == right\n        const d_py_ly = p[1] - left[1];\n        const d_rx_lx = right[0] - left[0];\n        const d_px_lx = p[0] - left[0];\n        const d_ry_ly = right[1] - left[1];\n        const dot = d_px_lx * d_rx_lx + d_py_ly * d_ry_ly;\n        // if `dot` is 0, then `p` == `left` or `left` == `right` (reject)\n        // if `dot` is less than 0, then `p` is to the left of `left` (reject)\n        if (dot < this.epsilon) {\n            return false;\n        }\n        const sqlen = d_rx_lx * d_rx_lx + d_ry_ly * d_ry_ly;\n        // if `dot` > `sqlen`, then `p` is to the right of `right` (reject)\n        // therefore, if `dot - sqlen` is greater than 0, then `p` is to the right\n        // of `right` (reject)\n        if (dot - sqlen > -this.epsilon) {\n            return false;\n        }\n        return true;\n    }\n    pointsSameX(p1, p2) {\n        return Math.abs(p1[0] - p2[0]) < this.epsilon;\n    }\n    pointsSameY(p1, p2) {\n        return Math.abs(p1[1] - p2[1]) < this.epsilon;\n    }\n    pointsCollinear(p1, p2, p3) {\n        // does pt1->pt2->pt3 make a straight line?\n        // essentially this is just checking to see if\n        //   slope(pt1->pt2) === slope(pt2->pt3)\n        // if slopes are equal, then they must be collinear, because they share pt2\n        const dx1 = p1[0] - p2[0];\n        const dy1 = p1[1] - p2[1];\n        const dx2 = p2[0] - p3[0];\n        const dy2 = p2[1] - p3[1];\n        return Math.abs(dx1 * dy2 - dx2 * dy1) < this.epsilon;\n    }\n    linesIntersect(aStart, aEnd, bStart, bEnd) {\n        // returns null if the lines are coincident (e.g., parallel or on top of\n        // each other)\n        //\n        // returns an object if the lines intersect:\n        //   {\n        //     p: [x, y],    where the intersection point is at\n        //     alongA: where intersection point is along A,\n        //     alongB: where intersection point is along B\n        //   }\n        //\n        // alongA and alongB will each be one of AlongIntersection, depending on\n        // where the intersection point is along the A and B lines\n        //\n        const adx = aEnd[0] - aStart[0];\n        const ady = aEnd[1] - aStart[1];\n        const bdx = bEnd[0] - bStart[0];\n        const bdy = bEnd[1] - bStart[1];\n        const axb = adx * bdy - ady * bdx;\n        if (Math.abs(axb) < this.epsilon) {\n            return null; // lines are coincident\n        }\n        const dx = aStart[0] - bStart[0];\n        const dy = aStart[1] - bStart[1];\n        const A = (bdx * dy - bdy * dx) / axb;\n        const B = (adx * dy - ady * dx) / axb;\n        // categorizes where along the line the intersection point is at\n        const categorize = (v) => v <= -this.epsilon\n            ? AlongIntersection.BeforeStart\n            : v < this.epsilon\n                ? AlongIntersection.EqualStart\n                : v - 1 <= -this.epsilon\n                    ? AlongIntersection.BetweenStartAndEnd\n                    : v - 1 < this.epsilon\n                        ? AlongIntersection.EqualEnd\n                        : AlongIntersection.AfterEnd;\n        const p = [aStart[0] + A * adx, aStart[1] + A * ady];\n        return {\n            alongA: categorize(A),\n            alongB: categorize(B),\n            p,\n        };\n    }\n}\n\n//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.cm\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\nclass List {\n    constructor() {\n        this.nodes = [];\n    }\n    remove(node) {\n        const i = this.nodes.indexOf(node);\n        if (i >= 0) {\n            this.nodes.splice(i, 1);\n        }\n    }\n    getIndex(node) {\n        return this.nodes.indexOf(node);\n    }\n    isEmpty() {\n        return this.nodes.length <= 0;\n    }\n    getHead() {\n        return this.nodes[0];\n    }\n    removeHead() {\n        this.nodes.shift();\n    }\n    insertBefore(node, check) {\n        this.findTransition(node, check).insert(node);\n    }\n    findTransition(node, check) {\n        var _a, _b;\n        // bisect to find the transition point\n        const compare = (a, b) => check(b) - check(a);\n        let i = 0;\n        let high = this.nodes.length;\n        while (i < high) {\n            const mid = (i + high) >> 1;\n            if (compare(this.nodes[mid], node) > 0) {\n                high = mid;\n            }\n            else {\n                i = mid + 1;\n            }\n        }\n        return {\n            before: i <= 0 ? null : (_a = this.nodes[i - 1]) !== null && _a !== void 0 ? _a : null,\n            after: (_b = this.nodes[i]) !== null && _b !== void 0 ? _b : null,\n            insert: (node) => {\n                this.nodes.splice(i, 0, node);\n                return node;\n            },\n        };\n    }\n}\n\n//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.cm\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\nclass Segment {\n    constructor(start, end, copyMyFill, log) {\n        var _a;\n        this.otherFill = null;\n        this.id = (_a = log === null || log === void 0 ? void 0 : log.segmentId()) !== null && _a !== void 0 ? _a : -1;\n        this.start = start;\n        this.end = end;\n        this.myFill = {\n            above: copyMyFill ? copyMyFill.myFill.above : null,\n            below: copyMyFill ? copyMyFill.myFill.below : null,\n        };\n    }\n}\nclass Event {\n    constructor(isStart, p, seg, primary) {\n        this.status = null;\n        this.isStart = isStart;\n        this.p = p;\n        this.seg = seg;\n        this.primary = primary;\n    }\n}\nclass Intersecter {\n    constructor(selfIntersection, geo, log = null) {\n        this.events = new List();\n        this.status = new List();\n        this.selfIntersection = selfIntersection;\n        this.geo = geo;\n        this.log = log;\n    }\n    compareEvents(p1_isStart, p1_1, p1_2, p2_isStart, p2_1, p2_2) {\n        // compare the selected points first\n        const comp = this.geo.pointsCompare(p1_1, p2_1);\n        if (comp !== 0) {\n            return comp;\n        }\n        // the selected points are the same\n        if (this.geo.pointsSame(p1_2, p2_2)) {\n            // if the non-selected points are the same too...\n            return 0; // then the segments are equal\n        }\n        if (p1_isStart !== p2_isStart) {\n            // if one is a start and the other isn't...\n            return p1_isStart ? 1 : -1; // favor the one that isn't the start\n        }\n        // otherwise, we'll have to calculate which one is below the other manually\n        return this.geo.pointAboveOrOnLine(p1_2, p2_isStart ? p2_1 : p2_2, // order matters\n        p2_isStart ? p2_2 : p2_1)\n            ? 1\n            : -1;\n    }\n    addEvent(ev) {\n        this.events.insertBefore(ev, (here) => {\n            if (here === ev) {\n                return 0;\n            }\n            return this.compareEvents(ev.isStart, ev.p, ev.other.p, here.isStart, here.p, here.other.p);\n        });\n    }\n    divideEvent(ev, p) {\n        var _a;\n        const ns = new Segment(p, ev.seg.end, ev.seg, this.log);\n        // slides an end backwards\n        //   (start)------------(end)    to:\n        //   (start)---(end)\n        (_a = this.log) === null || _a === void 0 ? void 0 : _a.segmentChop(ev.seg, p);\n        this.events.remove(ev.other);\n        ev.seg.end = p;\n        ev.other.p = p;\n        this.addEvent(ev.other);\n        return this.addSegment(ns, ev.primary);\n    }\n    newSegment(p1, p2) {\n        const forward = this.geo.pointsCompare(p1, p2);\n        if (forward === 0) {\n            // points are equal, so we have a zero-length segment\n            return null; // skip it\n        }\n        return forward < 0\n            ? new Segment(p1, p2, null, this.log)\n            : new Segment(p2, p1, null, this.log);\n    }\n    addSegment(seg, primary) {\n        const evStart = new Event(true, seg.start, seg, primary);\n        const evEnd = new Event(false, seg.end, seg, primary);\n        evStart.other = evEnd;\n        evEnd.other = evStart;\n        this.addEvent(evStart);\n        this.addEvent(evEnd);\n        return evStart;\n    }\n    addRegion(region) {\n        // regions are a list of points:\n        //  [ [0, 0], [100, 0], [50, 100] ]\n        // you can add multiple regions before running calculate\n        let pt1;\n        let pt2 = region[region.length - 1];\n        for (let i = 0; i < region.length; i++) {\n            pt1 = pt2;\n            pt2 = region[i];\n            const seg = this.newSegment(pt1, pt2);\n            if (seg) {\n                this.addSegment(seg, true);\n            }\n        }\n    }\n    compareStatus(ev1, ev2) {\n        const a1 = ev1.seg.start;\n        const a2 = ev1.seg.end;\n        const b1 = ev2.seg.start;\n        const b2 = ev2.seg.end;\n        if (this.geo.pointsCollinear(a1, b1, b2)) {\n            if (this.geo.pointsCollinear(a2, b1, b2)) {\n                return 1;\n            }\n            return this.geo.pointAboveOrOnLine(a2, b1, b2) ? 1 : -1;\n        }\n        return this.geo.pointAboveOrOnLine(a1, b1, b2) ? 1 : -1;\n    }\n    statusFindSurrounding(ev) {\n        return this.status.findTransition(ev, (here) => {\n            if (here === ev) {\n                return 0;\n            }\n            return -this.compareStatus(ev, here);\n        });\n    }\n    checkIntersection(ev1, ev2) {\n        var _a;\n        // returns the segment equal to ev1, or null if nothing equal\n        const seg1 = ev1.seg;\n        const seg2 = ev2.seg;\n        const a1 = seg1.start;\n        const a2 = seg1.end;\n        const b1 = seg2.start;\n        const b2 = seg2.end;\n        (_a = this.log) === null || _a === void 0 ? void 0 : _a.checkIntersection(seg1, seg2);\n        const i = this.geo.linesIntersect(a1, a2, b1, b2);\n        if (i === null) {\n            // segments are parallel or coincident\n            // if points aren't collinear, then the segments are parallel, so no\n            // intersections\n            if (!this.geo.pointsCollinear(a1, a2, b1)) {\n                return null;\n            }\n            // otherwise, segments are on top of each other somehow (aka coincident)\n            if (this.geo.pointsSame(a1, b2) || this.geo.pointsSame(a2, b1)) {\n                return null; // segments touch at endpoints... no intersection\n            }\n            const a1_equ_b1 = this.geo.pointsSame(a1, b1);\n            const a2_equ_b2 = this.geo.pointsSame(a2, b2);\n            if (a1_equ_b1 && a2_equ_b2) {\n                return ev2; // segments are exactly equal\n            }\n            const a1_between = !a1_equ_b1 && this.geo.pointBetween(a1, b1, b2);\n            const a2_between = !a2_equ_b2 && this.geo.pointBetween(a2, b1, b2);\n            if (a1_equ_b1) {\n                if (a2_between) {\n                    //  (a1)---(a2)\n                    //  (b1)----------(b2)\n                    this.divideEvent(ev2, a2);\n                }\n                else {\n                    //  (a1)----------(a2)\n                    //  (b1)---(b2)\n                    this.divideEvent(ev1, b2);\n                }\n                return ev2;\n            }\n            else if (a1_between) {\n                if (!a2_equ_b2) {\n                    // make a2 equal to b2\n                    if (a2_between) {\n                        //         (a1)---(a2)\n                        //  (b1)-----------------(b2)\n                        this.divideEvent(ev2, a2);\n                    }\n                    else {\n                        //         (a1)----------(a2)\n                        //  (b1)----------(b2)\n                        this.divideEvent(ev1, b2);\n                    }\n                }\n                //         (a1)---(a2)\n                //  (b1)----------(b2)\n                this.divideEvent(ev2, a1);\n            }\n        }\n        else {\n            // otherwise, lines intersect at i.p, which may or may not be between the\n            // endpoints\n            // is A divided between its endpoints? (exclusive)\n            if (i.alongA === AlongIntersection.BetweenStartAndEnd) {\n                if (i.alongB === AlongIntersection.EqualStart) {\n                    this.divideEvent(ev1, b1);\n                }\n                else if (i.alongB === AlongIntersection.BetweenStartAndEnd) {\n                    this.divideEvent(ev1, i.p);\n                }\n                else if (i.alongB === AlongIntersection.EqualEnd) {\n                    this.divideEvent(ev1, b2);\n                }\n            }\n            // is B divided between its endpoints? (exclusive)\n            if (i.alongB === AlongIntersection.BetweenStartAndEnd) {\n                if (i.alongA === AlongIntersection.EqualStart) {\n                    this.divideEvent(ev2, a1);\n                }\n                else if (i.alongA === AlongIntersection.BetweenStartAndEnd) {\n                    this.divideEvent(ev2, i.p);\n                }\n                else if (i.alongA === AlongIntersection.EqualEnd) {\n                    this.divideEvent(ev2, a2);\n                }\n            }\n        }\n        return null;\n    }\n    calculate(primaryPolyInverted, secondaryPolyInverted) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const segments = [];\n        while (!this.events.isEmpty()) {\n            const ev = this.events.getHead();\n            (_a = this.log) === null || _a === void 0 ? void 0 : _a.vert(ev.p[0]);\n            if (ev.isStart) {\n                (_b = this.log) === null || _b === void 0 ? void 0 : _b.segmentNew(ev.seg, ev.primary);\n                const surrounding = this.statusFindSurrounding(ev);\n                const above = surrounding.before;\n                const below = surrounding.after;\n                (_c = this.log) === null || _c === void 0 ? void 0 : _c.tempStatus(ev.seg, above ? above.seg : false, below ? below.seg : false);\n                const checkBothIntersections = () => {\n                    if (above) {\n                        const eve = this.checkIntersection(ev, above);\n                        if (eve) {\n                            return eve;\n                        }\n                    }\n                    if (below) {\n                        return this.checkIntersection(ev, below);\n                    }\n                    return null;\n                };\n                const eve = checkBothIntersections();\n                if (eve) {\n                    // ev and eve are equal\n                    // we'll keep eve and throw away ev\n                    // merge ev.seg's fill information into eve.seg\n                    if (this.selfIntersection) {\n                        let toggle; // are we a toggling edge?\n                        if (ev.seg.myFill.below === null) {\n                            toggle = true;\n                        }\n                        else {\n                            toggle = ev.seg.myFill.above !== ev.seg.myFill.below;\n                        }\n                        // merge two segments that belong to the same polygon\n                        // think of this as sandwiching two segments together, where\n                        // `eve.seg` is the bottom -- this will cause the above fill flag to\n                        // toggle\n                        if (toggle) {\n                            eve.seg.myFill.above = !eve.seg.myFill.above;\n                        }\n                    }\n                    else {\n                        // merge two segments that belong to different polygons\n                        // each segment has distinct knowledge, so no special logic is\n                        // needed\n                        // note that this can only happen once per segment in this phase,\n                        // because we are guaranteed that all self-intersections are gone\n                        eve.seg.otherFill = ev.seg.myFill;\n                    }\n                    (_d = this.log) === null || _d === void 0 ? void 0 : _d.segmentUpdate(eve.seg);\n                    this.events.remove(ev.other);\n                    this.events.remove(ev);\n                }\n                if (this.events.getHead() !== ev) {\n                    // something was inserted before us in the event queue, so loop back\n                    // around and process it before continuing\n                    (_e = this.log) === null || _e === void 0 ? void 0 : _e.rewind(ev.seg);\n                    continue;\n                }\n                //\n                // calculate fill flags\n                //\n                if (this.selfIntersection) {\n                    let toggle; // are we a toggling edge?\n                    if (ev.seg.myFill.below === null) {\n                        // if we are a new segment...\n                        // then we toggle\n                        toggle = true;\n                    }\n                    else {\n                        // we are a segment that has previous knowledge from a division\n                        // calculate toggle\n                        toggle = ev.seg.myFill.above !== ev.seg.myFill.below;\n                    }\n                    // next, calculate whether we are filled below us\n                    if (!below) {\n                        // if nothing is below us...\n                        // we are filled below us if the polygon is inverted\n                        ev.seg.myFill.below = primaryPolyInverted;\n                    }\n                    else {\n                        // otherwise, we know the answer -- it's the same if whatever is\n                        // below us is filled above it\n                        ev.seg.myFill.below = below.seg.myFill.above;\n                    }\n                    // since now we know if we're filled below us, we can calculate\n                    // whether we're filled above us by applying toggle to whatever is\n                    // below us\n                    if (toggle) {\n                        ev.seg.myFill.above = !ev.seg.myFill.below;\n                    }\n                    else {\n                        ev.seg.myFill.above = ev.seg.myFill.below;\n                    }\n                }\n                else {\n                    // now we fill in any missing transition information, since we are\n                    // all-knowing at this point\n                    if (ev.seg.otherFill === null) {\n                        // if we don't have other information, then we need to figure out if\n                        // we're inside the other polygon\n                        let inside;\n                        if (!below) {\n                            // if nothing is below us, then we're inside if the other polygon\n                            // is inverted\n                            inside = ev.primary ? secondaryPolyInverted : primaryPolyInverted;\n                        }\n                        else {\n                            // otherwise, something is below us\n                            // so copy the below segment's other polygon's above\n                            if (ev.primary === below.primary) {\n                                if (below.seg.otherFill === null) {\n                                    throw new Error(\"otherFill is null\");\n                                }\n                                inside = below.seg.otherFill.above;\n                            }\n                            else {\n                                inside = below.seg.myFill.above;\n                            }\n                        }\n                        ev.seg.otherFill = {\n                            above: inside,\n                            below: inside,\n                        };\n                    }\n                }\n                (_f = this.log) === null || _f === void 0 ? void 0 : _f.status(ev.seg, above ? above.seg : false, below ? below.seg : false);\n                // insert the status and remember it for later removal\n                ev.other.status = surrounding.insert(ev);\n            }\n            else {\n                // end\n                const st = ev.status;\n                if (st === null) {\n                    throw new Error(\"PolyBool: Zero-length segment detected; your epsilon is \" +\n                        \"probably too small or too large\");\n                }\n                // removing the status will create two new adjacent edges, so we'll need\n                // to check for those\n                const i = this.status.getIndex(st);\n                if (i > 0 && i < this.status.nodes.length - 1) {\n                    const before = this.status.nodes[i - 1];\n                    const after = this.status.nodes[i + 1];\n                    this.checkIntersection(before, after);\n                }\n                (_g = this.log) === null || _g === void 0 ? void 0 : _g.statusRemove(st.seg);\n                // remove the status\n                this.status.remove(st);\n                // if we've reached this point, we've calculated everything there is to\n                // know, so save the segment for reporting\n                if (!ev.primary) {\n                    // make sure `seg.myFill` actually points to the primary polygon\n                    // though\n                    if (!ev.seg.otherFill) {\n                        throw new Error(\"otherFill is null\");\n                    }\n                    const s = ev.seg.myFill;\n                    ev.seg.myFill = ev.seg.otherFill;\n                    ev.seg.otherFill = s;\n                }\n                segments.push(ev.seg);\n            }\n            // remove the event and continue\n            this.events.removeHead();\n        }\n        (_h = this.log) === null || _h === void 0 ? void 0 : _h.done();\n        return segments;\n    }\n}\n\n//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.cm\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\n//\n// filter a list of segments based on boolean operations\n//\nfunction select(segments, selection, log) {\n    const result = [];\n    for (const seg of segments) {\n        const index = (seg.myFill.above ? 8 : 0) +\n            (seg.myFill.below ? 4 : 0) +\n            (seg.otherFill && seg.otherFill.above ? 2 : 0) +\n            (seg.otherFill && seg.otherFill.below ? 1 : 0);\n        if (selection[index] !== 0) {\n            // copy the segment to the results, while also calculating the fill status\n            const keep = new Segment(seg.start, seg.end, null, log);\n            keep.myFill.above = selection[index] === 1; // 1 if filled above\n            keep.myFill.below = selection[index] === 2; // 2 if filled below\n            result.push(keep);\n        }\n    }\n    log === null || log === void 0 ? void 0 : log.selected(result);\n    return result;\n}\nclass SegmentSelector {\n    static union(segments, log) {\n        // primary | secondary\n        // above1 below1 above2 below2    Keep?               Value\n        //    0      0      0      0   =>   no                  0\n        //    0      0      0      1   =>   yes filled below    2\n        //    0      0      1      0   =>   yes filled above    1\n        //    0      0      1      1   =>   no                  0\n        //    0      1      0      0   =>   yes filled below    2\n        //    0      1      0      1   =>   yes filled below    2\n        //    0      1      1      0   =>   no                  0\n        //    0      1      1      1   =>   no                  0\n        //    1      0      0      0   =>   yes filled above    1\n        //    1      0      0      1   =>   no                  0\n        //    1      0      1      0   =>   yes filled above    1\n        //    1      0      1      1   =>   no                  0\n        //    1      1      0      0   =>   no                  0\n        //    1      1      0      1   =>   no                  0\n        //    1      1      1      0   =>   no                  0\n        //    1      1      1      1   =>   no                  0\n        return select(segments, [0, 2, 1, 0, 2, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], log);\n    }\n    static intersect(segments, log) {\n        // primary & secondary\n        // above1 below1 above2 below2    Keep?               Value\n        //    0      0      0      0   =>   no                  0\n        //    0      0      0      1   =>   no                  0\n        //    0      0      1      0   =>   no                  0\n        //    0      0      1      1   =>   no                  0\n        //    0      1      0      0   =>   no                  0\n        //    0      1      0      1   =>   yes filled below    2\n        //    0      1      1      0   =>   no                  0\n        //    0      1      1      1   =>   yes filled below    2\n        //    1      0      0      0   =>   no                  0\n        //    1      0      0      1   =>   no                  0\n        //    1      0      1      0   =>   yes filled above    1\n        //    1      0      1      1   =>   yes filled above    1\n        //    1      1      0      0   =>   no                  0\n        //    1      1      0      1   =>   yes filled below    2\n        //    1      1      1      0   =>   yes filled above    1\n        //    1      1      1      1   =>   no                  0\n        return select(segments, [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 1, 1, 0, 2, 1, 0], log);\n    }\n    static difference(segments, log) {\n        // primary - secondary\n        // above1 below1 above2 below2    Keep?               Value\n        //    0      0      0      0   =>   no                  0\n        //    0      0      0      1   =>   no                  0\n        //    0      0      1      0   =>   no                  0\n        //    0      0      1      1   =>   no                  0\n        //    0      1      0      0   =>   yes filled below    2\n        //    0      1      0      1   =>   no                  0\n        //    0      1      1      0   =>   yes filled below    2\n        //    0      1      1      1   =>   no                  0\n        //    1      0      0      0   =>   yes filled above    1\n        //    1      0      0      1   =>   yes filled above    1\n        //    1      0      1      0   =>   no                  0\n        //    1      0      1      1   =>   no                  0\n        //    1      1      0      0   =>   no                  0\n        //    1      1      0      1   =>   yes filled above    1\n        //    1      1      1      0   =>   yes filled below    2\n        //    1      1      1      1   =>   no                  0\n        return select(segments, [0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 1, 2, 0], log);\n    }\n    static differenceRev(segments, log) {\n        // secondary - primary\n        // above1 below1 above2 below2    Keep?               Value\n        //    0      0      0      0   =>   no                  0\n        //    0      0      0      1   =>   yes filled below    2\n        //    0      0      1      0   =>   yes filled above    1\n        //    0      0      1      1   =>   no                  0\n        //    0      1      0      0   =>   no                  0\n        //    0      1      0      1   =>   no                  0\n        //    0      1      1      0   =>   yes filled above    1\n        //    0      1      1      1   =>   yes filled above    1\n        //    1      0      0      0   =>   no                  0\n        //    1      0      0      1   =>   yes filled below    2\n        //    1      0      1      0   =>   no                  0\n        //    1      0      1      1   =>   yes filled below    2\n        //    1      1      0      0   =>   no                  0\n        //    1      1      0      1   =>   no                  0\n        //    1      1      1      0   =>   no                  0\n        //    1      1      1      1   =>   no                  0\n        return select(segments, [0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 0, 2, 0, 0, 0, 0], log);\n    }\n    static xor(segments, log) {\n        // primary ^ secondary\n        // above1 below1 above2 below2    Keep?               Value\n        //    0      0      0      0   =>   no                  0\n        //    0      0      0      1   =>   yes filled below    2\n        //    0      0      1      0   =>   yes filled above    1\n        //    0      0      1      1   =>   no                  0\n        //    0      1      0      0   =>   yes filled below    2\n        //    0      1      0      1   =>   no                  0\n        //    0      1      1      0   =>   no                  0\n        //    0      1      1      1   =>   yes filled above    1\n        //    1      0      0      0   =>   yes filled above    1\n        //    1      0      0      1   =>   no                  0\n        //    1      0      1      0   =>   no                  0\n        //    1      0      1      1   =>   yes filled below    2\n        //    1      1      0      0   =>   no                  0\n        //    1      1      0      1   =>   yes filled above    1\n        //    1      1      1      0   =>   yes filled below    2\n        //    1      1      1      1   =>   no                  0\n        return select(segments, [0, 2, 1, 0, 2, 0, 0, 1, 1, 0, 0, 2, 0, 1, 2, 0], log);\n    }\n}\n\n//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.cm\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\n//\n// converts a list of segments into a list of regions, while also removing\n// unnecessary verticies\n//\nfunction SegmentChainer(segments, geo, log) {\n    const chains = [];\n    const regions = [];\n    for (const seg of segments) {\n        const pt1 = seg.start;\n        const pt2 = seg.end;\n        if (geo.pointsSame(pt1, pt2)) {\n            console.warn(\"PolyBool: Warning: Zero-length segment detected; your epsilon is \" +\n                \"probably too small or too large\");\n            continue;\n        }\n        log === null || log === void 0 ? void 0 : log.chainStart(seg);\n        // search for two chains that this segment matches\n        const first_match = {\n            index: 0,\n            matches_head: false,\n            matches_pt1: false,\n        };\n        const second_match = {\n            index: 0,\n            matches_head: false,\n            matches_pt1: false,\n        };\n        let next_match = first_match;\n        function setMatch(index, matches_head, matches_pt1) {\n            // return true if we've matched twice\n            if (next_match) {\n                next_match.index = index;\n                next_match.matches_head = matches_head;\n                next_match.matches_pt1 = matches_pt1;\n            }\n            if (next_match === first_match) {\n                next_match = second_match;\n                return false;\n            }\n            next_match = null;\n            return true; // we've matched twice, we're done here\n        }\n        for (let i = 0; i < chains.length; i++) {\n            const chain = chains[i];\n            const head = chain[0];\n            const tail = chain[chain.length - 1];\n            if (geo.pointsSame(head, pt1)) {\n                if (setMatch(i, true, true)) {\n                    break;\n                }\n            }\n            else if (geo.pointsSame(head, pt2)) {\n                if (setMatch(i, true, false)) {\n                    break;\n                }\n            }\n            else if (geo.pointsSame(tail, pt1)) {\n                if (setMatch(i, false, true)) {\n                    break;\n                }\n            }\n            else if (geo.pointsSame(tail, pt2)) {\n                if (setMatch(i, false, false)) {\n                    break;\n                }\n            }\n        }\n        if (next_match === first_match) {\n            // we didn't match anything, so create a new chain\n            chains.push([pt1, pt2]);\n            log === null || log === void 0 ? void 0 : log.chainNew(pt1, pt2);\n            continue;\n        }\n        if (next_match === second_match) {\n            // we matched a single chain\n            log === null || log === void 0 ? void 0 : log.chainMatch(first_match.index);\n            // add the other point to the apporpriate end, and check to see if we've closed the\n            // chain into a loop\n            const index = first_match.index;\n            const pt = first_match.matches_pt1 ? pt2 : pt1; // if we matched pt1, then we add pt2, etc\n            const addToHead = first_match.matches_head; // if we matched at head, then add to the head\n            const chain = chains[index];\n            let grow = addToHead ? chain[0] : chain[chain.length - 1];\n            const grow2 = addToHead ? chain[1] : chain[chain.length - 2];\n            const oppo = addToHead ? chain[chain.length - 1] : chain[0];\n            const oppo2 = addToHead ? chain[chain.length - 2] : chain[1];\n            if (geo.pointsCollinear(grow2, grow, pt)) {\n                // grow isn't needed because it's directly between grow2 and pt:\n                // grow2 ---grow---> pt\n                if (addToHead) {\n                    log === null || log === void 0 ? void 0 : log.chainRemoveHead(first_match.index, pt);\n                    chain.shift();\n                }\n                else {\n                    log === null || log === void 0 ? void 0 : log.chainRemoveTail(first_match.index, pt);\n                    chain.pop();\n                }\n                grow = grow2; // old grow is gone... new grow is what grow2 was\n            }\n            if (geo.pointsSame(oppo, pt)) {\n                // we're closing the loop, so remove chain from chains\n                chains.splice(index, 1);\n                if (geo.pointsCollinear(oppo2, oppo, grow)) {\n                    // oppo isn't needed because it's directly between oppo2 and grow:\n                    // oppo2 ---oppo--->grow\n                    if (addToHead) {\n                        log === null || log === void 0 ? void 0 : log.chainRemoveTail(first_match.index, grow);\n                        chain.pop();\n                    }\n                    else {\n                        log === null || log === void 0 ? void 0 : log.chainRemoveHead(first_match.index, grow);\n                        chain.shift();\n                    }\n                }\n                log === null || log === void 0 ? void 0 : log.chainClose(first_match.index);\n                // we have a closed chain!\n                regions.push(chain);\n                continue;\n            }\n            // not closing a loop, so just add it to the apporpriate side\n            if (addToHead) {\n                log === null || log === void 0 ? void 0 : log.chainAddHead(first_match.index, pt);\n                chain.unshift(pt);\n            }\n            else {\n                log === null || log === void 0 ? void 0 : log.chainAddTail(first_match.index, pt);\n                chain.push(pt);\n            }\n            continue;\n        }\n        // otherwise, we matched two chains, so we need to combine those chains together\n        function reverseChain(index) {\n            log === null || log === void 0 ? void 0 : log.chainReverse(index);\n            chains[index].reverse(); // gee, that's easy\n        }\n        function appendChain(index1, index2) {\n            // index1 gets index2 appended to it, and index2 is removed\n            const chain1 = chains[index1];\n            const chain2 = chains[index2];\n            let tail = chain1[chain1.length - 1];\n            const tail2 = chain1[chain1.length - 2];\n            const head = chain2[0];\n            const head2 = chain2[1];\n            if (geo.pointsCollinear(tail2, tail, head)) {\n                // tail isn't needed because it's directly between tail2 and head\n                // tail2 ---tail---> head\n                log === null || log === void 0 ? void 0 : log.chainRemoveTail(index1, tail);\n                chain1.pop();\n                tail = tail2; // old tail is gone... new tail is what tail2 was\n            }\n            if (geo.pointsCollinear(tail, head, head2)) {\n                // head isn't needed because it's directly between tail and head2\n                // tail ---head---> head2\n                log === null || log === void 0 ? void 0 : log.chainRemoveHead(index2, head);\n                chain2.shift();\n            }\n            log === null || log === void 0 ? void 0 : log.chainJoin(index1, index2);\n            chains[index1] = chain1.concat(chain2);\n            chains.splice(index2, 1);\n        }\n        const F = first_match.index;\n        const S = second_match.index;\n        log === null || log === void 0 ? void 0 : log.chainConnect(F, S);\n        const reverseF = chains[F].length < chains[S].length; // reverse the shorter chain, if needed\n        if (first_match.matches_head) {\n            if (second_match.matches_head) {\n                if (reverseF) {\n                    // <<<< F <<<< --- >>>> S >>>>\n                    reverseChain(F);\n                    // >>>> F >>>> --- >>>> S >>>>\n                    appendChain(F, S);\n                }\n                else {\n                    // <<<< F <<<< --- >>>> S >>>>\n                    reverseChain(S);\n                    // <<<< F <<<< --- <<<< S <<<<   logically same as:\n                    // >>>> S >>>> --- >>>> F >>>>\n                    appendChain(S, F);\n                }\n            }\n            else {\n                // <<<< F <<<< --- <<<< S <<<<   logically same as:\n                // >>>> S >>>> --- >>>> F >>>>\n                appendChain(S, F);\n            }\n        }\n        else {\n            if (second_match.matches_head) {\n                // >>>> F >>>> --- >>>> S >>>>\n                appendChain(F, S);\n            }\n            else {\n                if (reverseF) {\n                    // >>>> F >>>> --- <<<< S <<<<\n                    reverseChain(F);\n                    // <<<< F <<<< --- <<<< S <<<<   logically same as:\n                    // >>>> S >>>> --- >>>> F >>>>\n                    appendChain(S, F);\n                }\n                else {\n                    // >>>> F >>>> --- <<<< S <<<<\n                    reverseChain(S);\n                    // >>>> F >>>> --- >>>> S >>>>\n                    appendChain(F, S);\n                }\n            }\n        }\n    }\n    return regions;\n}\n\n//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.cm\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\nclass BuildLog {\n    constructor() {\n        this.list = [];\n        this.nextSegmentId = 0;\n        this.curVert = NaN;\n    }\n    push(type, data) {\n        this.list.push({\n            type,\n            data: JSON.parse(JSON.stringify(data)),\n        });\n    }\n    segmentId() {\n        return this.nextSegmentId++;\n    }\n    checkIntersection(seg1, seg2) {\n        this.push(\"check\", { seg1, seg2 });\n    }\n    segmentChop(seg, p) {\n        this.push(\"div_seg\", { seg, p });\n        this.push(\"chop\", { seg, p });\n    }\n    statusRemove(seg) {\n        this.push(\"pop_seg\", { seg });\n    }\n    segmentUpdate(seg) {\n        this.push(\"seg_update\", { seg });\n    }\n    segmentNew(seg, primary) {\n        this.push(\"new_seg\", { seg, primary });\n    }\n    tempStatus(seg, above, below) {\n        this.push(\"temp_status\", { seg, above, below });\n    }\n    rewind(seg) {\n        this.push(\"rewind\", { seg });\n    }\n    status(seg, above, below) {\n        this.push(\"status\", { seg, above, below });\n    }\n    vert(x) {\n        if (x !== this.curVert) {\n            this.push(\"vert\", { x });\n            this.curVert = x;\n        }\n    }\n    selected(segs) {\n        this.push(\"selected\", { segs });\n    }\n    chainStart(seg) {\n        this.push(\"chain_start\", { seg });\n    }\n    chainRemoveHead(index, p) {\n        this.push(\"chain_rem_head\", { index, p });\n    }\n    chainRemoveTail(index, p) {\n        this.push(\"chain_rem_tail\", { index, p });\n    }\n    chainNew(p1, p2) {\n        this.push(\"chain_new\", { p1, p2 });\n    }\n    chainMatch(index) {\n        this.push(\"chain_match\", { index });\n    }\n    chainClose(index) {\n        this.push(\"chain_close\", { index });\n    }\n    chainAddHead(index, p) {\n        this.push(\"chain_add_head\", { index, p });\n    }\n    chainAddTail(index, p) {\n        this.push(\"chain_add_tail\", { index, p });\n    }\n    chainConnect(index1, index2) {\n        this.push(\"chain_con\", { index1, index2 });\n    }\n    chainReverse(index) {\n        this.push(\"chain_rev\", { index });\n    }\n    chainJoin(index1, index2) {\n        this.push(\"chain_join\", { index1, index2 });\n    }\n    done() {\n        this.push(\"done\", null);\n    }\n}\n\n//\n// polybool - Boolean operations on polygons (union, intersection, etc)\n// by Sean Connelly (@velipso), https://sean.cm\n// Project Home: https://github.com/velipso/polybool\n// SPDX-License-Identifier: 0BSD\n//\nclass PolyBool {\n    constructor(geo) {\n        this.log = null;\n        this.geo = geo;\n    }\n    buildLog(enable) {\n        var _a;\n        this.log = enable ? new BuildLog() : null;\n        return (_a = this.log) === null || _a === void 0 ? void 0 : _a.list;\n    }\n    segments(poly) {\n        const i = new Intersecter(true, this.geo, this.log);\n        for (const region of poly.regions) {\n            i.addRegion(region);\n        }\n        return {\n            segments: i.calculate(poly.inverted, false),\n            inverted: poly.inverted,\n        };\n    }\n    combine(segments1, segments2) {\n        const i = new Intersecter(false, this.geo, this.log);\n        for (const seg of segments1.segments) {\n            i.addSegment(new Segment(seg.start, seg.end, seg, this.log), true);\n        }\n        for (const seg of segments2.segments) {\n            i.addSegment(new Segment(seg.start, seg.end, seg, this.log), false);\n        }\n        return {\n            combined: i.calculate(segments1.inverted, segments2.inverted),\n            inverted1: segments1.inverted,\n            inverted2: segments2.inverted,\n        };\n    }\n    selectUnion(combined) {\n        return {\n            segments: SegmentSelector.union(combined.combined, this.log),\n            inverted: combined.inverted1 || combined.inverted2,\n        };\n    }\n    selectIntersect(combined) {\n        return {\n            segments: SegmentSelector.intersect(combined.combined, this.log),\n            inverted: combined.inverted1 && combined.inverted2,\n        };\n    }\n    selectDifference(combined) {\n        return {\n            segments: SegmentSelector.difference(combined.combined, this.log),\n            inverted: combined.inverted1 && !combined.inverted2,\n        };\n    }\n    selectDifferenceRev(combined) {\n        return {\n            segments: SegmentSelector.differenceRev(combined.combined, this.log),\n            inverted: !combined.inverted1 && combined.inverted2,\n        };\n    }\n    selectXor(combined) {\n        return {\n            segments: SegmentSelector.xor(combined.combined, this.log),\n            inverted: combined.inverted1 !== combined.inverted2,\n        };\n    }\n    polygon(segments) {\n        return {\n            regions: SegmentChainer(segments.segments, this.geo, this.log),\n            inverted: segments.inverted,\n        };\n    }\n    // helper functions for common operations\n    union(poly1, poly2) {\n        const seg1 = this.segments(poly1);\n        const seg2 = this.segments(poly2);\n        const comb = this.combine(seg1, seg2);\n        const seg3 = this.selectUnion(comb);\n        return this.polygon(seg3);\n    }\n    intersect(poly1, poly2) {\n        const seg1 = this.segments(poly1);\n        const seg2 = this.segments(poly2);\n        const comb = this.combine(seg1, seg2);\n        const seg3 = this.selectIntersect(comb);\n        return this.polygon(seg3);\n    }\n    difference(poly1, poly2) {\n        const seg1 = this.segments(poly1);\n        const seg2 = this.segments(poly2);\n        const comb = this.combine(seg1, seg2);\n        const seg3 = this.selectDifference(comb);\n        return this.polygon(seg3);\n    }\n    differenceRev(poly1, poly2) {\n        const seg1 = this.segments(poly1);\n        const seg2 = this.segments(poly2);\n        const comb = this.combine(seg1, seg2);\n        const seg3 = this.selectDifferenceRev(comb);\n        return this.polygon(seg3);\n    }\n    xor(poly1, poly2) {\n        const seg1 = this.segments(poly1);\n        const seg2 = this.segments(poly2);\n        const comb = this.combine(seg1, seg2);\n        const seg3 = this.selectXor(comb);\n        return this.polygon(seg3);\n    }\n}\nconst polybool = new PolyBool(new GeometryEpsilon());\n\nexport { BuildLog, GeometryEpsilon, Intersecter, PolyBool, Segment, SegmentChainer, SegmentSelector, polybool as default };\n","import polybool from '@velipso/polybool';\nimport { PolyBool, GeometryEpsilon, Point } from '@velipso/polybool';\nimport { Diagram, DiagramType, polygon, curve, empty, diagram_combine } from './diagram.js';\nimport { V2 } from './vector.js';\n\ntype PolyBoolPoly = {\n    regions: Point[][];\n    inverted: boolean;\n}\nfunction dg_to_polybool(d : Diagram) : PolyBoolPoly {\n    const dg_points = d.path?.points ?? [];\n    const points = dg_points.map(p => [p.x, p.y] as Point);\n    return {\n        regions: [points],\n        inverted: false\n    };\n}\n\nfunction polybool_to_dg(poly : PolyBoolPoly) : Diagram {\n    const diagrams_per_region = poly.regions.map(region => {\n        const dg_points = region.map(p => V2(p[0], p[1]));\n        return polygon(dg_points);\n    });\n    if (diagrams_per_region.length < 1){\n        return empty();\n    } else if (diagrams_per_region.length == 1){\n        return diagrams_per_region[0];\n    } else {\n        return diagram_combine(...diagrams_per_region);\n    }\n}\n\n/*\n * get the union of two polygons\n * @param d1 a Polygon Diagram\n * @param d2 a Polygon Diagram\n * @tolerance the tolerance for the operation (default 1e-10)\n * @returns a Polygon that is the union of d1 and d2\n*/\nexport function union(d1 : Diagram, d2 : Diagram, tolerance? : number) : Diagram {\n    const pol = tolerance ? new PolyBool(new GeometryEpsilon(tolerance)) : polybool;\n    const shape1 = dg_to_polybool(d1);\n    const shape2 = dg_to_polybool(d2);\n    const result = pol.union(shape1, shape2);\n    return polybool_to_dg(result);\n}\n\n/*\n * get the difference of two polygons (d1 - d2)\n * @param d1 a Polygon Diagram\n * @param d2 a Polygon Diagram\n * @tolerance the tolerance for the operation (default 1e-10)\n * @returns a Polygon that is the difference of d1 and d2\n*/\nexport function difference(d1 : Diagram, d2 : Diagram, tolerance? : number) : Diagram {\n    const pol = tolerance ? new PolyBool(new GeometryEpsilon(tolerance)) : polybool;\n    const shape1 = dg_to_polybool(d1);\n    const shape2 = dg_to_polybool(d2);\n    const result = pol.difference(shape1, shape2);\n    return polybool_to_dg(result);\n}\n\n/*\n * get the intersection of two polygons\n * @param d1 a Polygon Diagram\n * @param d2 a Polygon Diagram\n * @param tolerance the tolerance for the operation (default 1e-10)\n * @returns a Polygon that is the intersection of d1 and d2\n*/\nexport function intersect(d1 : Diagram, d2 : Diagram, tolerance? : number) : Diagram {\n    const pol = tolerance ? new PolyBool(new GeometryEpsilon(tolerance)) : polybool;\n    const shape1 = dg_to_polybool(d1);\n    const shape2 = dg_to_polybool(d2);\n    const result = pol.intersect(shape1, shape2);\n    return polybool_to_dg(result);\n}\n\n/*\n * get the xor of two polygons\n * @param d1 a Polygon Diagram\n * @param d2 a Polygon Diagram\n * @param tolerance the tolerance for the operation (default 1e-10)\n * @returns a Polygon that is the xor of d1 and d2\n*/\nexport function xor(d1 : Diagram, d2 : Diagram, tolerance? : number) : Diagram {\n    const pol = tolerance ? new PolyBool(new GeometryEpsilon(tolerance)) : polybool;\n    const shape1 = dg_to_polybool(d1);\n    const shape2 = dg_to_polybool(d2);\n    const result = pol.xor(shape1, shape2);\n    return polybool_to_dg(result);\n}\n","\n\nexport module string_filter  {\n    export function outer_shadow(\n        dx: number, dy: number, radius: number, stdev: number, color: string, \n        id: string='outer-shadow',\n        width: number, height: number,\n        scale_factor: number=1\n    ){\n        const x = (width - 1) / 2;\n        const y = (height - 1)/2;\n        return `\n        <filter id=\"${id}\" x=\"-${x * 100}%\" y=\"-${y * 100}%\" width=\"${width * 100}%\" height=\"${height * 100}%\">\n            <feMorphology operator=\"dilate\" radius=\"${radius * scale_factor}\" in=\"SourceAlpha\" result=\"dilated\" />\n            <feGaussianBlur in=\"dilated\" stdDeviation=\"${stdev * scale_factor}\" />\n            <feOffset dx=\"${dx * scale_factor}\" dy=\"${dy * scale_factor}\" result=\"offsetblur\" />\n            <feFlood flood-color=\"${color}\" result=\"colorblur\"/>\n            <feComposite in=\"colorblur\" in2=\"offsetblur\" operator=\"in\" result=\"shadow\" />\n            <feComposite in=\"shadow\" in2=\"SourceAlpha\" operator=\"out\" result=\"clipped-shadow\"/>\n        </filter>\n        `\n    }\n}\n","import { Diagram, line, curve, diagram_combine } from '../diagram.js';\nimport { Vector2, V2 } from '../vector.js';\nimport { linspace, range_inc } from '../utils.js';\nimport { arrow1, arrow2, textvar } from '../shapes.js'\nimport { TAG } from '../tag_names.js';\n\n/**\n * Options for axes\n * Since axes, plot, etc. are separate objects.\n * Axes options is used so that it's easier to have consistent\n * setting for multiple objects.\n */\nexport type axes_options = {\n    xrange    : [number, number],\n    yrange    : [number, number],\n    bbox?     : [Vector2, Vector2],\n    xticks?   : number[],\n    yticks?   : number[],\n    n_sample? : number,\n    ticksize  : number,\n    headsize  : number,\n    tick_label_offset? : number,\n}\n\nexport let default_axes_options : axes_options = {\n    // bbox   : [V2(-100,-100), V2(100,100)],\n    bbox     : undefined,\n    xrange   : [-2, 2],\n    yrange   : [-2, 2],\n    xticks   : undefined,\n    yticks   : undefined,\n    n_sample : 100,\n    ticksize : 0.1,\n    headsize : 0.05,\n    tick_label_offset : 0,\n}\n\nexport function axes_transform(axes_options? : Partial<axes_options>) : (v : Vector2) => Vector2 {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.bbox == undefined) {\n        // get values from xrange and yrange\n        let [xmin, xmax] = opt.xrange;\n        let [ymin, ymax] = opt.yrange;\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\n    }\n\n    let [lowerleft, upperright] = opt.bbox;\n    let [xmin, xmax] = opt.xrange;\n    let [ymin, ymax] = opt.yrange;\n\n    return function(v : Vector2) : Vector2 {\n        let x = lowerleft.x + (v.x-xmin)/(xmax-xmin)*(upperright.x-lowerleft.x);\n        let y = lowerleft.y + (v.y-ymin)/(ymax-ymin)*(upperright.y-lowerleft.y);\n        return V2(x,y);\n    }\n}\nexport let ax = axes_transform\n\n\n/**\n * Draw xy axes without ticks\n * @param axes_options options for the axes\n * example: opt = {\n *    bbox   : [V2(-100,-100), V2(100,100)],\n * }\n * @returns a Diagram object\n */\nexport function axes_empty(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.bbox == undefined) {\n        // get values from xrange and yrange\n        let [xmin, xmax] = opt.xrange;\n        let [ymin, ymax] = opt.yrange;\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\n    }\n\n    let [lowerleft, upperright] = opt.bbox;\n    // get the intersection point\n    let xorigin = lowerleft.x + (upperright.x-lowerleft.x)/(opt.xrange[1]-opt.xrange[0])*(0-opt.xrange[0]);\n    let yorigin = lowerleft.y + (upperright.y-lowerleft.y)/(opt.yrange[1]-opt.yrange[0])*(0-opt.yrange[0]);\n\n    let xaxis = arrow2(V2(lowerleft.x,yorigin), V2(upperright.x,yorigin), opt.headsize).append_tags(TAG.GRAPH_AXIS);\n    let yaxis = arrow2(V2(xorigin,lowerleft.y), V2(xorigin,upperright.y), opt.headsize).append_tags(TAG.GRAPH_AXIS);\n    return diagram_combine(xaxis, yaxis).stroke('gray').fill('gray');\n    // return xaxis;\n}\n\n/**\n * Draw xy corner axes without ticks\n * @param axes_options options for the axes\n * example: opt = {\n *    bbox   : [V2(-100,-100), V2(100,100)],\n * }\n * @returns a Diagram object\n */\nexport function axes_corner_empty(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.bbox == undefined) {\n        // get values from xrange and yrange\n        let [xmin, xmax] = opt.xrange;\n        let [ymin, ymax] = opt.yrange;\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\n    }\n\n    let [lowerleft, upperright] = opt.bbox;\n    // get the intersection point\n\n    let xaxis = arrow1(lowerleft, V2(upperright.x,lowerleft.y), opt.headsize).append_tags(TAG.GRAPH_AXIS);\n    let yaxis = arrow1(lowerleft, V2(lowerleft.x,upperright.y), opt.headsize).append_tags(TAG.GRAPH_AXIS);\n    return diagram_combine(xaxis, yaxis).stroke('gray').fill('gray');\n    // return xaxis;\n}\n\n/**\n * Draw xy corner axes without ticks and with break mark in x axis\n * @param axes_options options for the axes\n */\nexport function axes_corner_empty_xbreak(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.bbox == undefined) {\n        // get values from xrange and yrange\n        let [xmin, xmax] = opt.xrange;\n        let [ymin, ymax] = opt.yrange;\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\n    }\n\n    let [lowerleft, upperright] = opt.bbox;\n    // get the intersection point\n\n    let xbreak_ysize_ = opt.ticksize * 2;\n\n    if (opt.xticks == undefined) {\n        opt.xticks = get_tick_numbers(opt.xrange[0], opt.xrange[1], false);\n        opt.xticks = opt.xticks.filter(x => x > opt.xrange[0] && x < opt.xrange[1]);\n    }\n    let xbreak_xsize = (opt.xticks![1] - opt.xticks![0])/2;\n    let xbreak_xpos  = opt.xticks![0] - xbreak_xsize;\n    let trans_f = axes_transform(opt);\n\n    // suffix _ means in the transformed coordinate\n    let xbreak_pleft_  = trans_f(V2(xbreak_xpos - xbreak_xsize/2,0));\n    let xbreak_pright_ = trans_f(V2(xbreak_xpos + xbreak_xsize/2,0));\n    let xbreak_xsize_  = xbreak_pright_.x - xbreak_pleft_.x;\n    let xbreak_pbottom_= xbreak_pleft_.add(V2(xbreak_xsize_*1/3, -xbreak_ysize_/2));\n    let xbreak_ptop_   = xbreak_pleft_.add(V2(xbreak_xsize_*2/3, xbreak_ysize_/2));\n    let xbreak_curve   = curve([xbreak_pleft_, xbreak_pbottom_, xbreak_ptop_, xbreak_pright_]);\n\n    let xaxis_left = line(lowerleft, xbreak_pleft_);\n    let xaxis_right = arrow1(xbreak_pright_, V2(upperright.x,lowerleft.y), opt.headsize);\n    let xaxis = diagram_combine(xaxis_left, xbreak_curve, xaxis_right).append_tags(TAG.GRAPH_AXIS);\n    let yaxis = arrow1(lowerleft, V2(lowerleft.x,upperright.y), opt.headsize).append_tags(TAG.GRAPH_AXIS);\n    return diagram_combine(xaxis, yaxis).stroke('gray').fill('gray');\n}\n\n/**\n * Create a single tick mark in the x axis\n * @param x x coordinate of the tick mark\n * @param y y coordinate of the tick mark\n * @param height height of the tick mark\n */\nexport function xtickmark_empty(x : number, y : number, axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    let height = opt.ticksize;\n    let pos = axes_transform(opt)(V2(x,y));\n    return line(V2(pos.x,pos.y+height/2), V2(pos.x,pos.y-height/2))\n        .stroke('gray').append_tags(TAG.GRAPH_TICK);\n}\n\nexport function xtickmark(x : number, y : number, str : string, axes_options? : Partial<axes_options>) : Diagram {\n    let tick = xtickmark_empty(x, y, axes_options);\n    let label = textvar(str).move_origin_text(\"top-center\").translate(tick.get_anchor(\"bottom-center\"))\n                .translate(V2(0, -(axes_options?.tick_label_offset || 0)))\n                .textfill('gray').append_tags(TAG.GRAPH_TICK_LABEL);\n    return diagram_combine(tick, label);\n}\n\n/**\n * Create a single tick mark in the y axis\n * @param y y coordinate of the tick mark\n * @param x x coordinate of the tick mark\n * @param height height of the tick mark\n */\nexport function ytickmark_empty(y : number, x : number, axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    let height = opt.ticksize;\n    let pos = axes_transform(opt)(V2(x,y));\n    return line(V2(pos.x+height/2,pos.y), V2(pos.x-height/2,pos.y))\n        .stroke('gray').append_tags(TAG.GRAPH_TICK);\n}\nexport function ytickmark(y : number, x : number, str : string, axes_options? : Partial<axes_options>) : Diagram {\n    let tick = ytickmark_empty(y, x, axes_options);\n    let label = textvar(str).move_origin_text(\"center-right\").translate(tick.get_anchor(\"center-left\"))\n                .translate(V2(-(axes_options?.tick_label_offset || 0), 0))\n                .textfill('gray').append_tags(TAG.GRAPH_TICK_LABEL);\n    return diagram_combine(tick, label);\n}\n\n// ======= BEGIN utility to calculate ticks\n\n/// TODO: find a smarter way to calculate this\nfunction tweak_interval(interval: number) : number {\n  if (0.1 < interval && interval < 2) return 1;\n  return interval;\n}\nfunction get_tick_interval(min : number, max : number) : number {\n    let range = max-min;\n    let range_order = Math.floor(Math.log10(range));\n    let interval_to_try = [0.1, 0.15, 0.2, 0.5, 1.0].map(x => x*Math.pow(10,range_order));\n    let tick_counts = interval_to_try.map(x => Math.floor(range/x));\n    // choose the interval so that the number of ticks is between the biggest one but less than 10\n    for (let i = 0; i < tick_counts.length; i++) {\n        if (tick_counts[i] <= 10) {\n            return tweak_interval(interval_to_try[i]);\n        }\n    }\n    return tweak_interval(interval_to_try.slice(-1)[0]);\n}\n\nfunction get_tick_numbers_range(min : number, max : number) : number[] {\n    let interval = get_tick_interval(min, max);\n    // round min and max to the nearest interval\n    let new_min = Math.round(min/interval)*interval;\n    let new_max = Math.round(max/interval)*interval;\n    let new_count = Math.round((new_max-new_min)/interval);\n    let l = range_inc(0, new_count).map(x => new_min + x*interval);\n    // round l to the nearest interval\n    let interval_prec = -Math.floor(Math.log10(interval)-1);\n    if (interval_prec >= 0) l = l.map(x => parseFloat(x.toFixed(interval_prec)));\n    return l;\n}\nfunction get_tick_numbers_aroundzero(neg : number, pos : number, nozero : boolean = true) : number[] {\n    if (neg > 0) throw new Error('neg must be negative');\n    if (pos < 0) throw new Error('pos must be positive');\n    let magnitude = Math.max(-neg, pos);\n    let interval = get_tick_interval(-magnitude, magnitude);\n\n    // round min and max to the nearest interval\n    let new_min = Math.ceil(neg/interval)*interval;\n    let new_max = Math.floor(pos/interval)*interval;\n    let new_count = Math.floor((new_max-new_min)/interval);\n\n    let l = linspace(new_min, new_max, new_count+1);\n    // round l to the nearest interval\n    let interval_prec = -Math.floor(Math.log10(interval));\n    if (interval_prec >= 0) l = l.map(x => parseFloat(x.toFixed(interval_prec)));\n\n    if (nozero){\n        return l.filter(x => x != 0);\n    }else{\n        return l;\n    }\n}\nexport function get_tick_numbers(min : number, max : number, exclude_zero : boolean = true) : number[] {\n    if (exclude_zero && min < 0 && max > 0) {\n        return get_tick_numbers_aroundzero(min, max);\n    } else {\n        return get_tick_numbers_range(min, max);\n    }\n}\n\n// ======= END utility to calculate ticks\n\nexport function xticks(axes_options : Partial<axes_options>, y : number = 0, empty = false) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.xticks == undefined) {\n        opt.xticks = get_tick_numbers(opt.xrange[0], opt.xrange[1], y == 0);\n    }\n\n    // remove ticks outside of the range\n    // opt.xticks = opt.xticks.filter(x => x >= opt.xrange[0] && x <= opt.xrange[1]);\n    opt.xticks = opt.xticks.filter(x => x > opt.xrange[0] && x < opt.xrange[1]);\n\n    let xticks_diagrams = empty ? \n        opt.xticks.map(x => xtickmark_empty(x, y, opt)) :\n        opt.xticks.map(x => xtickmark(x, y, x.toString(), opt));\n    return diagram_combine(...xticks_diagrams);\n}\nexport function yticks(axes_options : Partial<axes_options>, x : number = 0, empty = false) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.yticks == undefined) {\n        opt.yticks = get_tick_numbers(opt.yrange[0], opt.yrange[1], x == 0);\n    }\n\n    // remove ticks outside of the range\n    // opt.yticks = opt.yticks.filter(y => y >= opt.yrange[0] && y <= opt.yrange[1]);\n    opt.yticks = opt.yticks.filter(y => y > opt.yrange[0] && y < opt.yrange[1]);\n\n    let yticks_diagrams = empty ? \n        opt.yticks.map(y => ytickmark_empty(y, x, opt)) :\n        opt.yticks.map(y => ytickmark(y, x, y.toString(), opt));\n    return diagram_combine(...yticks_diagrams);\n}\n\n\n/**\n * Draw xy corner axes with ticks\n * @param axes_options options for the axes\n */\nexport function xycorneraxes(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    let xmin = opt.xrange[0];\n    let ymin = opt.yrange[0];\n    return diagram_combine(axes_corner_empty(opt), xticks(opt, ymin), yticks(opt, xmin));\n}\n\n/**\n * Draw xy corner axes with ticks and break mark in x axis\n * @param axes_options options for the axes\n */\nexport function xycorneraxes_xbreak(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    let xmin = opt.xrange[0];\n    let ymin = opt.yrange[0];\n    return diagram_combine(axes_corner_empty_xbreak(opt), xticks(opt, ymin), yticks(opt, xmin));\n}\n\n\n/**\n * Draw xy axes with ticks\n * @param axes_options options for the axes\n */\nexport function xyaxes(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    return diagram_combine(axes_empty(opt), xticks(opt), yticks(opt));\n}\n\n/**\n * Draw x axis with ticks\n * @param axes_options options for the axis\n */\nexport function xaxis(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.bbox == undefined) {\n        // get values from xrange and yrange\n        let [xmin, xmax] = opt.xrange;\n        let [ymin, ymax] = opt.yrange;\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\n    }\n\n    let ax_origin = axes_transform(opt)(V2(0,0));\n    let xaxis = arrow2(V2(opt.bbox[0].x, ax_origin.y), V2(opt.bbox[1].x, ax_origin.y), opt.headsize)\n        .append_tags(TAG.GRAPH_AXIS);\n    let xtickmarks = xticks(opt, 0);\n    return diagram_combine(xaxis, xtickmarks);\n}\n\n/**\n * Draw y axis with ticks\n * @param axes_options options for the axis\n */\nexport function yaxis(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.bbox == undefined) {\n        // get values from xrange and yrange\n        let [xmin, xmax] = opt.xrange;\n        let [ymin, ymax] = opt.yrange;\n        opt.bbox = [V2(xmin,ymin), V2(xmax,ymax)];\n    }\n\n    let ax_origin = axes_transform(opt)(V2(0,0));\n    let yaxis = arrow2(V2(ax_origin.x, opt.bbox[0].y), V2(ax_origin.x, opt.bbox[1].y), opt.headsize)\n        .append_tags(TAG.GRAPH_AXIS);\n    let ytickmarks = yticks(opt, 0);\n    return diagram_combine(yaxis, ytickmarks);\n}\n\nexport function ygrid(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.xticks == undefined) {\n        opt.xticks = get_tick_numbers(opt.xrange[0], opt.xrange[1], false);\n    }\n\n    let ygrid_diagrams = opt.xticks.map(x => \n        line(V2(x,opt.yrange[0]), V2(x,opt.yrange[1])).transform(axes_transform(opt)).stroke('gray')\n    );\n    return diagram_combine(...ygrid_diagrams).append_tags(TAG.GRAPH_GRID);\n}\n\nexport function xgrid(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.yticks == undefined) {\n        opt.yticks = get_tick_numbers(opt.yrange[0], opt.yrange[1], false);\n    }\n\n    let xgrid_diagrams = opt.yticks.map(y =>\n        line(V2(opt.xrange[0],y), V2(opt.xrange[1],y)).transform(axes_transform(opt)).stroke('gray')\n    );\n    return diagram_combine(...xgrid_diagrams).append_tags(TAG.GRAPH_GRID);\n}\n\n//  TODO: add xticks and ytiks as argument\nexport function xygrid(axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    if (opt.xticks == undefined) {\n        opt.xticks = get_tick_numbers(opt.xrange[0], opt.xrange[1], false);\n    }\n    if (opt.yticks == undefined) {\n        opt.yticks = get_tick_numbers(opt.yrange[0], opt.yrange[1], false);\n    }\n\n    let xgrid_diagrams = opt.xticks.map(x => \n        line(V2(x,opt.yrange[0]), V2(x,opt.yrange[1])).transform(axes_transform(opt)).stroke('gray')\n    );\n    let ygrid_diagrams = opt.yticks.map(y =>\n        line(V2(opt.xrange[0],y), V2(opt.xrange[1],y)).transform(axes_transform(opt)).stroke('gray')\n    );\n    return diagram_combine(...xgrid_diagrams, ...ygrid_diagrams);\n\n}\n\n\n\n\n// TODO : \n// export function axes(axes_options? : Partial<axes_options>) : Diagram {\n//     let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n// }\n\n/**\n * Plot a curve given a list of points\n * @param data list of points\n * @param axes_options options for the axes\n * example: opt = {\n *  bbox   : [V2(-100,-100), V2(100,100)],\n *  xrange : [-2, 2],\n *  yrange : [-2, 2],\n * }\n */\nexport function plotv(data : Vector2[], axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    let [xmin, xmax] = opt.xrange;\n    let [ymin, ymax] = opt.yrange;\n\n    // split data into segments that are within the range\n    let segments : Vector2[][] = [];\n    let current_segment : Vector2[] = [];\n    for (let i=0; i < data.length; i++) {\n        let p = data[i];\n        let is_inside = (p.x >= xmin && p.x <= xmax && p.y >= ymin && p.y <= ymax);\n        if (!is_inside) {\n            if (current_segment.length > 1) segments.push(current_segment);\n            current_segment = [];\n        } else {\n            current_segment.push(p);\n        }\n    }\n    if (current_segment.length > 1) segments.push(current_segment);\n\n    let d : Diagram;\n    // create separate paths for each segment\n    let path_diagrams = segments.map(segment => curve(segment));\n    if (path_diagrams.length == 1){\n        d = path_diagrams[0];\n    } else {\n        d = diagram_combine(...path_diagrams).stroke('black').fill('none');\n    }\n\n    return d.transform(axes_transform(opt));\n}\n\n/**\n * Plot a curve given xdata and ydata\n * @param xdata x coordinates of the data\n * @param ydata y coordinates of the data\n * @param axes_options options for the axes\n * example: opt = {\n *   bbox   : [V2(-100,-100), V2(100,100)],\n *   xrange : [-2, 2],\n *   yrange : [-2, 2],\n * }\n */\nexport function plot(xdata : number[], ydata : number[], axes_options? : Partial<axes_options>) : Diagram {\n    if (xdata.length != ydata.length) throw new Error('xdata and ydata must have the same length');\n    let vdata = xdata.map((x,i) => V2(x,ydata[i]));\n    return plotv(vdata, axes_options);\n}\n\n/**\n * Plot a function\n * @param f function to plot\n * @param n number of points to plot\n * @param axes_options options for the axes\n */\nexport function plotf(f : (x:number)=>number, axes_options? : Partial<axes_options>) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n    let xdata = linspace(...opt.xrange, opt.n_sample);\n    let vdata = xdata.map(x => V2(x,f(x)));\n    return plotv(vdata, axes_options);\n}\n\nexport function under_curvef(f : (x:number)=>number, x_start : number, x_end : number,  axes_options? : Partial<axes_options> ) : Diagram {\n    let opt = {...default_axes_options, ...axes_options}; // use default if not defined\n\n    let new_opt = {...opt}; // copy opt\n    new_opt.xrange = [x_start, x_end];\n    new_opt.bbox = undefined;\n\n    // draw plot from x_start to x_end\n    let fplot = plotf(f, new_opt);\n    let area_under = fplot.add_points([V2(x_end,0), V2(x_start,0)]).to_polygon();\n    return area_under.transform(axes_transform(opt));\n}\n","import { Diagram, line, diagram_combine, curve } from '../diagram.js';\nimport { arrow, textvar, arc } from '../shapes.js';\nimport { Vector2, V2 } from '../vector.js';\n\n/**\n * Create an annotation vector\n * @param v vector to be annotated\n * @param str string to be annotated (will be converted to mathematical italic)\n * if you don't want to convert to mathematical italic, use annotation.vector_text\n * @param arrow_head_size size of the arrow head\n * @param text_offset position offset of the text\n */\nexport function vector(v : Vector2, str? : string, text_offset? : Vector2, arrow_head_size? : number) : Diagram {\n    if (text_offset == undefined){ text_offset = V2(0,0); } // default value\n    let vec = arrow(v, arrow_head_size);\n    if (str == \"\" || str == undefined){ return vec; } // if str is empty, return only the vector\n\n    let txt = textvar(str).position(v.add(text_offset));\n    return diagram_combine(vec, txt);\n}\n\n/**\n * Create an annotation for angle\n * @param p three points to define the angle\n * @param str string to be annotated (will be converted to mathematical italic)\n * @param radius radius of the arc\n * @param text_offset position offset of the text\n * if given as a number, the text will be placed at the angle bisector with the given distance from the vertex\n * if given as a vector, the text will be placed at the given position offset\n */\nexport function angle(p : [Vector2, Vector2, Vector2], \n    str? : string, radius : number = 1 , text_offset? : Vector2 | number,\n) : Diagram {\n\n    let [p1, p2, p3] = p;\n    let va = p1.sub(p2);\n    let vb = p3.sub(p2);\n\n    if (text_offset == undefined){ text_offset = V2(0,0); } // default value\n    if (typeof text_offset == \"number\"){ \n        let vd = va.normalize().add(vb.normalize()).normalize().scale(text_offset);\n        text_offset = vd;\n    } \n\n    let angle_a = va.angle();\n    let angle_b = vb.angle();\n    // angle_b must be larger than angle_a\n    if (angle_b < angle_a){ angle_b += 2*Math.PI; }\n\n    let angle_arc = arc(radius, angle_b-angle_a).rotate(angle_a)\n        .add_points([V2(0,0)]).to_polygon();\n    if (str == \"\" || str == undefined){ return angle_arc.position(p2); } // if str is empty, return only the arc\n\n    let angle_text = textvar(str)\n        .translate(text_offset);\n\n    return diagram_combine(angle_arc, angle_text).position(p2);\n}\n\n/**\n * Create an annotation for angle (always be the smaller angle)\n * @param p three points to define the angle\n * @param str string to be annotated (will be converted to mathematical italic)\n * @param radius radius of the arc\n * @param text_offset position offset of the text\n * if given as a number, the text will be placed at the angle bisector with the given distance from the vertex\n * if given as a vector, the text will be placed at the given position offset\n */\nexport function angle_smaller(p : [Vector2, Vector2, Vector2],\n    str? : string, radius : number = 1 , text_offset? : Vector2 | number,\n) : Diagram {\n\n    let [p1, p2, p3] = p;\n    let va = p1.sub(p2);\n    let vb = p3.sub(p2);\n\n    let angle_a = va.angle();\n    let angle_b = vb.angle();\n    // angle_b must be larger than angle_a\n    if (angle_b < angle_a){ angle_b += 2*Math.PI; }\n    let dangle = angle_b - angle_a;\n\n\n    // if dangle is larger than 180 degree, swap the two vectors\n    let ps : typeof p = dangle > Math.PI ? [p3, p2, p1] : [p1, p2, p3];\n    return angle(ps, str, radius, text_offset);\n}\n\n/**\n * Create an annotation for right angle\n * make sure the angle is 90 degree\n * @param p three points to define the angle\n * @param size size of the square\n */\nexport function right_angle(p : [Vector2, Vector2, Vector2], size : number = 1) : Diagram {\n    let [p1, p2, p3] = p;\n    let p1_ = p1.sub(p2).normalize().scale(size).add(p2);\n    let p3_ = p3.sub(p2).normalize().scale(size).add(p2);\n    let p2_ = V2(p1_.x, p3_.y);\n    return curve([p1_, p2_, p3_]);\n}\n\nexport function length(p1 : Vector2, p2 : Vector2, str : string, offset : number, \n    tablength? : number, textoffset? : number, tabsymmetric : boolean = true\n) : Diagram {\n\n    // setup defaults\n    tablength = tablength ?? p2.sub(p1).length()/20;\n    textoffset = textoffset ?? offset * 2;\n\n    let v = p1.equals(p2) ? V2(0,0) : p2.sub(p1).normalize();\n    let n = V2(v.y, -v.x);\n    let pA = p1.add(n.scale(offset));\n    let pB = p2.add(n.scale(offset));\n\n    let tabA = tabsymmetric ?\n        line(pA.sub(n.scale(tablength/2)), pA.add(n.scale(tablength/2))) :\n        line(pA, pA.sub(n.scale(tablength)));\n    let tabB = tabsymmetric ?\n        line(pB.sub(n.scale(tablength/2)), pB.add(n.scale(tablength/2))) :\n        line(pB, pB.sub(n.scale(tablength)));\n    let lineAB = line(pA, pB);\n    let lines = diagram_combine(lineAB, tabA, tabB);\n\n    let pmid = p1.add(p2).scale(0.5);\n    let label = textvar(str).position(pmid.add(n.scale(textoffset)));\n\n    return diagram_combine(lines, label);\n}\n\n/**\n * Create a congruence mark\n * @param p1 start point of the line\n * @param p2 end point of the line\n * @param count number of marks\n * @param size size of the mark\n * @param gap gap between the marks\n */\nexport function congruence_mark(p1 : Vector2, p2 : Vector2, count : number, size : number = 1, gap? : number) : Diagram {\n    let v = p2.sub(p1)\n    let n_angle = Math.atan2(v.x, -v.y);\n    let p_mid = p1.add(p2).scale(0.5);\n    gap = gap ?? size/2;\n\n    let marks = [];\n    for (let i = 0; i < count; i++){\n        let l = line(V2(-size/2, i*gap), V2(size/2, i*gap));\n        marks.push(l)\n    }\n    let dg_marks = diagram_combine(...marks);\n    return dg_marks.rotate(n_angle).move_origin('center-center').position(p_mid);\n}\n\n/**\n * Create a parallel mark\n * @param p1 start point of the line\n * @param p2 end point of the line\n * @param count number of marks\n * @param size size of the mark\n * @param gap gap between the marks\n * @param arrow_angle angle of the arrow\n */\nexport function parallel_mark(p1 : Vector2, p2 : Vector2, count : number, size : number = 1, gap? : number, arrow_angle : number = 0.5) : Diagram {\n    let v = p2.sub(p1)\n    let n_angle = Math.atan2(v.x, -v.y);\n    let p_mid = p1.add(p2).scale(0.5);\n    gap = gap ?? size/2;\n\n    let marks = [];\n    let dy = size/2 * Math.cos(arrow_angle);\n    for (let i = 0; i < count; i++){\n        let p0 = V2(0, i*gap - dy);\n        let l1 = line(V2(-size/2, i*gap), p0)\n        let l2 = line(V2(size/2, i*gap), p0)\n        marks.push(l1.combine(l2));\n    }\n    let dg_marks = diagram_combine(...marks);\n    return dg_marks.rotate(n_angle).move_origin('center-center').position(p_mid);\n}\n","import { Diagram, polygon, curve } from '../diagram.js';\nimport { Vector2, V2 } from '../vector.js';\nimport { linspace } from '../utils.js';\n\n/**\n * Create an inclined plane.\n * @param length The length of the inclined plane.\n * @param angle The angle of the inclined plane.\n * @returns A diagram of the inclined plane.\n */\nexport function inclined_plane(length : number, angle : number) : Diagram {\n    return polygon([V2(0,0), V2(length, length*Math.tan(angle)), V2(length,0)]);\n}\n\n/**\n * Create a spring between two points.\n * @param p1 The first point.\n * @param p2 The second point.\n * @param radius The radius of the spring.\n * @param coil_number The number of coils in the spring.\n * @param separation_coefficient The coefficient of separation between coils.\n * \\* at 0, no coils are overlapping. (there is no max value)\n * @param sample_number The number of points to sample in the spring.\n * @returns A diagram of the spring.\n */\nexport function spring(p1 : Vector2, p2 : Vector2, radius : number = 1, coil_number : number = 10,\n    separation_coefficient : number = 0.5, sample_number : number = 100) : Diagram {\n\n    // I got this equation from https://www.reddit.com/r/desmos/comments/i3m3yd/interactive_spring_graphic/\n\n    let angle  = p2.sub(p1).angle();\n    let length = p2.sub(p1).length();\n\n    // abbrev\n    let R = separation_coefficient;\n    let n = coil_number;\n\n    let k = radius/R; // k*R = radius\n\n    let a = (2 * n + 1) * Math.PI;\n    let b = (length - 2*R) / a;\n\n    let parametric_function = (t : number) => V2(b*t + R - R*Math.cos(t), k*R*Math.sin(t));\n    let points = linspace(0, a, sample_number).map(parametric_function);\n    return curve(points).rotate(angle).translate(p1);\n}\n","import { Diagram, line, text, diagram_combine } from '../diagram.js';\nimport { Vector2, V2 } from '../vector.js';\nimport { rectangle, } from '../shapes.js'\nimport { axes_options, yticks, axes_transform } from './shapes_graph.js'\n\nexport type bar_options = {\n    gap : number,\n    yrange? : [number, number],\n    yticks? : number[],\n    bbox? : [Vector2, Vector2],\n    ticksize : number,\n}\n\nexport let default_bar_options : bar_options = {\n    gap: 0.1,\n    ticksize: 0.2,\n    bbox: [V2(0,0), V2(10,10)],\n}\n\n\nfunction to_ax_options(datavalues : number[], baropt : Partial<bar_options>) : axes_options {\n    let opt = {...default_bar_options, ...baropt}; // use default if not defined\n    let n = datavalues.length;\n\n    let ymax = Math.max(...datavalues);\n    let yrange = opt.yrange ?? [0, ymax];\n    let bbox = opt.bbox ?? [V2(0,0), V2(10,ymax)];\n\n    let ax_opt : axes_options = {\n        xrange   : [-1, n],\n        yrange   : yrange,\n        headsize : 0,\n        ticksize : opt.ticksize,\n        bbox     : bbox,\n    }\n    return ax_opt;\n}\n\n/**\n * Plot a bar chart\n * @param datavalues the data values to plot\n * @param bar_options options for the bar chart\n * @returns a diagram of the bar chart\n */\nexport function plot(datavalues : number[], bar_options : Partial<bar_options> = {}) : Diagram {\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n\n    let ax_opt = to_ax_options(datavalues, opt);\n    let ax_f = axes_transform(ax_opt);\n\n    let bar_arr = datavalues.map((y,i) => \n        rectangle(1.0-opt.gap, y).move_origin('bottom-center')\n            .position(V2(Number(i), 0)).transform(ax_f)\n    );\n    return diagram_combine(...bar_arr);\n}\n\n/**\n * x-axes with label for bar chart\n * @param datanames the data names\n * @param bar_options options for the bar chart\n * @returns a diagram of the x-axes\n */\nexport function xaxes(datanames : string[], bar_options : Partial<bar_options> = {}) : Diagram {\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n    let n = datanames.length;\n\n    let ax_opt = to_ax_options(datanames.map(() => 1), opt);\n    let ax_f = axes_transform(ax_opt);\n\n    let l = line(V2(-1,0), V2(n,0)).transform(ax_f).stroke('gray');\n    let label_arr = datanames.map((name,i) => \n        text(name).move_origin_text('top-center').position(V2(Number(i), 0)).transform(ax_f)\n            .translate(V2(0,-opt.ticksize/2)).textfill('gray')\n    );\n    return diagram_combine(l, ...label_arr);\n}\n\n/**\n * y-axes with label for bar chart\n * @param datavalues the data values\n * @param bar_options options for the bar chart\n */\nexport function yaxes(datavalues : number[], bar_options : Partial<bar_options> = {}) : Diagram {\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n\n    let ax_opt = to_ax_options(datavalues, opt);\n\n    let ymax   = ax_opt.yrange[1];\n    let yrange = opt.yrange ?? [0, ymax];\n\n    let ax_f = axes_transform(ax_opt);\n\n    let l = line(V2(-1,0), V2(-1,yrange[1])).transform(ax_f).stroke('gray');\n    return yticks(ax_opt, -1).combine(l);\n}\n\nexport function axes_tansform(datavalues : number[], bar_options : Partial<bar_options> = {}) : (v : Vector2) => Vector2 {\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n    let ax_opt = to_ax_options(datavalues, opt);\n    return axes_transform(ax_opt);\n}\n","import { Diagram, diagram_combine } from '../diagram.js';\nimport { rectangle_corner } from '../shapes.js';\nimport { V2, Vector2 } from '../vector.js';\nimport { transpose, expand_directional_value } from '../utils.js';\nimport { TAG } from '../tag_names.js';\n\nenum TableOrientation {\n    ROWS    = 'rows',\n    COLUMNS = 'columns',\n}\n\nexport type cell_style = { index : [number,number], fill? : string, stroke? : string, strokewidth? : number };\n\n/**\n * Create a table with diagrams inside\n * @param diagrams 2D array of diagrams\n * @param orientation orientation of the table (default: 'rows')\n * can be 'rows' or 'columns'\n * @param min_rowsize minimum size of each row\n * @param min_colsize minimum size of each column\n * @returns a diagram of the table with the diagrams inside\n */\nexport function table(diagrams : Diagram[][], padding : number | number[] = 0, orientation : TableOrientation = TableOrientation.ROWS, \n    min_rowsize : number = 0, min_colsize : number = 0) : Diagram {\n    // if the orientation is columns, then we just transpose the rows and columns\n    let diagram_rows = orientation == TableOrientation.ROWS ? diagrams : transpose(diagrams);\n\n    const pad = expand_directional_value(padding);\n    function f_size(d? : Diagram) : [number, number] {\n        if (d == undefined) return [min_colsize, min_rowsize];\n        let [bottomleft, topright] = d.bounding_box();\n        let width  = topright.x - bottomleft.x + pad[1] + pad[3];\n        let height = topright.y - bottomleft.y + pad[0] + pad[2];\n        return [width, height];\n    }\n\n    let row_count = diagram_rows.length;\n    let col_count = Math.max(...diagram_rows.map(row => row.length));\n    let rowsizes : number[] = Array(row_count).fill(min_rowsize);\n    let colsizes : number[] = Array(col_count).fill(min_colsize);\n    // find the maximum size of each row and column\n    for (let r = 0; r < row_count; r++) {\n        for (let c = 0; c < col_count; c++) {\n            let [w, h] = f_size(diagram_rows[r][c]);\n            rowsizes[r] = Math.max(rowsizes[r], h);\n            colsizes[c] = Math.max(colsizes[c], w);\n        }\n    }\n\n    return fixed_size(diagrams, rowsizes, colsizes, orientation);\n}\n\n/**\n * WARNING: Deprecated, use tags instead\n * Style the cells of a table\n * @param table_diagram a diagram of a table\n * @param styles an array of cell styles\n * each style has an index of the cell and the style\n * e.g. { index : [0,0], fill : 'red', stroke : 'black', strokewidth : 2 }\n * not all styles are required\n * e.g. { index : [0,0], fill : 'red' }\n * @returns a new diagram with the cells styled\n */\nexport function style_cell(table_diagram : Diagram, styles : cell_style[]) : Diagram {\n    let newd = table_diagram.copy();\n    if (table_diagram.tags.includes(TAG.CONTAIN_TABLE)) {\n        let table_index = newd.children.findIndex(d => d.tags.includes(TAG.TABLE));\n        let new_table = style_cell(newd.children[table_index], styles);\n        newd.children[table_index] = new_table;\n        return newd;\n    }\n    else if (!table_diagram.tags.includes(TAG.TABLE)) { return table_diagram; }\n\n    for (let style of styles) {\n        let [r, c] = style.index;\n        let cell = newd.children[r].children[c];\n        if (style.fill) { cell = cell.fill(style.fill); }\n        if (style.stroke) { cell = cell.stroke(style.stroke); }\n        if (style.strokewidth) { cell = cell.strokewidth(style.strokewidth); }\n        newd.children[r].children[c] = cell;\n    }\n    return newd;\n}\n\n/**\n * Create a table with fixed size\n * @param diagrams 2D array of diagrams\n * @param rowsizes size of each row\n * if `rowsizes.length` is less than `diagrams.length`, the last value will be repeated\n * e.g. [1,2,3] -> [1,2,3,3,3]\n * @param colsizes size of each column\n * if `colsizes.length` is less than `diagrams[0].length`, the last value will be repeated\n * @param orientation orientation of the table (default: 'rows')\n * can be 'rows' or 'columns'\n * @returns a diagram of the table with the diagrams inside\n */\nexport function fixed_size(diagrams : Diagram[][], rowsizes : number[], colsizes : number[]\n    , orientation : TableOrientation = TableOrientation.ROWS ) : Diagram \n{\n    // if the orientation is columns, then we just transpose the rows and columns\n    let diagram_rows = orientation == TableOrientation.ROWS ? diagrams : transpose(diagrams);\n    let row_count = diagram_rows.length;\n    let col_count = Math.max(...diagram_rows.map(row => row.length));\n\n    const empty_map = get_empty_map(diagrams);\n    let table = empty_fixed_size(row_count, col_count, rowsizes, colsizes, empty_map);\n    let points = get_points(table);\n\n    let diagram_grid : Diagram[] = [];\n    for (let r = 0; r < row_count; r++) {\n        for (let c = 0; c < col_count; c++) {\n            let d = diagram_rows[r][c];\n            if (d == undefined) continue;\n            d = d.move_origin('center-center').position(points[r][c])\n                .append_tags(TAG.TABLE_CONTENT)\n                .append_tags(TAG.ROW_ + r)\n                .append_tags(TAG.COL_ + c);\n            diagram_grid.push(d);\n        }\n    }\n    let diagram_grid_combined = diagram_combine(...diagram_grid);\n    return diagram_combine(table, diagram_grid_combined).append_tags(TAG.CONTAIN_TABLE);\n}\n\nfunction get_empty_map(diagrams : Diagram[][]) : boolean[][] {\n    let row_count = diagrams.length;\n    let col_count = Math.max(...diagrams.map(row => row.length));\n    let empty_indices_map : boolean[][] = Array(row_count).fill(false).map(() => Array(col_count).fill(false));\n    for (let r = 0; r < row_count; r++) {\n        for (let c = 0; c < col_count; c++) {\n            const d = diagrams[r][c];\n            if (d == undefined || d?.is_empty?.()) \n                empty_indices_map[r][c] = true;\n        }\n    }\n    return empty_indices_map;\n}\n\n/**\n * Create an empty table with fixed size\n * @param row_count number of rows\n * @param col_count number of columns\n * @param rowsizes size of each row\n * if `rowsizes.length` is less than `row_count`, the last value will be repeated\n * e.g. [1,2,3] -> [1,2,3,3,3]\n * @param colsizes size of each column\n * if `colsizes.length` is less than `col_count`, the last value will be repeated\n */\nexport function empty_fixed_size(row_count : number, col_count : number, \n    rowsizes : number[], colsizes : number[], empty_map : boolean[][]\n) : Diagram \n{\n    while (rowsizes.length < row_count) { rowsizes.push(rowsizes[rowsizes.length-1]); }\n    while (colsizes.length < col_count) { colsizes.push(colsizes[colsizes.length-1]); }\n\n    let rows : Diagram[] = [];\n    let y_top = 0;\n    for (let r = 0; r < row_count; r++) {\n        let y_bot   = y_top - rowsizes[r];\n        let x_left = 0;\n        let cols : Diagram[] = [];\n        for (let c = 0; c < col_count; c++) {\n            let x_right = x_left + colsizes[c];\n            let x_mid = (x_left + x_right) / 2;\n            let y_mid = (y_top + y_bot) / 2;\n\n            //TODO: draw line instead of recangles\n            let rect = rectangle_corner(V2(x_left, y_bot), V2(x_right, y_top)).move_origin(V2(x_mid, y_mid))\n                .append_tags(TAG.TABLE_CELL)\n                .append_tags(TAG.ROW_ + r)\n                .append_tags(TAG.COL_ + c);\n            if (empty_map[r][c]) rect = rect.append_tags(TAG.EMPTY_CELL);\n            cols.push(rect);\n            x_left = x_right;\n        }\n        rows.push(diagram_combine(...cols));\n        y_top = y_bot;\n    }\n\n    return diagram_combine(...rows).append_tags(TAG.TABLE);\n}\n\n/**\n * Get the midpoints of the cells from a table diagram\n * @param table_diagram a table diagram\n * @returns a 2D array of points\n * the first index is the row, the second index is the column\n */\nexport function get_points(table_diagram : Diagram) : Vector2[][] {\n    let table_diagram_ = table_diagram;\n    if (table_diagram.tags.includes(TAG.CONTAIN_TABLE)) {\n        for (let d of table_diagram.children){\n            if (d.tags.includes(TAG.TABLE)) {\n                table_diagram_ = d;\n                break;\n            }\n        }\n    }\n    if (!table_diagram_.tags.includes(TAG.TABLE)) return [];\n\n    let rows : Vector2[][] = [];\n    for (let row of table_diagram_.children){\n        let cols : Vector2[] = [];\n        for (let cell of row.children){\n            cols.push(cell.origin);\n        }\n        rows.push(cols);\n    }\n    return rows;\n}\n","import { Diagram, line, text, diagram_combine } from '../diagram.js';\nimport { V2 } from '../vector.js';\nimport { arrow2 } from '../shapes.js'\nimport { TAG } from '../tag_names.js';\n\n/**\n * Draw an empty axis from xmin to xmax with arrowsize\n * @param xmin minimum value of the numberline\n * @param xmax maximum value of the numberline\n * @param arrowsize the size of the arrowhead\n * returns a Diagram\n */\nexport function axis(xmin : number, xmax : number, arrowsize : number = 1) : Diagram {\n    return arrow2(V2(xmin, 0), V2(xmax,0), arrowsize).fill('black').append_tags(TAG.GRAPH_AXIS);\n}\n\n/**\n * Draw a numbered ticks for a numberline\n * @param xs the values of the ticks\n * @param ticksize the size of the ticks\n * @param number_offset the offset of the number from the ticks\n * returns a Diagram\n */\nexport function numbered_ticks(xs : number[], ticksize : number, number_offset : number) : Diagram {\n    let d_ticks : Diagram[] = [];\n    for (let i of xs) {\n        let tick = line(V2(i, -ticksize/2), V2(i, ticksize/2)).stroke('black').append_tags(TAG.GRAPH_TICK);\n        let num  = text(i.toString()).move_origin('top-center').position(V2(i, -ticksize/2 - number_offset))\n            .append_tags(TAG.GRAPH_TICK_LABEL);\n        d_ticks.push(diagram_combine(tick, num));\n    }\n    return diagram_combine(...d_ticks);\n}\n\n/**\n * Draw ticks for a numberline\n * @param xs the values of the ticks\n * @param ticksize the size of the ticks\n * returns a Diagram\n */\nexport function ticks(xs : number[], ticksize : number) : Diagram {\n    let d_ticks : Diagram[] = [];\n    for (let i of xs) {\n        let tick = line(V2(i, -ticksize/2), V2(i, ticksize/2)).stroke('black').append_tags(TAG.GRAPH_TICK);\n        d_ticks.push(tick);\n    }\n    return diagram_combine(...d_ticks);\n}\n\n/**\n * Draw a single tick for a numberline\n * @param x the value of the tick\n * @param txt the text of the tick\n * @param ticksize the size of the tick\n * @param text_offset the offset of the text from the tick\n * returns a Diagram\n */\nexport function single_tick(x : number, txt : string, ticksize : number, text_offset : number) : Diagram {\n    let tick = line(V2(x, -ticksize/2), V2(x, ticksize/2)).stroke('black').append_tags(TAG.GRAPH_TICK);\n    if (txt == '') return tick;\n\n    let num  = text(txt).move_origin('top-center').position(V2(x, -ticksize/2 - text_offset))\n        .append_tags(TAG.GRAPH_TICK_LABEL);\n    return diagram_combine(tick, num);\n}\n","import { Diagram, line, text, diagram_combine } from '../diagram.js';\nimport { Vector2, V2 } from '../vector.js';\nimport { rectangle, arrow2 } from '../shapes.js'\nimport { axes_options, xticks, yticks, axes_transform, xtickmark_empty, ytickmark_empty } from './shapes_graph.js'\n\nexport type boxplot_options = {\n    range? : [number, number],\n    ticks? : number[],\n    bbox? : [Vector2, Vector2],\n    ticksize : number,\n    headsize : number,\n    orientation : 'x' | 'y',\n    tick_label_offset? : number,\n}\n\nexport let default_bar_options : boxplot_options = {\n    ticksize: 0.2,\n    range : [0,1],\n    bbox: [V2(0,0), V2(10,10)],\n    orientation: 'x',\n    headsize : 0.05,\n    tick_label_offset : 0,\n}\n\nexport function to_ax_options(baropt : Partial<boxplot_options>) : axes_options {\n    let opt = {...default_bar_options, ...baropt}; // use default if not defined\n    opt.bbox = opt.bbox ?? [V2(0,0), V2(10,10)]; // just to make sure it is defined\n\n    if (opt.orientation == 'x') {\n        let ax_opt : axes_options = {\n            xrange   : opt.range as [number, number],\n            yrange   : [opt.bbox[0].y, opt.bbox[1].y],\n            xticks   : opt.ticks,\n            headsize : opt.headsize,\n            ticksize : opt.ticksize,\n            bbox     : opt.bbox,\n            tick_label_offset : opt.tick_label_offset,\n        }\n        return ax_opt;\n    } else {\n        let ax_opt : axes_options = {\n            xrange   : [opt.bbox[0].x, opt.bbox[1].x],\n            yrange   : opt.range as [number, number],\n            yticks   : opt.ticks,\n            headsize : opt.headsize,\n            ticksize : opt.ticksize,\n            bbox     : opt.bbox,\n            tick_label_offset : opt.tick_label_offset,\n        }\n        return ax_opt;\n    }\n}\n\n\n/**\n * axis for boxplot\n * @param bar_options options for the bar chart\n * @returns a diagram of the axes\n */\nexport function axes(bar_options : Partial<boxplot_options> = {}) : Diagram {\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n    let ax_opt = to_ax_options(opt);\n    // let ax_f = axes_transform(ax_opt);\n\n    let [lowerleft, upperright] = opt.bbox as [Vector2, Vector2];\n\n    if (opt.orientation == 'x') {\n        let xaxis = arrow2(V2(lowerleft.x,0), V2(upperright.x,0), opt.headsize);\n        let xtickmarks = xticks(ax_opt, 0);\n        return diagram_combine(xaxis, xtickmarks).stroke('gray').fill('gray');\n    } else {\n        let yaxis = arrow2(V2(0,lowerleft.y), V2(0,upperright.y), opt.headsize);\n        let ytickmarks = yticks(ax_opt, 0);\n        return diagram_combine(yaxis, ytickmarks).stroke('gray').fill('gray');\n    }\n}\n\n/**\n */\nexport function empty_tickmarks(xs: number[], bar_options : Partial<boxplot_options> = {}) : Diagram {\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n    let ax_opt = to_ax_options(opt);\n    // let ax_f = axes_transform(ax_opt);\n    if (opt.orientation == 'x') {\n        ax_opt.xticks = xs;\n        return xticks(ax_opt, 0, true);\n    } else {\n        ax_opt.yticks = xs;\n        return yticks(ax_opt, 0, true);\n    }\n}\n\n/**\n * Plot a boxplot from quartiles\n * @param quartiles [Q0, Q1, Q2, Q3, Q4]\n * @param pos position of the boxplot\n * @param size size of the boxplot\n * @param bar_options options for the bar chart\n * @returns a diagram of the boxplot\n */\nexport function plotQ(quartiles : number[], pos : number, size : number, bar_options : Partial<boxplot_options>){\n    let opt = {...default_bar_options, ...bar_options}; // use default if not defined\n    let ax_opt = to_ax_options(opt);\n    let ax_f = axes_transform(ax_opt);\n    let [Q0, Q1, Q2, Q3, Q4] = quartiles;\n\n    let whisker_size = 0.8 * size;\n    if (opt.orientation == 'x') {\n        let box = rectangle(Q3-Q1, size).move_origin('center-left').position(V2(Q1, pos)).transform(ax_f);\n        let min    = line(V2(Q0, pos - whisker_size/2), V2(Q0, pos + whisker_size/2)).transform(ax_f);\n        let max    = line(V2(Q4, pos - whisker_size/2), V2(Q4, pos + whisker_size/2)).transform(ax_f);\n        let median = line(V2(Q2, pos - size/2), V2(Q2, pos + size/2)).transform(ax_f);\n        let whisker_min = line(V2(Q0, pos), V2(Q1, pos)).transform(ax_f);\n        let whisker_max = line(V2(Q3, pos), V2(Q4, pos)).transform(ax_f);\n        return diagram_combine(box, min, max, median, whisker_min, whisker_max);\n    } else {\n        let box = rectangle(size, Q3-Q1).move_origin('bottom-center').position(V2(pos, Q1)).transform(ax_f);\n        let min    = line(V2(pos - whisker_size/2, Q0), V2(pos + whisker_size/2, Q0)).transform(ax_f);\n        let max    = line(V2(pos - whisker_size/2, Q4), V2(pos + whisker_size/2, Q4)).transform(ax_f);\n        let median = line(V2(pos - size/2, Q2), V2(pos + size/2, Q2)).transform(ax_f);\n        let whisker_min = line(V2(pos, Q0), V2(pos, Q1)).transform(ax_f);\n        let whisker_max = line(V2(pos, Q3), V2(pos, Q4)).transform(ax_f);\n        return diagram_combine(box, min, max, median, whisker_min, whisker_max);\n    }\n}\n\n// TODO: plot boxplot from data\n// TODO: plot multiple boxplots at once\n","import { Diagram, line as dgline, text, diagram_combine, empty  } from '../diagram.js';\nimport { circle, textvar } from '../shapes.js';\nimport { V2, Vector2, Vdir } from '../vector.js';\n\nenum GeoType {\n    LINE = 'LINE',\n}\nexport type GeoCtx = {[key : string] : (GeoObj | Vector2 | number)}\nexport interface GeoObj { type : GeoType; }\n\nexport interface GeoLine extends GeoObj {\n    type : GeoType.LINE;\n    p : Vector2\n    dir : Vector2 // not necessarily a unit vector\n}\n// TODO : CeoCircle\n\nexport function intersect(o1 : GeoObj, o2 : GeoObj) : Vector2[] {\n    if (o1.type === GeoType.LINE && o2.type === GeoType.LINE) {\n        let l1 = o1 as GeoLine;\n        let l2 = o2 as GeoLine;\n        let p = line_intersection(l1, l2);\n        return [p]\n    }\n    return [];\n}\n\n\n/**\n * Get a point that is `d` distance away from `p` in the direction of `dir`\n * *ideally, point `p` should be in line `l`*\n */\nexport function point_onLine_atDistance_from(l : GeoLine, d : number, p : Vector2) : Vector2 {\n    let dir = l.dir.normalize();\n    return p.add(dir.scale(d));\n}\n\n/**\n * Get a point\n * - that is collinear with `p1` and `p2`\n * - that is `len` away from `p2` in the direction away from `p1`\n */\nexport function point_collinear_extend_length(p1 : Vector2, p2 : Vector2, len : number) : Vector2 {\n    let dir = p2.sub(p1).normalize();\n    return p2.add(dir.scale(len));\n}\n\n/** Get a point that is `t` fraction of the way from `p1` to `p2` */\nexport function point_collinear_fraction(p1 : Vector2, p2 : Vector2, t : number) : Vector2 {\n    let dir = p2.sub(p1);\n    return p1.add(dir.scale(t));\n}\n\n/** Get a point on line `l` with x-coordinate `x` */\nexport function point_onLine_with_x(l : GeoLine, x : number) : Vector2 {\n    let m = l.dir.y / l.dir.x;\n    let c = l.p.y - m * l.p.x;\n    return V2(x, m * x + c);\n}\n\n/** Get a point on line `l` with y-coordinate `y` */\nexport function point_onLine_with_y(l : GeoLine, y : number) : Vector2 {\n    let m = l.dir.y / l.dir.x;\n    let c = l.p.y - m * l.p.x;\n    return V2((y - c) / m, y);\n}\n\n\n/** Get the intersection point of two lines */\nexport function line_intersection(l1 : GeoLine, l2 : GeoLine) : Vector2 {\n    let a1 = l1.p; let b1 = l1.p.add(l1.dir);\n    let a2 = l2.p; let b2 = l2.p.add(l2.dir);\n\n    let x1 = a1.x; let y1 = a1.y; let x2 = b1.x; let y2 = b1.y;\n    let x3 = a2.x; let y3 = a2.y; let x4 = b2.x; let y4 = b2.y;\n\n    let d = (x1-x2)*(y3-y4) - (y1-y2)*(x3-x4);\n    let x = ((x1*y2 - y1*x2)*(x3-x4) - (x1-x2)*(x3*y4 - y3*x4))/d;\n    let y = ((x1*y2 - y1*x2)*(y3-y4) - (y1-y2)*(x3*y4 - y3*x4))/d;\n    return V2(x, y);\n}\n\n\n// Constructing lines\nexport function line(p : Vector2, dir : Vector2) : GeoLine {\n    return {type:GeoType.LINE, p, dir};\n}\nexport function line_from_points(p1 : Vector2, p2 : Vector2) : GeoLine {\n    return line(p1, p2.sub(p1));\n}\nexport function line_from_slope(p : Vector2, slope : number) : GeoLine {\n    return line(p, V2(1, slope));\n}\nexport function line_from_angle(p : Vector2, angle : number) : GeoLine {\n    return line(p, Vdir(angle));\n}\n\n/** Define a line that is parallel to `l` and passes through `p` */\nexport function line_parallel_at_point(l : GeoLine, p : Vector2) : GeoLine {\n    return line(p, l.dir);\n}\n/** Define a line that is perpendicular to `l` and passes through `p` */\nexport function line_perpendicular_at_point(l : GeoLine, p : Vector2) : GeoLine {\n    return line(p, V2(-l.dir.y, l.dir.x));\n}\n/** Define a line that has the direction of `l` rotated by `angle` and passes through `p` */\nexport function line_rotated_at_point(l : GeoLine, angle : number, p : Vector2) : GeoLine {\n    return line(p, l.dir.rotate(angle));\n}\n\nfunction line_intersect_bbox(l : GeoLine, bbox : [Vector2, Vector2]) : Diagram | undefined {\n    let [bottom_left, top_right] = bbox;\n    let bl = bottom_left;\n    let tr = top_right;\n    let tl = V2(bl.x, tr.y);\n    let br = V2(tr.x, bl.y);\n    let intersections = [\n        line_intersection(l, line_from_points(tl, tr)),\n        line_intersection(l, line_from_points(tr, br)),\n        line_intersection(l, line_from_points(br, bl)),\n        line_intersection(l, line_from_points(bl, tl)),\n    ];\n    const tol = 1e-6; // tolerance\n    const is_inside_bbox = (p : Vector2) => { \n        return p.x >= bl.x - tol && p.x <= tr.x + tol && p.y >= bl.y - tol && p.y <= tr.y + tol;\n    }\n    let points = intersections.filter(p => is_inside_bbox(p));\n    if (points.length <= 1) return undefined;\n    return dgline(points[0], points[1]);\n}\n\n// drawing\nfunction normalize_padding(padding : number[] | number) : [number, number, number, number] {\n    let p = (typeof padding === 'number') ? [padding] : padding;\n    switch (p.length) {\n        case 0: return [0, 0, 0, 0];\n        case 1: return [p[0], p[0], p[0], p[0]];\n        case 2: return [p[0], p[1], p[0], p[1]];\n        case 3: return [p[0], p[1], p[2], p[1]];\n        default: return [p[0], p[1], p[2], p[3]];\n    }\n}\n\n/**\n * Get a preview diagram of the context\n * @param ctx the Geo context (a dictionary of GeoObj and Vector2)\n * @param pad padding around the diagram (determine how far away from the defined point the visible diagram is)\n */\nexport function get_preview_diagram(ctx : GeoCtx, pad? : number[] | number) : Diagram {\n    let points : {name : string, p : Vector2}[] = [];\n    let lines : {name : string, obj : GeoLine}[] = [];\n\n    let typelist : {[key in GeoType] : {name: string, obj : GeoObj}[]} = {\n        [GeoType.LINE] : lines\n    }\n\n    let object_names = Object.keys(ctx);\n    for (let name of object_names) {\n        let obj = ctx[name];\n        if (typeof(obj) === 'number'){\n            continue;\n        }\n        else if (obj instanceof Vector2) {\n            points.push({name, p:obj});\n        } else {\n            typelist[obj.type].push({name, obj});\n        }\n    }\n\n    let minx = Math.min(...points.map(p => p.p.x));\n    let maxx = Math.max(...points.map(p => p.p.x));\n    let miny = Math.min(...points.map(p => p.p.y));\n    let maxy = Math.max(...points.map(p => p.p.y));\n\n    if (pad == undefined) pad = Math.max(maxx - minx, maxy - miny) * 0.1;\n    pad = normalize_padding(pad);\n    let bbox = [V2(minx - pad[0], miny - pad[1]), V2(maxx + pad[2], maxy + pad[3])] as [Vector2, Vector2];\n\n    let dg_lines = lines.map(l => line_intersect_bbox(l.obj, bbox)).filter(d => d !== undefined) as Diagram[];\n    let r = Math.max(bbox[1].x - bbox[0].x, bbox[1].y - bbox[0].y) * 0.01 * 2/3;\n    let dg_points = points.map(p => {\n        let c = circle(r).translate(p.p).fill('black');\n        let name = textvar(p.name).translate(p.p.add(V2(r*2, r*2))).move_origin_text('bottom-left');\n        let namebg = name.copy().textfill('white').textstroke('white').textstrokewidth(10).opacity(0.7)\n        return c.combine(namebg, name)\n    });\n    return diagram_combine(...dg_lines, ...dg_points);\n}\n","import { Diagram } from '../diagram.js';\nimport { V2 } from '../vector.js';\nimport { size } from './shapes_geometry.js';\nimport type { TreeNode } from './shapes_tree.js';\n\n// C. Buchheim, M. J Unger, and S. Leipert. Improving Walker's algorithm to run in linear time. In Proc. Graph Drawing (GD), 2002. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.16.8757\n// article : https://llimllib.github.io/pymag-trees/\nexport class TreeDraw  {\n    diagram: Diagram;\n    size: [number,number];\n    tree: TreeNode;\n    children: TreeDraw[];\n    x : number; \n    y : number;\n    parent: TreeDraw | undefined;\n    thread: TreeDraw | undefined;\n    mod: number;\n    ancestor: TreeDraw;\n    change: number;\n    shift: number;\n    number: number;\n\n    constructor(tree: TreeNode, parent : TreeDraw | undefined, depth : number = 0, number : number = 0) {\n        this.diagram = tree.value;\n        this.size = size(this.diagram);\n        this.x = -1.0;\n        this.y = depth;\n        this.tree = tree;\n        let tree_children = tree.children ?? [];\n        this.children = tree_children.map((child, i) => new TreeDraw(child, this, depth + 1, i));\n        this.parent = parent;\n        this.thread = undefined;\n        this.mod = 0;\n        this.ancestor = this;\n        this.change = 0;\n        this.shift = 0;\n        this.number = number;\n    }\n\n    left() : TreeDraw | undefined {\n        if (this.thread) return this.thread;\n        if (this.children.length > 0) return this.children[0];\n        return undefined;\n    }\n    right() : TreeDraw | undefined{\n        if (this.thread) return this.thread;\n        if (this.children.length > 0) return this.children[this.children.length-1];\n        return undefined;\n    }\n    lsibling() : TreeDraw | undefined {\n        if (!this.parent) return undefined;\n        if (this.number > 0) return this.parent.children[this.number-1];\n        return undefined;\n    }\n}\n\nexport function calculate_tree_buchheim(tree : TreeNode, vertical_dist : number, horizontal_gap : number) : TreeDraw{\n    let treeDraw = new TreeDraw(tree, undefined);\n    let dt = first_walk(treeDraw, horizontal_gap);\n    let min = second_walk(dt, 0, 0, vertical_dist, 0);\n    if (min < 0) third_walk(dt, -min);\n    position_diagram(dt);\n    return dt;\n}\n\nfunction position_diagram(tree : TreeDraw) {\n    tree.diagram = tree.diagram.position(V2(tree.x, tree.y));\n    tree.children.forEach(position_diagram);\n}\n\nfunction third_walk(td : TreeDraw, n : number){\n    td.x += n;\n    td.children.forEach(child => third_walk(child, n));\n}\n\nfunction first_walk(td : TreeDraw, horizontal_gap : number){\n    let self_halfwidth = td.size[0] / 2;\n    if (td.children.length === 0){\n        let lbrother = td.lsibling();\n        if (lbrother) {\n            let lbrother_halfwidth = lbrother.size[0] / 2;\n            let dist = lbrother_halfwidth + self_halfwidth + horizontal_gap;\n            td.x = lbrother.x + dist;\n        } else {\n            td.x = 0\n        }\n    } else {\n        let default_ancestor = td.children[0];\n        td.children.forEach(w => {\n            first_walk(w, horizontal_gap);\n            default_ancestor = apportion(w, default_ancestor, horizontal_gap);\n        });\n        execute_shifts(td);\n        let midpoint = (td.children[0].x + td.children[td.children.length-1].x) / 2;\n        let lbrother = td.lsibling();\n        if (lbrother){\n            let lbrother_halfwidth = lbrother.size[0] / 2;\n            let dist = lbrother_halfwidth + self_halfwidth + horizontal_gap;\n            td.x = lbrother.x + dist;\n            td.mod = td.x - midpoint;\n        } else {\n            td.x = midpoint;\n        }\n    }\n    return td;\n}\n\ntype V = TreeDraw | undefined;\nfunction apportion(v : TreeDraw, default_ancestor : TreeDraw, horizontal_gap : number) {\n    let w = v.lsibling();\n    if (w !== undefined) {\n        let lmost_sibling = (!v.parent || v.number === 0) ? undefined : v.parent.children[0];\n        let vir : V = v;\n        let vor : V = v;\n        let vil : V = w;\n        let vol : V = lmost_sibling ;\n        let sir = v.mod;\n        let sor = v.mod;\n        let sil = vil.mod;\n        let sol = vol!.mod;\n\n        while (vil?.right() !== undefined && vir?.left() !== undefined) {\n            vil = vil.right();\n            vir = vir.left();\n            vol = vol?.left();\n            vor = vor?.right();\n            vor!.ancestor = v;\n            let lhalfwidth = vil!.size[0] / 2;\n            let rhalfwidth = vir!.size[0] / 2;\n            let dist = lhalfwidth + rhalfwidth + horizontal_gap;\n            let shift = (vil!.x + sil) - (vir!.x + sir) + dist;\n            if (shift > 0) {\n                let a = ancestor(vil!, v, default_ancestor);\n                move_subtree(a, v, shift);\n                sir += shift;\n                sor += shift;\n            }\n            sil += vil!.mod;\n            sir += vir!.mod;\n            sol += vol!.mod;\n            sor += vor!.mod;\n        }\n        if (vil!.right() !== undefined && vor!.right() === undefined) {\n            vor!.thread = vil!.right();\n            vor!.mod += sil - sor;\n        } else {\n            if (vir?.left() !== undefined && vol?.left() === undefined) {\n                vol!.thread = vir.left();\n                vol!.mod += sir - sol;\n            }\n            default_ancestor = v;\n        }\n    }\n    return default_ancestor;\n}\n\nfunction move_subtree(wl : TreeDraw, wr : TreeDraw, shift : number){\n    let subtrees = wr.number - wl.number;\n    wr.change -= shift / subtrees;\n    wr.shift += shift;\n    wl.change += shift / subtrees;\n    wr.x += shift;\n    wr.mod += shift;\n}\n\nfunction execute_shifts(td : TreeDraw){\n    let shift = 0;\n    let change = 0;\n    for (let i = td.children.length - 1; i >= 0; i--){\n        let w = td.children[i];\n        w.x += shift;\n        w.mod += shift;\n        change += w.change;\n        shift += w.shift + change;\n    }\n}\n\nfunction ancestor(vil : TreeDraw, v : TreeDraw, default_ancestor : TreeDraw){\n    if (v.parent?.children.includes(vil.ancestor)) return vil.ancestor;\n    return default_ancestor;\n}\n\nfunction second_walk(td : TreeDraw, m : number, depth : number, vertical_dist : number, min? : number){\n    td.x += m;\n    td.y = -depth * vertical_dist;\n\n    // if (min === undefined) min = v.x;\n    min = Math.min(min ?? td.x, td.x);\n\n    td.children.forEach(w => {\n        min = second_walk(w, m + td.mod, depth + 1, vertical_dist, min);\n    });\n    return min;\n}\n","import { Diagram, diagram_combine, line } from '../diagram.js';\nimport { calculate_tree_buchheim, TreeDraw } from './utils_tree.js';\n\n\nexport interface TreeNode {\n    value: Diagram;\n    children?: TreeNode[];\n}\n\n/**\n * Create a tree diagram from a tree node\n * @param node root node of the tree\n * @param vertical_dist vertical distance between nodes\n * @param horizontal_gap horizontal gap between nodes\n * @returns tree diagram\n */\nexport function tree(node : TreeNode, vertical_dist : number, horizontal_gap : number) : Diagram {\n    let treeDraw = calculate_tree_buchheim(node, vertical_dist, horizontal_gap);\n    return diagram_from_treeDraw(treeDraw);\n}\n\n/**\n * Mirror a tree node\n * @param node root node of the tree\n * @returns mirrored tree node\n */\nexport function mirror_treenode(node : TreeNode) : TreeNode {\n    return {value: node.value, children: (node.children ?? []).map(mirror_treenode).reverse()};\n}\n\n/**\n * Helper function to create a diagram from a treeDraw\n * @param node treeDraw node\n * @returns diagram\n */\nfunction diagram_from_treeDraw(node : TreeDraw) : Diagram {\n    let node_dg = node.diagram;\n    let children_dglist = node.children.map(diagram_from_treeDraw);\n    let line_diagrams = node.children.map(child_node => {\n        let start = node_dg.get_anchor('bottom-center');\n        let end = child_node.diagram.get_anchor('top-center');\n        return line(start, end);\n    });\n    return diagram_combine(node_dg, ...line_diagrams, ...children_dglist);\n}\n\n","import { Diagram, curve } from '../diagram.js';\nimport { V2, Vector2 } from '../vector.js';\n\n/**\n* Combine multiple curves into a single curve\n* @param curves an array of curves\n* \\* you can reverse the order of the point in a curve by using the reverse() method\n*/\nexport function curve_combine(...curves : Diagram[]) : Diagram {\n    const points = curves.map(c => c.path?.points ?? []).flat();\n    return curve(points);\n}\n\nexport function bezier_quadratic(p0 : Vector2, p1 : Vector2, p2 : Vector2, n_sample = 100 ) {\n    const dt = 1/(n_sample-1);\n    const points = Array<Vector2>(n_sample);\n    for (let i = 0; i < n_sample; i++) {\n        const t = i*dt;\n        // B(t) = (1-t)^2 * P0 + 2t(1-t)P1 + t^2P2\n        const a = p0.scale((1-t)*(1-t));\n        const b = p1.scale(2*t*(1-t));\n        const c = p2.scale(t*t);\n        points[i] = a.add(b).add(c);\n    }\n    return curve(points);\n}\n\nexport function bezier_cubic(p0 : Vector2, p1 : Vector2, p2 : Vector2, p3 : Vector2, n_sample = 100 ) {\n    const dt = 1/(n_sample-1);\n    const points = Array<Vector2>(n_sample);\n    for (let i = 0; i < n_sample; i++) {\n        const t = i*dt;\n        // B(t) = (1-t)^3 * P0 + 3t(1-t)^2P1 + 3t^2(1-t)P2 + t^3P3\n        const a = p0.scale((1-t)*(1-t)*(1-t));\n        const b = p1.scale(3*t*(1-t)*(1-t));\n        const c = p2.scale(3*t*t*(1-t));\n        const d = p3.scale(t*t*t);\n        points[i] = a.add(b).add(c).add(d);\n    }\n    return curve(points);\n}\n\n// interpolations\n\n/**\n* Create a curve from the cubic spline interpolation of the given points\n* @param points array of points to interpolate\n* @param n number of points to interpolate between each pair of points (default 10)\n*/\nexport function cubic_spline(points : Vector2[], n : number = 10) : Diagram {\n    const interpolated_points = interpolate_cubic_spline(points, n);\n    return curve(interpolated_points);\n}\n\n/**\n * Cubic spline interpolation\n * @param points array of points to interpolate\n * @param n number of points to interpolate between each pair of points (default 10)\n * @returns array of interpolated points\n */\nexport function interpolate_cubic_spline(points: Vector2[], n: number = 10): Vector2[] {\n    const n_points = points.length;\n    let a: number[] = points.map(p => p.y);\n    let b: number[] = new Array(n_points).fill(0);\n    let d: number[] = new Array(n_points).fill(0);\n    let h: number[] = new Array(n_points - 1);\n    for (let i = 0; i < n_points - 1; i++) {\n        h[i] = points[i + 1].x - points[i].x;\n    }\n\n    // Solve tridiagonal system for the c[i] coefficients (second derivatives)\n    let alpha : number[] = new Array(n_points - 1).fill(0);\n    let c     : number[] = new Array(n_points).fill(0);\n    let l     : number[] = new Array(n_points).fill(1);\n    let mu    : number[] = new Array(n_points).fill(0);\n    let z     : number[] = new Array(n_points).fill(0);\n\n    for (let i = 1; i < n_points - 1; i++) {\n        alpha[i] = (3 / h[i]) * (a[i + 1] - a[i]) - (3 / h[i - 1]) * (a[i] - a[i - 1]);\n    }\n\n    for (let i = 1; i < n_points - 1; i++) {\n        l[i] = 2 * (points[i + 1].x - points[i - 1].x) - h[i - 1] * mu[i - 1];\n        mu[i] = h[i] / l[i];\n        z[i] = (alpha[i] - h[i - 1] * z[i - 1]) / l[i];\n    }\n\n    // Back substitution\n    for (let j = n_points - 2; j >= 0; j--) {\n        c[j] = z[j] - mu[j] * c[j + 1];\n        b[j] = (a[j + 1] - a[j]) / h[j] - h[j] * (c[j + 1] + 2 * c[j]) / 3;\n        d[j] = (c[j + 1] - c[j]) / (3 * h[j]);\n    }\n\n    // Now that we have coefficients, we can construct the spline between each pair of points\n    let spline_points: Vector2[] = [];\n    for (let i = 0; i < n_points - 1; i++) {\n        for (let j = 0; j <= n; j++) {\n            let x = points[i].x + j * (points[i + 1].x - points[i].x) / n;\n            let y = a[i] + b[i] * (x - points[i].x) + c[i] * Math.pow(x - points[i].x, 2) + d[i] * Math.pow(x - points[i].x, 3);\n            spline_points.push(V2(x, y));\n        }\n    }\n\n    return spline_points;\n}\n","// Simple encoding/decoding utilities using btoa, atob and encodeURIComponent, decodeURIComponent\n// can be used to store user code and pass it in the URL\n\nexport function encode(s: string): string {\n    return btoa(encodeURIComponent(s));\n}\n\nexport function decode(s: string): string {\n    return decodeURIComponent(atob(s));\n}\n"],"names":["Vector2","constructor","x","y","this","add","v","sub","scale","s","mul","rotate","angle","Math","cos","sin","dot","cross","equals","length","sqrt","length_sq","atan2","normalize","len","copy","apply","f","V2","Vdir","Transform","translate","p","pivot","origin","reflect_over_point","q","PI","reflect_over_line","p1","p2","n","d","skewX","ybase","tan","skewY","xbase","BB_TokenType","TAG","DiagramType","BB_Lexer","parse_tag_content","str","name","substring","type","CLOSE_TAG","attributes","_tag_name","space_id","indexOf","equal_id","OPEN_TAG","value","Error","parse","text","tokens","pos","TagLeft","push","TEXT","_text","TagRight","nextTagLeft","tag_content","BB_multiline","from_BBCode","linespace","tspans","tag_stack","console","error","token","dy","_a","build_style","style","pop","split_tspans_by_words","text_span_data","new_text_span_data","span","words","split","i","word","JSON","stringify","tag","DEFAULT_FONTSIZE","Diagram","type_","args","children","path","undefined","textdata","multilinedata","imgdata","mutable","tags","_bbox_cache","mut","mut_parent_only","immut","newd","deep_setPrototypeOf","obj","Object","setPrototypeOf","prototype","objd","c","Path","copy_if_not_mutable","append_tags","Array","isArray","includes","remove_tags","filter","t","reset_tags","contain_tag","contain_all_tags","collect_children","concat","flatten","func","apply_recursive","apply_to_tagged_recursive","get_tagged_elements","result","combine","diagrams","diagram_combine","to_curve","Polygon","Curve","to_polygon","add_points","points","last_child","update_style","stylename","stylevalue","excludedType","Text","Image","MultilineText","clone_style_from","diagram","assign","fill","color","stroke","opacity","toString","strokewidth","width","strokelinecap","linecap","strokelinejoin","linejoin","strokedasharray","dasharray","join","vectoreffect","textfill","textstroke","textstrokewidth","update_textdata","textdataname","textdatavalue","fontfamily","fontstyle","fontsize","fontweight","fontscale","textanchor","textdy","textangle","text_tovar","TEXTVAR","text_totext","bounding_box","minx","Infinity","miny","maxx","maxy","child","min","max","bbox","point","transform","transform_function","prev_cached_bbox","map","position","dv","scaletext","parseFloat","base","reflect","vflip","a","hflip","get_anchor","anchor","midx","midy","move_origin","__move_origin_text","anchor_to_textdata","move_origin_text","path_length","reverse_path","reverse","parametric_point","segment_index","cumuative_length","total_length","cumulative_t","l","child_id","prev_t","segment_t","debug_bbox","rect_bbox","polygon","origin_x","debug","show_index","style_path","style_index","bg","dd","empty","f_obj","curve","deb_bbox","deb_object","prev_point","point_texts","minimum_dist_tolerance","is_empty","EMPTY","newpoints","newp","closed","extended_points","cumulative_length","segment_id","start","dir","newdiagrams","all_children_mutable","line","end","LINE","condition","message","assert","image","src","height","multiline","spans","content","multiline_bb","bbstr","split_by_word","to_radian","to_degree","array_repeat","arr","new_arr","linspace","step","linspace_exc","range","floor","range_inc","transpose","j","expand_directional_value","padding","tab_color","blue","lightblue","orange","lightorange","green","lightgreen","red","lightred","purple","lightpurple","brown","lightbrown","pink","lightpink","grey","lightgrey","gray","lightgray","olive","lightolive","cyan","lightcyan","get_color","colorname","palette","unicode_mathematical_italic","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","b","e","g","h","k","m","o","r","u","w","z","fromEntries","entries","latex_greek","latex_symbols","textfractionsolidus","leftrightsquigarrow","textpertenthousand","blacktriangleright","blacktriangledown","blacktriangleleft","twoheadrightarrow","leftrightharpoons","rightleftharpoons","textreferencemark","circlearrowright","rightrightarrows","vartriangleright","textordmasculine","textvisiblespace","twoheadleftarrow","downharpoonright","ntrianglerighteq","rightharpoondown","textperthousand","leftrightarrows","textmusicalnote","nleftrightarrow","rightleftarrows","bigtriangledown","textordfeminine","ntrianglelefteq","rightthreetimes","trianglerighteq","vartriangleleft","rightsquigarrow","downharpoonleft","curvearrowright","circlearrowleft","leftharpoondown","nLeftrightarrow","curvearrowleft","guilsinglright","leftthreetimes","leftrightarrow","rightharpoonup","guillemotright","downdownarrows","hookrightarrow","dashrightarrow","leftleftarrows","trianglelefteq","ntriangleright","doublebarwedge","upharpoonright","rightarrowtail","looparrowright","Leftrightarrow","sphericalangle","divideontimes","measuredangle","blacktriangle","ntriangleleft","mathchar1356","texttrademark","mathchar2208","triangleright","leftarrowtail","guilsinglleft","upharpoonleft","fallingdotseq","looparrowleft","textbrokenbar","hookleftarrow","smallsetminus","dashleftarrow","guillemotleft","leftharpoonup","bigtriangleup","textcircledP","risingdotseq","triangleleft","mathsterling","textcurrency","triangledown","blacklozenge","preccurlyeq","Rrightarrow","circledcirc","nRightarrow","vartriangle","Updownarrow","nrightarrow","succcurlyeq","diamondsuit","curlyeqsucc","blacksquare","curlyeqprec","updownarrow","backepsilon","circleddash","eqslantless","nsupseteqq","textrecipe","nsubseteqq","subsetneqq","upuparrows","nleftarrow","eqslantgtr","curlywedge","varepsilon","supsetneqq","rightarrow","sqsubseteq","sqsupseteq","complement","Rightarrow","gtreqqless","lesseqqgtr","circledast","nLeftarrow","Lleftarrow","varnothing","Leftarrow","gvertneqq","supsetneq","leftarrow","nleqslant","llbracket","spadesuit","rrbracket","supseteqq","copyright","gtreqless","pitchfork","estimated","ngeqslant","therefore","triangleq","varpropto","subsetneq","heartsuit","lvertneqq","checkmark","nparallel","lesseqgtr","downarrow","backsimeq","Downarrow","subseteqq","setminus","succnsim","doteqdot","clubsuit","emptyset","sqsupset","curlyvee","varkappa","llcorner","varsigma","approxeq","backcong","supseteq","circledS","circledR","textcent","urcorner","lrcorner","boxminus","texteuro","vartheta","barwedge","sqsubset","subseteq","intercal","ulcorner","recorder","precnsim","parallel","boxtimes","multimap","maltese","nearrow","swarrow","lozenge","succsim","dotplus","lessgtr","Upsilon","Cdprime","gtrless","backsim","nexists","searrow","lessdot","boxplus","upsilon","epsilon","diamond","bigstar","ddagger","cdprime","Uparrow","between","sqangle","digamma","uparrow","nwarrow","precsim","because","bigcirc","lesssim","partial","natural","supset","hstrok","Tstrok","coprod","models","otimes","degree","gtrdot","preceq","Lambda","lambda","cprime","varrho","Bumpeq","hybull","lmidot","nvdash","lbrace","bullet","varphi","bumpeq","Lmidot","Cprime","female","rtimes","gtrsim","mapsto","daleth","square","nVDash","rangle","tstrok","oslash","ltimes","lfloor","marker","Subset","Vvdash","propto","Hstrok","dlcrop","forall","nVdash","Supset","langle","ominus","rfloor","circeq","eqcirc","drcrop","veebar","ulcrop","nvDash","urcrop","exists","approx","dagger","boxdot","succeq","bowtie","subset","notin","Sigma","Omega","nabla","colon","boxHu","boxHd","aleph","gnsim","boxHU","boxHD","equiv","lneqq","alpha","amalg","boxhU","boxhD","uplus","boxhu","kappa","sigma","boxDL","Theta","Vdash","boxDR","boxDl","sqcap","boxDr","dashv","vDash","boxdl","boxVl","boxVh","boxVr","boxdr","boxdL","boxVL","boxVH","boxVR","boxdR","theta","lhblk","uhblk","ldotp","ldots","boxvL","boxvH","boxvR","boxvl","boxvh","boxvr","Delta","boxUR","boxUL","oplus","boxUr","boxUl","doteq","happy","varpi","smile","boxul","simeq","boxuR","boxuL","boxhd","gimel","Gamma","lnsim","sqcup","omega","sharp","times","block","wedge","vdash","infty","gamma","asymp","rceil","lceil","delta","gneqq","frown","phone","vdots","boxr","perp","surd","vert","prec","mldr","cong","star","geqq","cdot","cdots","Vert","lnot","leqq","beta","beth","prod","circ","flat","oint","odot","nldr","nmid","zeta","iota","gneq","boxH","hbar","boxv","boxh","male","succ","lneq","boxV","leq","Cup","Psi","neq","cup","geq","mho","Dzh","cap","bot","psi","chi","Phi","ast","ell","top","lll","tau","Cap","sad","iff","eta","eth","rho","dzh","div","phi","Rsh","vee","int","sim","Lsh","yen","ggg","mid","sum","neg","Dz","Re","oe","DH","ll","ng","wr","wp","AE","AA","ss","dz","ae","aa","th","to","Pi","mp","Im","pm","pi","in","ni","ne","TH","Xi","nu","NG","xi","OE","gg","DJ","mu","dj","str_latex_to_unicode","key","replaceAll","str_to_mathematical_italic","default_diagram_style","_init_default_diagram_style","default_text_diagram_style","_init_default_text_diagram_style","default_textdata","_init_default_textdata","reset_default_styles","_IMAGE_DATAURL_CACHE_MAP","Map","draw_image","target_element","embed_image","svgtag","document","createElementNS","setAttribute","ex","ey","xpos","ypos","img","test","has","dataURL","get","canvas","createElement","ctx","getContext","base_image","crossOrigin","onload","drawImage","toDataURL","set","remove","set_image_href_dataURL","appendChild","collect_text","calculate_text_scale","referencesvgelement","pad","getBBox","refsvgelement_width","baseVal","refsvgelement_height","get_tagged_svg_element","svgelement","SVGElement","getAttribute","f_draw_to_svg","render_text","text_scaling_factor","createSVGPoint","appendItem","draw_polygon","polyline","draw_curve","warn","text_diagrams","multiline_diagrams","calculated_scale","angle_deg","font_size","text_content","is_texstr","innerHTML","draw_texts","textsvg","diagram_font_size","dg_scale_factor","_b","is_firstline","is_in_front","newline_dy","tspandata","_c","tspan","not_setting_dy","tspanstyle","dx","textdata_dy","_d","font_size_scale_factor","_e","whiteSpace","draw_multiline_texts","draw_to_svg","outer_svgelement","set_html_attribute","clear_svg","draw_to_svg_element","options","SVGSVGElement","filter_strings","defs","querySelector","insertBefore","firstChild","filter_string","handle_filter_strings","text_scaling_reference_svg","text_scaling_reference_padding","_f","pad_px","_g","svg_width","svg_height","overflow","background_color","viewBox","rect","startsWith","endsWith","is_texdisplaystr","handle_tex_in_svg","svg","texhandler","SVGTextElement","fontsizestr","svgstr","display","xstr","ystr","outerHTML","widthexstr","widthex","heightexstr","magic_number","xval","yval","download_svg_as_svg","inner_svgelement","locator_svgelement","copy_inner_svgelement","cloneNode","svg_string","XMLSerializer","serializeToString","blob","Blob","url","URL","createObjectURL","href","download","click","download_svg_as_png","svgelem","svg_blob","DOMURL","window","webkitURL","revokeObjectURL","imgURI","replace","rectangle","rectangle_corner","bottomleft","topright","side","regular_polygon","radius","regular_polygon_side","sidelength","circle","CIRCLE","arc","arrow","headsize","ARROW_LINE","ARROW_HEAD","arrow1","arrow2","line_diagram","direction","raw_triangle","textvar","circle_radius","center","p0","line_points","size","bb","area","vertices","yi","xj","abs","calculate_polygon_area","reduce","acc","d0_2","r_2","v0","sLeft","vLeft","sRight","vRight","len1","len2","p0_new","p1_new","newl","l1","l2","a1","b1","a2","b2","x1","y1","x2","y2","x3","y3","x4","y4","align_vertical","alignment","top_y","center_y","bottom_y","align_horizontal","left_x","center_x","right_x","distribute_horizontal","space","distributed_diagrams","prev_diagram","this_diagram","distribute_vertical","distribute_horizontal_and_align","horizontal_space","distribute_vertical_and_align","vertical_space","distribute_grid_row","column_count","vectical_space","row_count","ceil","rows","slice","row","grid_diagrams","distribute_variable_row","container_width","vertical_alignment","horizontal_alignment","current_row","current_row_w","add_diagrams_to_rows","distributed_row_dg","row_diagrams","defaultFormat_f","val","val_str","toFixed","format_number","control_svg_name","HTML_INT_TARGET","dnd_type","Interactive","control_container_div","diagram_outer_svg","inp_object_","event_target","SVG","inp_variables","inp_setter","display_mode","diagram_svg","locator_svg","dnd_svg","custom_svg","button_svg","locatorHandler","dragAndDropHandler","buttonHandler","draw_function","_","display_precision","intervals","registeredEventListenerRemoveFunctions","single_int_mode","draw","setViewBox","set_viewbox","variable_name","label","display_format_func","labeldiv","classList","container","locator_draw","locator_initial_draw","drag_and_drop_initial_draw","dnd_initial_draw","drawSvg","registerEventListener","element","callback","addEventListener","removeEventListener","removeRegisteredEventListener","forEach","get_svg_element","metaname","force_recreate","svg_element","call","isTargetingDocument","get_diagram_svg","DOCUMENT","locator","track_diagram","blink","control_svg","LocatorHandler","eventTarget","evt","drag","endDrag","registerCallback","redraw","setter","create_locator_circle_pointer_svg","blinking_outers","getElementsByClassName","addBlinkingCircleOuter","startDrag","track","coord","closest_point_from_points","registerSetter","init_pos","setPos","locator_custom","callback_rightclick","create_locator_diagram_svg","preventDefault","slider","time","oninput","create_slider","interval_time","playbutton","symboldiv","onclick","setInterval","clearInterval","leftcontainer","rightcontainer","init_drag_and_drop","dnd","DragAndDropHandler","dnd_container","capacity","config","add_container","dnd_draggable_to_container","container_name","add_draggable_to_container","dnd_draggable","container_diagram","add_draggable_with_container","dnd_register_drop_outside_callback","register_dropped_outside_callback","dnd_register_move_validation_function","fun","register_move_validation_function","dnd_move_to_container","try_move_draggable_to_container","get_dnd_data","getData","set_dnd_data","data","setData","get_dnd_container_content_size","get_container_content_size","NaN","set_dnd_content_sort","sort_content","remove_dnd_draggable","remove_draggable","remove_locator","remove_button","custom_object","id","classlist","custom","custom_object_g","init_button","button","ButtonHandler","button_toggle","diagram_on","diagram_off","state","main_callback","try_add_toggle","button_click","diagram_pressed","try_add_click","button_click_hover","diagram_hover","taget","source","closest_d2","closest_p","d2","clientPos_to_svgPos","clientPos","CTM","navigator","userAgent","toLowerCase","ctm","getScreenCTM","screenWidth","screenHeight","scalex","scaley","translateX","translateY","DOMMatrix","fromMatrix","firefox_calcCTM","getMousePosition","TouchEvent","touches","clientX","clientY","get_SVGPos_from_event","selectedElement","selectedVariable","mouseOffset","callbacks","svg_elements","blinking_circle_outers","first_touch_callback","element_pos","MouseEvent","mousepos","elementpos","handleBlinking","circle_outer","cursor","replaceWith","circle_inner","inner_radius","containers","draggables","hoveredContainerName","draggedElementName","draggedElementGhost","dropped_outside_callback","move_validation_function","dom_to_id_map","WeakMap","replace_container_svg","generate_position_map","p_center","x0","y0","nx","ny","p_top_center","sizelist","diagram_size","p_center_left","distributed","content_diagrams","replace_draggable_svg","draggable","add_draggable_svg","reposition_container_content","add_container_svg","move_draggable_to_container","initial_container_name","diagram_container_from_draggable","containerdata","prepend","onmousedown","ontouchstart","append","sort","sorting_function","custom_region_box","position_map","remove_draggable_from_container","draggable_name","ignore_callback","original_container_name","draggedElement","other_draggable_name","reset_hovered_class","ghosts","ghost","pointerEvents","get_dnd_element_data_from_evt","evt_touch","elementFromPoint","evt_","localName","parentElement","dg_tag","parent","element_data","_evt","reset_picked_class","states","svg_g_element","touchdownName","old_svg_on","old_svg_off","add_toggle","g_off","g_on","set_display","update_state","ontouchend","old_svg_normal","old_svg_pressed","old_svg_hover","add_click","g_normal","g_pressed","g_hover","pressed","hovered","pressed_state","hover_state","update_display","onmouseup","onmouseenter","onmouseleave","function_handle_path_type","modified_func","resample","new_points","get_round_corner_arc_points","count","p3","v1","v3","corner_angle","s_dist","d1","d3","pa","pb","distc","pc","angle_a","angle_b","angle_b_plus","angle_b_minus","angle_a_b","AlongIntersection","flip","new_arrowhead","arrowhead","v_tip","v_base1","v_base2","v_base","arrowhead_angle","point_indices","diagram_point_indices","curr_i","prev_i","next_i","prev_p","curr_p","next_p","arc_points","t_start","t_end","n_total","dnew","xs","ys","subdivide_points","Geometry","pointsSame","pointsSameX","pointsSameY","pointsCompare","GeometryEpsilon","super","pointAboveOrOnLine","left","right","Ax","Ay","Bx","By","Cx","pointBetween","d_py_ly","d_rx_lx","d_px_lx","d_ry_ly","pointsCollinear","dx1","dy1","dx2","dy2","linesIntersect","aStart","aEnd","bStart","bEnd","adx","ady","bdx","bdy","axb","categorize","BeforeStart","EqualStart","BetweenStartAndEnd","EqualEnd","AfterEnd","alongA","alongB","List","nodes","node","splice","getIndex","isEmpty","getHead","removeHead","shift","check","findTransition","insert","high","before","after","Segment","copyMyFill","log","otherFill","segmentId","myFill","above","below","Event","isStart","seg","primary","status","Intersecter","selfIntersection","geo","events","compareEvents","p1_isStart","p1_1","p1_2","p2_isStart","p2_1","p2_2","comp","addEvent","ev","here","other","divideEvent","ns","segmentChop","addSegment","newSegment","forward","evStart","evEnd","addRegion","region","pt1","pt2","compareStatus","ev1","ev2","statusFindSurrounding","checkIntersection","seg1","seg2","a1_equ_b1","a2_equ_b2","a1_between","a2_between","calculate","primaryPolyInverted","secondaryPolyInverted","_h","segments","segmentNew","surrounding","tempStatus","checkBothIntersections","eve","toggle","segmentUpdate","rewind","inside","st","statusRemove","done","select","selection","index","keep","selected","SegmentSelector","union","intersect","difference","differenceRev","xor","SegmentChainer","chains","regions","chainStart","first_match","matches_head","matches_pt1","second_match","next_match","setMatch","chain","head","tail","chainNew","chainMatch","pt","addToHead","grow","grow2","oppo","oppo2","chainRemoveHead","chainRemoveTail","chainClose","chainAddHead","unshift","chainAddTail","reverseChain","chainReverse","appendChain","index1","index2","chain1","chain2","tail2","head2","chainJoin","chainConnect","reverseF","BuildLog","list","nextSegmentId","curVert","segs","PolyBool","buildLog","enable","poly","inverted","segments1","segments2","combined","inverted1","inverted2","selectUnion","selectIntersect","selectDifference","selectDifferenceRev","selectXor","poly1","poly2","comb","seg3","polybool","dg_to_polybool","polybool_to_dg","diagrams_per_region","string_filter","tolerance","pol","shape1","shape2","outer_shadow","stdev","scale_factor","default_axes_options","xrange","yrange","xticks","yticks","n_sample","ticksize","tick_label_offset","axes_transform","axes_options","opt","xmin","xmax","ymin","ymax","lowerleft","upperright","ax","axes_empty","xorigin","yorigin","GRAPH_AXIS","axes_corner_empty","axes_corner_empty_xbreak","xbreak_ysize_","get_tick_numbers","xbreak_xsize","xbreak_xpos","trans_f","xbreak_pleft_","xbreak_pright_","xbreak_xsize_","xbreak_pbottom_","xbreak_ptop_","xbreak_curve","xaxis","xtickmark_empty","GRAPH_TICK","xtickmark","tick","GRAPH_TICK_LABEL","ytickmark_empty","ytickmark","tweak_interval","interval","get_tick_interval","range_order","log10","interval_to_try","pow","tick_counts","exclude_zero","nozero","magnitude","new_min","new_max","interval_prec","get_tick_numbers_aroundzero","round","get_tick_numbers_range","xycorneraxes","xyaxes","ax_origin","yaxis","ygrid","GRAPH_GRID","xgrid","xygrid","plotv","current_segment","path_diagrams","segment","plot","xdata","ydata","plotf","under_curvef","x_start","x_end","new_opt","text_offset","va","vb","angle_arc","gap","n_angle","p_mid","marks","offset","tablength","textoffset","tabsymmetric","pA","pB","tabA","tabB","lines","pmid","arrow_angle","p1_","p3_","arrow_head_size","vec","coil_number","separation_coefficient","sample_number","default_bar_options","to_ax_options","datavalues","baropt","bar_options","ax_f","Number","datanames","ax_opt","TableOrientation","arrowsize","number_offset","d_ticks","num","txt","fixed_size","rowsizes","colsizes","orientation","ROWS","diagram_rows","col_count","empty_map","empty_indices_map","get_empty_map","table","empty_fixed_size","get_points","diagram_grid","TABLE_CONTENT","ROW_","COL_","diagram_grid_combined","CONTAIN_TABLE","y_top","y_bot","x_left","cols","x_right","x_mid","y_mid","TABLE_CELL","EMPTY_CELL","TABLE","table_diagram","table_diagram_","cell","style_cell","styles","table_index","findIndex","new_table","min_rowsize","min_colsize","f_size","ticks","GeoType","quartiles","Q0","Q1","Q2","Q3","Q4","whisker_size","line_intersection","line_from_points","line_intersect_bbox","bottom_left","top_right","bl","tr","tl","br","intersections","tol","is_inside_bbox","dgline","typelist","object_names","keys","normalize_padding","dg_lines","namebg","o1","o2","slope","TreeDraw","tree","depth","number","tree_children","thread","mod","ancestor","change","lsibling","calculate_tree_buchheim","vertical_dist","horizontal_gap","dt","first_walk","second_walk","third_walk","position_diagram","td","self_halfwidth","lbrother","dist","default_ancestor","vir","vor","vil","vol","sir","sor","sil","sol","move_subtree","apportion","execute_shifts","midpoint","wl","subtrees","diagram_from_treeDraw","node_dg","children_dglist","line_diagrams","child_node","mirror_treenode","interpolate_cubic_spline","n_points","spline_points","curves","decodeURIComponent","atob","btoa","encodeURIComponent"],"mappings":"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OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACX,SAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,OAAW,IACXC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACV,QAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACV,QAAU,IACVC,MAAU,IACVC,MAAU,IACV9rB,MAAU,IACV+rB,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACV,QAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,MAAU,IACVC,KAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAU,IACV,OAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACTC,KAAS,IACTC,MAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACTC,KAAS,IACTC,KAAS,IACTC,KAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAU,IACVC,KAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACTC,KAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAU,IACV,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IAC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","x_google_ignoreList":[13]}